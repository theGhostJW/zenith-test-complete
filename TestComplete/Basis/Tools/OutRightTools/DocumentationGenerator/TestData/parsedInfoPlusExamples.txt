[{"name":"ArrayUtils","path":"C:\\DocTarget\\Utils\\ArrayUtils.sj","functions":[{"name":"arrayToFile","lineNo":7,"params":[{"name":"arr","markedOptional":false,"defaultVal":null},{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":true,"defaultVal":null}],"functionText":"function arrayToFile(arr, filePath, /* Optional */ encoding){\r  var arString = arrayToString(arr); \r  return stringToFile(arString, filePath, encoding);\r}","hasResult":true,"scriptName":"ArrayUtils","examples":["function arrayToFileUnitTest()\r{\r  var fileName, arr, result;\r  fileName = tempFile(\"Test.txt\");\r  \r  arr = [\"A\",\"B\",\"C\"];  \r  arrayToFile(arr, fileName);\r  result = arrayFromFile(fileName);\r  checkEqual(arr, result);\r  \r  arr = []; \r  arrayToFile(arr, fileName);\r  result = arrayFromFile(fileName);\r  checkEqual(arr, result);  \r}"]},{"name":"arrayFromFile","lineNo":12,"params":[{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function arrayFromFile(filePath, encoding){\r return ArrayUtilsParent.arrayFromFile(filePath, encoding);\r}","hasResult":true,"scriptName":"ArrayUtils","examples":[]},{"name":"arrayFromString","lineNo":18,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function arrayFromString(str){\r  return ArrayUtilsParent.arrayFromString(str);\r}","hasResult":true,"scriptName":"ArrayUtils","examples":["function arrayFromStringUnitTest()\r{\r  var arr, str, result;\r  \r  arr = [\"A\",\"B\",\"C\"];\r  str = ArrayToString(arr);\r  result = arrayFromString(str);\r  checkEqual(arr, result);\r  \r  arr = [];\r  str = ArrayToString(arr);\r  result = arrayFromString(str);\r  checkEqual(arr, result);\r}"]},{"name":"arrayToString","lineNo":22,"params":[{"name":"arr","markedOptional":false,"defaultVal":null}],"functionText":"function arrayToString(arr){\r  return ArrayUtilsParent.arrayToString(arr); \r}","hasResult":true,"scriptName":"ArrayUtils","examples":["function arrayToStringUnitTest()\r{\r  var arr\r  arr = Array(\"A\",\"B\", 1)\r  \r  var result\r  result = ArrayToString(arr)\r  checkEqual(\"A\" + newLine() + \"B\" + newLine() + \"1\", result)\r  \r  arr = Array(\"A\",\"\", 1) \r  result = ArrayToString(arr)\r  checkEqual(\"A\" + newLine() + \"\" + newLine() + \"1\", result) \r  \r  arr = Array(\"\",\"B\", 1) \r  result = ArrayToString(arr)\r  checkEqual(\"\" + newLine() + \"B\" + newLine() + \"1\", result) \r}"]},{"name":"joinRemoveEmpty","lineNo":27,"params":[{"name":"arr","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":"\"\""}],"functionText":"function joinRemoveEmpty(arr, delim)\r{\r  return _.filter(arr, hasValue).join(def(delim, \"\"));\r}","hasResult":true,"scriptName":"ArrayUtils","examples":["function joinRemoveEmptyUnitTest() \r{\r var und;\r var arr = ['1', 'two', '', und, 'end'];\r var result = joinRemoveEmpty(arr, \",\");\r checkEqual('1,two,end', result);\r \r arr = [\"a\",\"b\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"a, b, c\", result);\r \r arr = [\"a\",\"\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"a, c\", result);\r \r arr = [\"\",\"\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"c\", result);\r \r arr = [\"a\",\"b\",\"c\"];\r result = joinRemoveEmpty(arr, \"\");\r checkEqual(\"abc\", result)\r}"]},{"name":"hasTextItem","lineNo":33,"params":[{"name":"strNeedle","markedOptional":false,"defaultVal":null},{"name":"arHayStack","markedOptional":false,"defaultVal":null}],"functionText":"function hasTextItem(strNeedle, arHayStack)\r{\r  var needleLowercase = hasValue(strNeedle) ? strNeedle.toLowerCase(): strNeedle;  \r  return _.any(\r    arHayStack, \r    function(item){return hasValue(item) ? item.toLowerCase() === needleLowercase : item === needleLowercase}\r  );\r}","hasResult":true,"scriptName":"ArrayUtils","examples":["function hasTextItemUnitTest()\r{\r  var arr = [\"One\", \"too\", \"three\"];\r  var result = hasTextItem(\"THREE\", arr);\r  check(result);\r  \r  result = hasTextItem(null, arr);\r  checkFalse(result);\r  \r  arr.push(null);\r  result = hasTextItem(null, arr);\r  check(result);\r}"]}]},{"name":"ArrayUtilsEndPoints","path":"C:\\DocTarget\\Utils\\ArrayUtilsEndPoints.sj","functions":[{"name":"arrayToFileUnitTest","lineNo":7,"params":[],"functionText":"function arrayToFileUnitTest()\r{\r  var fileName, arr, result;\r  fileName = tempFile(\"Test.txt\");\r  \r  arr = [\"A\",\"B\",\"C\"];  \r  arrayToFile(arr, fileName);\r  result = arrayFromFile(fileName);\r  checkEqual(arr, result);\r  \r  arr = []; \r  arrayToFile(arr, fileName);\r  result = arrayFromFile(fileName);\r  checkEqual(arr, result);  \r}","hasResult":false,"scriptName":"ArrayUtilsEndPoints"},{"name":"arrayFromStringUnitTest","lineNo":23,"params":[],"functionText":"function arrayFromStringUnitTest()\r{\r  var arr, str, result;\r  \r  arr = [\"A\",\"B\",\"C\"];\r  str = ArrayToString(arr);\r  result = arrayFromString(str);\r  checkEqual(arr, result);\r  \r  arr = [];\r  str = ArrayToString(arr);\r  result = arrayFromString(str);\r  checkEqual(arr, result);\r}","hasResult":false,"scriptName":"ArrayUtilsEndPoints"},{"name":"arrayToStringUnitTest","lineNo":38,"params":[],"functionText":"function arrayToStringUnitTest()\r{\r  var arr\r  arr = Array(\"A\",\"B\", 1)\r  \r  var result\r  result = ArrayToString(arr)\r  checkEqual(\"A\" + newLine() + \"B\" + newLine() + \"1\", result)\r  \r  arr = Array(\"A\",\"\", 1) \r  result = ArrayToString(arr)\r  checkEqual(\"A\" + newLine() + \"\" + newLine() + \"1\", result) \r  \r  arr = Array(\"\",\"B\", 1) \r  result = ArrayToString(arr)\r  checkEqual(\"\" + newLine() + \"B\" + newLine() + \"1\", result) \r}","hasResult":false,"scriptName":"ArrayUtilsEndPoints"},{"name":"joinRemoveEmptyUnitTest","lineNo":56,"params":[],"functionText":"function joinRemoveEmptyUnitTest() \r{\r var und;\r var arr = ['1', 'two', '', und, 'end'];\r var result = joinRemoveEmpty(arr, \",\");\r checkEqual('1,two,end', result);\r \r arr = [\"a\",\"b\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"a, b, c\", result);\r \r arr = [\"a\",\"\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"a, c\", result);\r \r arr = [\"\",\"\",\"c\"];\r result = joinRemoveEmpty(arr, \", \");\r checkEqual(\"c\", result);\r \r arr = [\"a\",\"b\",\"c\"];\r result = joinRemoveEmpty(arr, \"\");\r checkEqual(\"abc\", result)\r}","hasResult":false,"scriptName":"ArrayUtilsEndPoints"},{"name":"hasTextItemUnitTest","lineNo":80,"params":[],"functionText":"function hasTextItemUnitTest()\r{\r  var arr = [\"One\", \"too\", \"three\"];\r  var result = hasTextItem(\"THREE\", arr);\r  check(result);\r  \r  result = hasTextItem(null, arr);\r  checkFalse(result);\r  \r  arr.push(null);\r  result = hasTextItem(null, arr);\r  check(result);\r}","hasResult":false,"scriptName":"ArrayUtilsEndPoints"}]},{"name":"ArrayUtilsParent","path":"C:\\DocTarget\\Utils\\ArrayUtilsParent.sj","functions":[{"name":"arrayToFile","lineNo":4,"params":[{"name":"arr","markedOptional":false,"defaultVal":null},{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":true,"defaultVal":null}],"functionText":"function arrayToFile(arr, filePath, /* Optional */ encoding){\r  var arString = arrayToString(arr); \r  return stringToFile(arString, filePath, encoding);\r}","hasResult":true,"scriptName":"ArrayUtilsParent"},{"name":"arrayToString","lineNo":10,"params":[{"name":"arr","markedOptional":false,"defaultVal":null}],"functionText":"function arrayToString(arr){\r  return arr.join(newLine()); \r}","hasResult":true,"scriptName":"ArrayUtilsParent"},{"name":"arrayFromFile","lineNo":15,"params":[{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function arrayFromFile(filePath, encoding){\r  var fileString = stringFromFile(filePath, encoding);\r  return arrayFromString(fileString)\r}","hasResult":true,"scriptName":"ArrayUtilsParent"},{"name":"arrayFromString","lineNo":22,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function arrayFromString(str){\r  return hasValue(str) ? str.split(newLine()): [];\r}","hasResult":true,"scriptName":"ArrayUtilsParent"}]},{"name":"ArrayUtilsPrivate","path":"C:\\DocTarget\\Utils\\ArrayUtilsPrivate.sj","functions":[{"name":"EmptyFunctionToKeepparserHappy","lineNo":1,"params":[],"functionText":"function EmptyFunctionToKeepparserHappy(){\r}","hasResult":false,"scriptName":"ArrayUtilsPrivate"}]},{"name":"CheckUtils","path":"C:\\DocTarget\\Utils\\CheckUtils.sj","functions":[{"name":"checkEqual","lineNo":5,"params":[{"name":"expected","markedOptional":false,"defaultVal":null},{"name":"actual","markedOptional":false,"defaultVal":null},{"name":"messageStr","markedOptional":false,"defaultVal":null},{"name":"throwException","markedOptional":false,"defaultVal":null}],"functionText":"function checkEqual(expected, actual, messageStr, throwException){\r\tvar passed = areEqual(expected, actual);\r\tvar msgBase = \"Expected: \" + expected + \" did not equal Actual: \" + actual + \". \"\r\tvar failMessage = messageStr ? msgBase + messageStr : msgBase;\r\treturn check(passed, failMessage, throwException);\r}","hasResult":true,"scriptName":"CheckUtils","examples":["function checkEqualUnitTest(){\r\tcheckEqual(1, 1);\r\tcheckEqual(null, null);\r\tcheckEqual(\"hi\", \"hi\", \"messge add on will not be used\");\r\t// will fail: checkEqual(1, 2, \"message to add on will be displayed\")\r}"]},{"name":"checkContains","lineNo":13,"params":[{"name":"needle","markedOptional":false,"defaultVal":null},{"name":"hayStack","markedOptional":false,"defaultVal":null},{"name":"errorMessage","markedOptional":false,"defaultVal":null}],"functionText":"function checkContains(needle, hayStack, errorMessage){\r  var found = (hayStack.indexOf(needle) > -1);\r  if (!found){\r    errorMessage = def(errorMessage, '');\r    errorMessage = hasValue(errorMessage) ? errorMessage + ': ' : errorMessage;\r    errorMessage = errorMessage + 'looking for: ' + needle + newLine() + ' in ' + newLine() + hayStack; \r  }\r  check(found, errorMessage);\r}","hasResult":false,"scriptName":"CheckUtils","examples":["function checkContainsEndPoint() \r{\r  // pass\r  checkContains('hi', ' hi ');\r  // fail\r  checkContains('hI', ' hi there ');\r  // fail\r  checkContains('hi', '');\r   checkContains('hi', '', 'fail message');\r}"]},{"name":"check","lineNo":65,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"messageStr","markedOptional":false,"defaultVal":null},{"name":"throwException","markedOptional":false,"defaultVal":null},{"name":"negate","markedOptional":false,"defaultVal":null}],"functionText":"function check(condition, messageStr, throwException, negate){\r  return checkWithMainMessagePrefix(condition, \"Check Failure\", messageStr, throwException, negate);\r}","hasResult":true,"scriptName":"CheckUtils","examples":["function checkEndPoint()\r{\r  var myVar;\r  check(myVar, \"Undefined error should log\", false);\r\tcheck(false, \"msg\", false, true);\r\tcheck(false);\r\tcheck(false, \"Check Message\");\r\tcheck(true);\r\tcheck(true, \"Msg\");\r\tcheck(false, \"Exception should be thrown\", true);\r}"]},{"name":"checkEndPoint","lineNo":71,"params":[],"functionText":"function checkEndPoint()\r{\r  var myVar;\r  check(myVar, \"Undefined error should log\", false);\r\tcheck(false, \"msg\", false, true);\r\tcheck(false);\r\tcheck(false, \"Check Message\");\r\tcheck(true);\r\tcheck(true, \"Msg\");\r\tcheck(false, \"Exception should be thrown\", true);\r}","hasResult":false,"scriptName":"CheckUtils","examples":[]},{"name":"checkFalse","lineNo":84,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"messageStr","markedOptional":false,"defaultVal":null},{"name":"throwException","markedOptional":false,"defaultVal":null}],"functionText":"function checkFalse(condition, messageStr, throwException)\r{\r  check(condition, messageStr, throwException, true)\r}","hasResult":false,"scriptName":"CheckUtils","examples":["function checkFalseEndPoint()\r{\r  checkFalse(false,\"should not error\",false,true);\r  checkFalse(false);\r  checkFalse(false, \"No Error\");\r  checkFalse(true);\r  checkFalse(true,\"Error\");\r  checkFalse(false,\"No Exception should be thrown\",true);\r  checkFalse(true,\"Exception should be thrown\",true);\r}"]},{"name":"checkFalseEndPoint","lineNo":91,"params":[],"functionText":"function checkFalseEndPoint()\r{\r  checkFalse(false,\"should not error\",false,true);\r  checkFalse(false);\r  checkFalse(false, \"No Error\");\r  checkFalse(true);\r  checkFalse(true,\"Error\");\r  checkFalse(false,\"No Exception should be thrown\",true);\r  checkFalse(true,\"Exception should be thrown\",true);\r}","hasResult":false,"scriptName":"CheckUtils","examples":[]}]},{"name":"CheckUtilsEndPoints","path":"C:\\DocTarget\\Utils\\CheckUtilsEndPoints.sj","functions":[{"name":"checkEqualUnitTest","lineNo":2,"params":[],"functionText":"function checkEqualUnitTest(){\r\tcheckEqual(1, 1);\r\tcheckEqual(null, null);\r\tcheckEqual(\"hi\", \"hi\", \"messge add on will not be used\");\r\t// will fail: checkEqual(1, 2, \"message to add on will be displayed\")\r}","hasResult":false,"scriptName":"CheckUtilsEndPoints"},{"name":"checkContainsEndPoint","lineNo":9,"params":[],"functionText":"function checkContainsEndPoint() \r{\r  // pass\r  checkContains('hi', ' hi ');\r  // fail\r  checkContains('hI', ' hi there ');\r  // fail\r  checkContains('hi', '');\r   checkContains('hi', '', 'fail message');\r}","hasResult":false,"scriptName":"CheckUtilsEndPoints"}]},{"name":"CheckUtilsParent","path":"C:\\DocTarget\\Utils\\CheckUtilsParent.sj","functions":[{"name":"checkWithMainMessagePrefix","lineNo":2,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"mainMessagePrefix","markedOptional":false,"defaultVal":"\"\""},{"name":"messageStr","markedOptional":false,"defaultVal":null},{"name":"throwException","markedOptional":false,"defaultVal":null},{"name":"negate","markedOptional":false,"defaultVal":null}],"functionText":"function checkWithMainMessagePrefix(condition, mainMessagePrefix, messageStr, throwException, negate)\r{\r\tvar fail = false;\r\tvar err;\r\tvar conditionNull = isNullEmptyOrUndefined(condition);\r  mainMessagePrefix = def(mainMessagePrefix, \"\");\r\tif (isNullEmptyOrUndefined(condition))\r\t{\r\t\terr = mainMessagePrefix + \" - Condition is null empty string or undefined\";\r\t\tfail = true;\r\t}\r\telse\r\t{\r\t\tnegate = def(negate, false);\r\t\tif (condition === negate)\r\t\t{\r\t\t\terr = mainMessagePrefix + \" - Condition Not Met\";\r\t\t\tfail = true;\r\t\t}\r\t}\r\r\tif (fail)\r\t{\r\t\tvar msg = messageStr ? messageStr : err;\r\t\tif (throwException)\r\t\t{\r\t\t\tthrowEx(err, msg);\r\t\t}\r\t\telse\r\t\t{\r\t\t\tLog.Error(err, msg);\r\t\t}\r\t}\r}","hasResult":false,"scriptName":"CheckUtilsParent"}]},{"name":"CheckUtilsPrivate","path":"C:\\DocTarget\\Utils\\CheckUtilsPrivate.sj","functions":[{"name":"checkWithMainMessagePrefix","lineNo":2,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"mainMessagePrefix","markedOptional":false,"defaultVal":null},{"name":"messageStr","markedOptional":false,"defaultVal":null},{"name":"throwException","markedOptional":false,"defaultVal":null},{"name":"negate","markedOptional":false,"defaultVal":null}],"functionText":"function checkWithMainMessagePrefix(condition, mainMessagePrefix, messageStr, throwException, negate){\r  return CheckUtilsParent.checkWithMainMessagePrefix(condition, mainMessagePrefix, messageStr, throwException, negate);\r}","hasResult":true,"scriptName":"CheckUtilsPrivate"}]},{"name":"DataClassUtils","path":"C:\\DocTarget\\Utils\\DataClassUtils.sj","functions":[{"name":"updatedDataClasses","lineNo":2,"params":[],"functionText":"function updatedDataClasses(){\r  privUpdateDataClasses(false);\r}","hasResult":false,"scriptName":"DataClassUtils","examples":[]},{"name":"updatedDataClassesForce","lineNo":6,"params":[],"functionText":"function updatedDataClassesForce(){\r  privUpdateDataClasses(true);\r}","hasResult":false,"scriptName":"DataClassUtils","examples":[]}]},{"name":"DataClassUtilsEndPoints","path":"C:\\DocTarget\\Utils\\DataClassUtilsEndPoints.sj","functions":[{"name":"EmptyFunctionToKeepparserHappy","lineNo":3,"params":[],"functionText":"function EmptyFunctionToKeepparserHappy(){\r}","hasResult":false,"scriptName":"DataClassUtilsEndPoints"}]},{"name":"DataClassUtilsPrivate","path":"C:\\DocTarget\\Utils\\DataClassUtilsPrivate.sj","functions":[{"name":"privUpdateDataClasses","lineNo":10,"params":[{"name":"force","markedOptional":false,"defaultVal":null}],"functionText":"function privUpdateDataClasses(force){\r  if (force){\r    ODT.Classes.Clear(); \r  }\r  \r  var iterator = aqFileSystem.FindFiles(testDataPath() , '*.xlsx', true);\r  while(iterator.HasNext()){\r    var thisFile = iterator.Next();\r    var classname = Trim(thisFile.NameWithoutExtension);\r    // exclude temp files\r    if (aqString.GetChar(classname, 0) !== '~' ) {\r      updateDataClassIfNotUpdated(classname, force);\r    }\r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"PrepTestFileData","lineNo":26,"params":[],"functionText":"function PrepTestFileData(){\r  var source = testDataFile(\"DataClassGenTest.xlsx\");\r  for (var counter = 0; counter < 1000; counter++){\r    var newFile = aqString.Replace(source, \".xlsx\", counter + \".xlsx\");\r    aqFileSystem.CopyFile(source, newFile);\r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"loadIteration","lineNo":38,"params":[{"name":"testCase","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function loadIteration(testCase, iteration){\r  ensure(\r    loadIterationPrivate(This, testCase, iteration), \r    \"LoadIteration for class: \" + This.Name + \" index out of range: \" + iteration + newLine() + \"The max index is: \" + iteration\r    );\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"loadIterationEndPoint","lineNo":45,"params":[],"functionText":"function loadIterationEndPoint(){\r   ODT.Classes.DataClassGentest.loadIteration(1,0);\r   ODT.Classes.DataClassGentest.loadIteration(1,1);\r   // Should Blow Up\r   //ODT.Classes.DataClassGentest.loadIteration(1,3);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"next","lineNo":54,"params":[{"name":"testCase","markedOptional":false,"defaultVal":null}],"functionText":"function next(testCase){\r  return loadIterationPrivate(This, testCase, This.CurrentIndex + 1);\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"nextEndPoint","lineNo":58,"params":[],"functionText":"function nextEndPoint(){\r  var data = ODT.Classes.DataClassGentest;\r  data.resetIterator();\r  while (data.next(1)) {\r   Log.Message(data.FieldDate);  \r  }\r  \r  data.resetIterator();\r  while(data.next(1)){\r   Log.Message(data.FieldDate);  \r  }\r  \r  data.resetIterator();\r  while(data.next(1)){\r   Log.Message(data.FieldDate);  \r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"loadIterationPrivate","lineNo":77,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null},{"name":"testCase","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":"0"}],"functionText":"function loadIterationPrivate(odtClass, testCase, iteration){\r  iteration = def(iteration, 0);\r  var className = odtClass.Name;\r  var driver = DataConnection(className);\r   \r  var thisIteration = -1;\r  var loaded = driver.locate({\"TestCase\": testCase}, iteration);\r  if (loaded){\r    loadClass(odtClass, driver, iteration);\r  }\r  driver.close(); \r  return loaded;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"updateDataClassIfNotUpdated","lineNo":93,"params":[{"name":"classNameOrClass","markedOptional":false,"defaultVal":null},{"name":"force","markedOptional":false,"defaultVal":"false"}],"functionText":"function updateDataClassIfNotUpdated(classNameOrClass, force){\r   force = def(force, false);\r   var className = _.isString(classNameOrClass) \r                              ? classNameOrClass \r                              : classNameOrClass.Name; \r                              \r   var updatedDict = allReadyUpdatedDictionary;\r   if (!updatedDict[className]){\r    if (force || updateRequired(className)){\r      Indicator.PushText(\"Updating Class: \" + className);\r      generateDataClass(className, false);\r    }\r    updatedDict[className] = true;\r   }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"updateDataClassIfNotUpdatedUnitTest","lineNo":109,"params":[],"functionText":"function updateDataClassIfNotUpdatedUnitTest(){\r  updateDataClassIfNotUpdated(\"DataClassGenTest\");\r  updateDataClassIfNotUpdated(\"DataClassGenTest\");\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"dataClassUtilsScriptLastUpdated","lineNo":115,"params":[],"functionText":"function dataClassUtilsScriptLastUpdated(){\r  if (_.isUndefined(dataClassUtilsLastUpdated)){\r    var path = scriptFilePath(DATA_CLASS_UTILS_SCRIPT_NAME);\r    dataClassUtilsLastUpdated = FileUtils.fileLastModified(path);\r  }\r  return dataClassUtilsLastUpdated;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"updateRequired","lineNo":123,"params":[{"name":"className","markedOptional":false,"defaultVal":null}],"functionText":"function updateRequired(className){\r  var result;\r  try\r  {\r    var lastUpdated = ODT.Classes(className).Properties(UPDATED_WHEN_PROP_NAME).Value;\r    result = _.isUndefined(lastUpdated);\r    if (!result) {\r      lastUpdated = aqConvert.StrToDateTime(lastUpdated);\r      var scriptLastUpdated =  dataClassUtilsScriptLastUpdated();\r      var spreadSheetLastUpdated = testDataFileLastModified(forceExcelExtension(className)); \r      result = lastUpdated < spreadSheetLastUpdated || lastUpdated < scriptLastUpdated; \r    }\r  }\r  catch (e)\r  {\r   result = true;\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"generateDataClass","lineNo":143,"params":[{"name":"className","markedOptional":false,"defaultVal":null},{"name":"overwrite","markedOptional":false,"defaultVal":null}],"functionText":"function generateDataClass(className, overwrite)\r{\r  var fieldData = getFieldData(className); \r  generateDataClassFromPropsList(className, fieldData.fields, fieldData.childClassName, fieldData.childFields, overwrite, false); \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"generateDataClassUnitTest","lineNo":149,"params":[],"functionText":"function generateDataClassUnitTest()\r{\r  generateDataClass(\"DataClassGenTest\", false); \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"loadClass","lineNo":156,"params":[{"name":"classToLoad","markedOptional":false,"defaultVal":null},{"name":"driver","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null},{"name":"isChild","markedOptional":false,"defaultVal":"false"}],"functionText":"function loadClass(classToLoad, driver, iteration, isChild)\r{\r  isChild = def(isChild, false);\r  // field map array of array of [driver col index,property index]\r  var fieldMap = getFieldMap(classToLoad, driver, isChild);\r  _.each(\r     fieldMap,\r     function(mapItem){\r      classToLoad.Properties(mapItem[0]).Value = driver.value(mapItem[1]); \r     }\r  );\r  \r  classToLoad.currentIndex = iteration;\r  \r  if (!isChild) {\r    classToLoad.resetChildIterator();\r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"loadClassUnitTest","lineNo":175,"params":[],"functionText":"function loadClassUnitTest(){\r  var className = \"DataClassGentest\";\r  generateDataClass(className, true);\r  var driver = DataConnection(className);\r  loadClass(ODT.Classes.DataClassGenTest, driver, 0);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"resetChildIterator","lineNo":183,"params":[],"functionText":"function resetChildIterator(){\r  var chldClassName = childClassName(This);\r  if(hasValue(chldClassName)){\r    var childClass = ODT.Classes.Items(chldClassName); \r    childClass.resetIterator();\r  };\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"resetIteratorOfClass","lineNo":191,"params":[{"name":"clssObj","markedOptional":false,"defaultVal":null}],"functionText":"function resetIteratorOfClass(clssObj){\r  clssObj.CurrentIndex = -1;\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"resetIterator","lineNo":196,"params":[],"functionText":"function resetIterator(){\r  resetIteratorOfClass(This);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"childClassName","lineNo":200,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null}],"functionText":"function childClassName(odtClass){ \r  var arProps = classProperties(odtClass);\r  var childClassProps = \r    _.filter(arProps,\r    function(propname){\r      return isODTClass(odtClass.Properties(propname).Value); \r    }\r  );\r  \r  ensure(childClassProps.length < 2, odtClass.Name +\r   \" appears to have more than one child class - property of ODT class type this is not supported\");\r  \r  return childClassProps.length > 0 ? childClassProps[0] : \"\"; \r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"isODTClass","lineNo":215,"params":[{"name":"candidate","markedOptional":false,"defaultVal":null}],"functionText":"function isODTClass(candidate){\r  var result;\r  try\r  {\r    result = !_.isUndefined(candidate.PropertyCount);\r  }\r  catch (e)\r  {\r    result = false;\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"getFieldMap","lineNo":231,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null},{"name":"driver","markedOptional":false,"defaultVal":null},{"name":"isChild","markedOptional":false,"defaultVal":"false"}],"functionText":"function getFieldMap(odtClass, driver, isChild) {\r  isChild = def(isChild, false);\r  if (!singletonFieldMapDictionary.hasOwnProperty(odtClass.Name))\r  {\r    var propNames = classProperties(odtClass),\r    driverColNames = isChild ? childColNames(driver) : colNames(driver),\r    childClassPropName = childClassName(odtClass)\r    propCount = 0,\r    result = [];\r    \r    var propNamesNoReservedNames = _.reject(\r      propNames, \r      function(propName){\r        var result =\r          sameText(propName, currentIndexPropName())|| \r          sameText(propName, childClassPropName) ||\r          sameText(propName, UPDATED_WHEN_PROP_NAME);\r        return result;\r        }\r      );\r      \r    _.each(propNamesNoReservedNames,\r      function(propName){\r          var newItem = [propCount],\r          colPos = driverColNames[propName]; \r          ensure(hasValue(colPos), \"column not found in spreadsheet: \" + odtClass.Name + \".\" + propName);\r          newItem.push(colPos);\r          result.push(newItem);\r          propCount++;\r        }\r    );\r    singletonFieldMapDictionary[odtClass.Name] = result;\r  }\r  \r  return singletonFieldMapDictionary[odtClass.Name];\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"getFieldMapUnitTest","lineNo":268,"params":[],"functionText":"function getFieldMapUnitTest() {\r  generateDataClass(\"DataClassGenTest\", true);\r  var driver = DataConnection(\"DataClassGenTest\");\r  var result = getFieldMap(ODT.Classes.DataClassGenTest, driver);\r  checkEqual(7, result.length);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"colNames","lineNo":275,"params":[{"name":"driver","markedOptional":false,"defaultVal":null}],"functionText":"function colNames(driver) {\r  return getFieldData(driver).fields;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"childColNames","lineNo":279,"params":[{"name":"driver","markedOptional":false,"defaultVal":null}],"functionText":"function childColNames(driver) {\r  return getFieldData(driver).childFields;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"colNamesUnitTest","lineNo":283,"params":[],"functionText":"function colNamesUnitTest(){\r  var driver = DataConnection(\"DataClassGentest\"),\r  result = colNames(driver);\r  checkEqual(7, result.length);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"isCommentField","lineNo":289,"params":[{"name":"thisFieldName","markedOptional":false,"defaultVal":null}],"functionText":"function isCommentField(thisFieldName)\r{\r  thisFieldName = Trim(thisFieldName);\r  return (aqString.Find(thisFieldName, \"<\") === 0);\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"isCommentFieldUnitTest","lineNo":295,"params":[],"functionText":"function isCommentFieldUnitTest()\r{\r  var result = isCommentField(\"  <Comment rec Blahh>\"); \r  check(result);   \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"getFieldData","lineNo":301,"params":[{"name":"classNameOrDriver","markedOptional":false,"defaultVal":null}],"functionText":"function getFieldData(classNameOrDriver)\r{\r  var counter, \r  thisFieldName,\r  childClassName,\r  fields = {}, \r  childFields = {}, \r  newDataConnectionCreated = _.isString(classNameOrDriver),\r  driver = newDataConnectionCreated ? DataConnection(classNameOrDriver): classNameOrDriver;\r  \r  var colCount = driver.colCount();\r  for (counter = 0; counter < colCount; counter++)\r  {\r    thisFieldName = driver.name(counter);\r    if (!isCommentField(thisFieldName))\r    {\r      if (hasValue(childClassName))\r      {\r        childFields[thisFieldName] = counter;\r      }\r      else\r      {\r        childClassName = getChildClassNameFromFieldName(thisFieldName);\r        if (!hasValue(childClassName))\r        {\r          fields[thisFieldName] = counter;\r        }\r      }   \r    }\r  }\r  \r  if (newDataConnectionCreated){\r    driver.close();\r  }\r  \r  return {\r    fields: fields,\r    childFields: childFields,\r    childClassName: childClassName\r  };\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"isChildClassColumn","lineNo":343,"params":[{"name":"columnName","markedOptional":false,"defaultVal":null}],"functionText":"function isChildClassColumn(columnName){\r  return hasValue(getChildClassNameFromFieldName(columnName));\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"getChildClassNameFromFieldName","lineNo":347,"params":[{"name":"thisFieldName","markedOptional":false,"defaultVal":null}],"functionText":"function getChildClassNameFromFieldName(thisFieldName)\r{  \r  var result;\r  thisFieldName = Trim(thisFieldName);\r  if (aqString.Find(thisFieldName, \"(\") === 0)\r  {\r    var firstCloseBracketPos = aqString.GetLength(thisFieldName) - 1;\r    ensure(aqString.Find(thisFieldName, \")\") === firstCloseBracketPos, \"Invalid child field token in spreadsheet: \" + thisFieldName);  \r    result = aqString.SubString(thisFieldName, 1, aqString.GetLength(thisFieldName) - 2);\r  }\r  else\r  {\r    result = \"\";\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"generateDataClassFromPropsList","lineNo":364,"params":[{"name":"className","markedOptional":false,"defaultVal":null},{"name":"propsList","markedOptional":false,"defaultVal":null},{"name":"childClassName","markedOptional":false,"defaultVal":null},{"name":"childClassPropsList","markedOptional":false,"defaultVal":null},{"name":"overwrite","markedOptional":false,"defaultVal":null},{"name":"isChildClass","markedOptional":false,"defaultVal":null}],"functionText":"function generateDataClassFromPropsList(className, propsList, childClassName, childClassPropsList, overwrite, isChildClass)\r{\r  //Generate child first because it is used as a property\r  //later\r  if (hasValue(childClassName)){\r    generateDataClassFromPropsList(childClassName, childClassPropsList, null, null, overwrite, true)\r  }\r  \r  if (classExists(className) && overwrite){\r    ODT.Classes.Delete(className);\r  }\r  \r  if (!classExists(className)){\r    ODT.Classes.Declare(className);\r  }\r  \r  generateProperties(className, childClassName, propsList, isChildClass);\r  generateMethods(className, hasValue(childClassName), isChildClass);\r  if (!isChildClass){\r    ODT.Classes(className).Properties(UPDATED_WHEN_PROP_NAME) = aqDateTime.Now();  \r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"generateDataClassFromPropsListUnitTest","lineNo":388,"params":[],"functionText":"function generateDataClassFromPropsListUnitTest()\r{\r  generateDataClassFromPropsList(\"TestClass\", Array(\"Field1\",\"Field2\",\"Field3\",\"Field4\"), null, null, true, false);\r  generateDataClassFromPropsList(\"TestClass\", Array(\"Field1\",\"Field2\",\"Field3\"), null, null, true, false);\r  generateDataClassFromPropsList(\"TestClass\", Array(\"Field1\",\"Field2\",\"Field3\"), \"ChildItems\",  Array(\"cField1\",\"cField2\",\"cField3\"), true, false);\r  \r  //should throw exception\r  //generateDataClassFromPropsList(\"BadFieldNames\", Array(\"Name\",\"Next\",\"CurrentIndex\"), null, null, true)  \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"getDriver","lineNo":401,"params":[],"functionText":"function getDriver(){\r  var className = This.Name;\r  //updateDataClassIfNotUpdated(className);\r  return DataConnection(className);  \r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"locate","lineNo":408,"params":[{"name":"lookUpNameVals","markedOptional":false,"defaultVal":null},{"name":"driver","markedOptional":true,"defaultVal":null}],"functionText":"function locate(lookUpNameVals, /*optional*/ driver){\r  return locatePrivate(This, lookUpNameVals, 0,  driver);\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"locateUnitTest","lineNo":412,"params":[],"functionText":"function locateUnitTest(){\r  var dataClass = ODT.Classes.DataClassGentest;\r  var expected = aqDateTime.SetDateElements(2000,1,4);\r  var result = dataClass.locate({fieldDate: expected});\r  check(result);\r  checkEqual(expected, dataClass.FieldDate);\r  \r  result = dataClass.locate({fieldCurrency: -1.9});\r  check(result);\r  checkEqual(\"cMarch1\", dataClass.FieldMixed);\r  \r  var driver = dataClass.getDriver();\r  expected = aqDateTime.SetDateElements(2000,1,4);\r  result = dataClass.locate({fieldDate: expected}, driver);\r  driver.close();\r  check(result);\r  checkEqual(expected, dataClass.FieldDate);\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"locatePrivate","lineNo":431,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null},{"name":"lookUpNameVals","markedOptional":false,"defaultVal":null},{"name":"offset","markedOptional":true,"defaultVal":null},{"name":"driver","markedOptional":false,"defaultVal":null}],"functionText":"function locatePrivate(odtClass, lookUpNameVals, /*optional*/ offset,  driver){\r  \r  var driverCreated = _.isUndefined(driver);\r  if (driverCreated){\r    driver = DataConnection(This.Name);\r    offSet = def(offset, 0);\r  }\r  else\r  {\r    // offset ignored if driver supplied\r    offset = 0;\r  }\r\r  // locate posistion recorded in current index\r  // so reset to -1 \r  resetIteratorOfClass(odtClass);\r  var result = driver.locate(lookUpNameVals, offset);\r  if (result){\r    loadClass(odtClass, driver, offset);\r  }\r \r  if (driverCreated){\r    driver.close();\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"locateNext","lineNo":459,"params":[{"name":"lookUpNameVals","markedOptional":false,"defaultVal":null},{"name":"driver","markedOptional":true,"defaultVal":null}],"functionText":"function locateNext(lookUpNameVals, /*optional*/ driver){\r  var iteration = This.CurrentIndex + 1;\r  return locatePrivate(This, lookUpNameVals, iteration,  driver);\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"locateNextEndPoint","lineNo":464,"params":[],"functionText":"function locateNextEndPoint(){\r  var data = ODT.Classes.DataClassGentest\r  check(data.locate({TestCase: 1}));\r  checkEqual(aqDateTime.SetDateElements(2000,1,1), data.FieldDate);\r  check(data.locateNext({TestCase: 1}));\r  checkEqual(aqDateTime.SetDateElements(2000,1,2), data.FieldDate);\r  checkFalse(data.locateNext({TestCase: 1}));\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"nextChild","lineNo":474,"params":[],"functionText":"function nextChild(){\r  var testCase = This.TestCase,\r  iteration = This.CurrentIndex,\r  thisChildClass = childClass(This);\r  \r  ensure(hasValue(thisChildClass), \"call to next child on class with no child class - \" + This.Name);\r  var childIteration = thisChildClass.CurrentIndex + 1;\r  \r  var result = false;\r  var driver = DataConnection(This.Name);\r  driver.locate({TestCase: testCase}, iteration);\r  var found = false;\r  for(var counter = 0; counter <= childIteration; counter++){\r    // expect that no child records after first will have a\r    // a test case ID so a test case id marks a new parent record\r    if (counter !== 0 && hasValue(driver.value(\"TestCase\"))){\r      break;\r    }\r    else if (counter === childIteration){ \r      found = true;\r      loadClass(thisChildClass, driver, childIteration, true);\r      break;\r    }\r    else {\r      if (!driver.next())\r      {\r        break;\r      }\r    }\r  }\r  driver.close();\r  return found;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"nextChildEndPoint","lineNo":508,"params":[],"functionText":"function nextChildEndPoint(){\r  var data = ODT.Classes.DataClassGentest;\r  data.loadIteration(1);\r  while (data.nextChild()){\r    Log.Message(data.ChildRecs.FieldTextChild);\r  }\r  \r  data.loadIteration(1, 1);\r  while (data.nextChild()){\r    Log.Message(data.ChildRecs.FieldTextChild);\r  }\r  \r  data.resetChildIterator();\r  while (data.nextChild()){\r    Log.Message(data.ChildRecs.FieldTextChild);\r  }\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"childClass","lineNo":526,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null}],"functionText":"function childClass(odtClass){\r  var childClassPropName = childClassName(odtClass);\r  return hasValue(childClassPropName) ? ODT.Classes(childClassPropName) : null;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"generateMethods","lineNo":532,"params":[{"name":"className","markedOptional":false,"defaultVal":null},{"name":"hasChildClass","markedOptional":false,"defaultVal":null},{"name":"isChildClass","markedOptional":false,"defaultVal":null}],"functionText":"function generateMethods(className, hasChildClass, isChildClass){ \r  var arAll = [\"resetIterator\", \"next\"];\r  \r  // add parent class methods\r  if(!isChildClass){\r    arAll = _.union(arAll,\r      [\r        \"getDriver\",\r        \"loadIteration\",\r        \"locate\",\r        \"locateNext\"\r      ]\r    ); \r  };\r  \r   // add child class methods\r  if(hasChildClass){\r    arAll = _.union(arAll, \r      [\r        \"nextChild\",\r        \"resetChildIterator\"\r      ]\r     )\r   };\r \r  var odtClass = ODT.Classes(className);\r  var currentMethods = classMethods(odtClass); \r  \r  // delete and replace all methods in case source has changed\r  _.each(\r    currentMethods,\r    function(methodName){\r      odtClass.DeleteMethod(methodName);\r    }\r  );\r  \r  _.each(\r    arAll,\r    function(methodName){\r      odtClass.AddMethod(methodName, DATA_CLASS_UTILS_SCRIPT_NAME + \".\" + methodName);\r    }\r  );\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"classExists","lineNo":576,"params":[{"name":"className","markedOptional":false,"defaultVal":null}],"functionText":"function classExists(className)\r{\r  var thisClass = ODT.Classes(className);\r  return hasValue(thisClass);\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"classExistsEndPoint","lineNo":582,"params":[],"functionText":"function classExistsEndPoint(){\r  var result = classExists(\"NonClass\");\r  result = classExists(\"DataClassGenTest\");\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"currentIndexPropName","lineNo":587,"params":[],"functionText":"function currentIndexPropName(){return \"CurrentIndex\"; }","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"generateProperties","lineNo":591,"params":[{"name":"className","markedOptional":false,"defaultVal":null},{"name":"childClassName","markedOptional":false,"defaultVal":null},{"name":"propsList","markedOptional":false,"defaultVal":null},{"name":"isChildClass","markedOptional":false,"defaultVal":null}],"functionText":"function generateProperties(className, childClassName, propsList, isChildClass)\r{\r  ensureNoInvalidPropNames(propsList, className);\r  var arNewProps = _.keys(propsList);\r  \r  // new props list\r  arNewProps.push(currentIndexPropName());\r  if (!isChildClass){\r   arNewProps.push(UPDATED_WHEN_PROP_NAME);\r  }\r  \r  if (hasValue(childClassName)) {\r    arNewProps.push(childClassName);  \r  }\r  \r  // existing props\r  var thisClass = ODT.Classes.Items(className);\r  var arClassProperties = classProperties(thisClass);\r  \r  // delete props no longer required\r  var arDeleteProps = _.difference(arClassProperties, arNewProps); \r  _.each(\r    arDeleteProps, \r    function(propName){thisClass.DeleteProperty(propName);}\r    );\r    \r  // add new props\r  var arAddProps = _.difference(arNewProps, arClassProperties);\r   _.each(\r    arAddProps, \r    function(propName){\r        if (propName === childClassName)\r        {\r          thisClass.AddPropOfClassType(childClassName, childClassName);\r        }\r        else\r        {\r          thisClass.AddProperty(propName);   \r        }\r      }\r    );    \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"classNameArray","lineNo":634,"params":[],"functionText":"function classNameArray() {\r  result =[];\r  for (var counter = 0;counter < ODT.Classes.Count; counter++){\r    var thisClass = ODT.Classes(counter); \r    result.push(thisClass.Name);  \r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"classMethods","lineNo":643,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null}],"functionText":"function classMethods(odtClass) {\r  var methodCount = odtClass.MethodCount,\r  result = [];\r  for (var counter = 0; counter < methodCount; counter++){\r    var methodName = odtClass.Methods(counter).Name;\r    result.push(methodName);\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"classProperties","lineNo":653,"params":[{"name":"odtClass","markedOptional":false,"defaultVal":null}],"functionText":"function classProperties(odtClass) {\r  var propCount = odtClass.PropertyCount,\r  result = [];\r  for (var counter = 0; counter < propCount; counter++){\r    var propName = odtClass.Properties(counter).Name;\r    result.push(propName);\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataClassUtilsPrivate"},{"name":"ensureNoInvalidPropNames","lineNo":663,"params":[{"name":"arProps","markedOptional":false,"defaultVal":null},{"name":"className","markedOptional":false,"defaultVal":null}],"functionText":"function ensureNoInvalidPropNames(arProps, className) {\r  function propNameInvalid(propName) {\r    var arInvalidNames = [\"name\", \"next\"];\r    return _.any(arInvalidNames, function(invalidProp){return sameText(invalidProp, propName)}); \r  }\r  \r  var arInValid = _.filter(arProps, propNameInvalid);\r  ensure(arInValid.length === 0, \"Trying to generate a class with one or more illegal field names - class name is: \" + className +\r      newLine() + \"Illegal field names are: \" + joinRemoveEmpty(arInValid, \", \") +  newLine() + \r      \"Spread sheet column name(s) will need to be changed.\"); \r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"},{"name":"ensureNoInvalidPropNamesEndPoint","lineNo":675,"params":[],"functionText":"function ensureNoInvalidPropNamesEndPoint() {\r ensureNoInvalidPropNames([\"OK\", \"AOK\",\"AAOk\"], \"Test\");\r ensureNoInvalidPropNames([\"OK\", \"AOK\",\"name\"], \"Test\");\r}","hasResult":false,"scriptName":"DataClassUtilsPrivate"}]},{"name":"DataEntryUtils","path":"C:\\DocTarget\\Utils\\DataEntryUtils.sj","functions":[{"name":"setByIdStr","lineNo":6,"params":[{"name":"idStr","markedOptional":false,"defaultVal":null},{"name":"value","markedOptional":false,"defaultVal":null}],"functionText":"function setByIdStr(idStr, value){\r  var uiObj = seekByIDDefPage(idStr);\r  set(uiObj, value);\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":["function setByIdStrEndPoint(){\r  // Employee details\r  setByIdStr('MasterPage__content__ddPayLevel', 'Base');\r\r}"]},{"name":"setByIdStrEndPoint","lineNo":11,"params":[],"functionText":"function setByIdStrEndPoint(){\r  // Employee details\r  setByIdStr('MasterPage__content__ddPayLevel', 'Base');\r\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":[]},{"name":"verify","lineNo":17,"params":[{"name":"uiObj","markedOptional":false,"defaultVal":null},{"name":"expected","markedOptional":false,"defaultVal":null},{"name":"errorStr","markedOptional":true,"defaultVal":"''"},{"name":"readFunction","markedOptional":true,"defaultVal":"read"}],"functionText":"function verify(uiObj, expected,  /* optional */ errorStr, /* optional */ readFunction){\r  readFunction = def(readFunction, read);\r  errorStr = def(errorStr, '');\r  if (hasValue(uiObj)){\r    var actual = readFunction(uiObj);\r    checkEqual(expected, actual, errorStr);\r  } else {\r    logError('Calling verify on a uiObject that does not exist.') \r  };\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":[]},{"name":"cellEquals","lineNo":28,"params":[{"name":"cell","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"colTitle","markedOptional":false,"defaultVal":null},{"name":"rowIndex","markedOptional":false,"defaultVal":null},{"name":"colIndex","markedOptional":false,"defaultVal":null},{"name":"fullRow","markedOptional":false,"defaultVal":null},{"name":"readFunction","markedOptional":true,"defaultVal":"read"}],"functionText":"function cellEquals(cell, data, colTitle, rowIndex, colIndex, fullRow, /* optional */ readFunction){\r  readFunction = def(readFunction, read);\r  var actual = readFunction(cell);\r  return areEqual(data, actual);\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":[]},{"name":"read","lineNo":34,"params":[{"name":"uiObj","markedOptional":false,"defaultVal":null}],"functionText":"function read(uiObj){\r  var objectType = uiObj.ObjectType;\r    switch (objectType) {\r      case 'Cell': return readCell(uiObj);\r        break;\r  \r      default:\r        logError(objectType + ' - not handled by read function');\r    }\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":[]},{"name":"set","lineNo":45,"params":[{"name":"uiObj","markedOptional":false,"defaultVal":null},{"name":"value","markedOptional":false,"defaultVal":null},{"name":"errorMessage","markedOptional":false,"defaultVal":null}],"functionText":"function set(uiObj, value, errorMessage){\r  var objectType = uiObj.ObjectType;\r  switch (objectType) {\r    case 'Cell': setCell(uiObj, value);\r      break;\r      \r    case 'Select': uiObj.ClickItem(value);\r      break;\r  \r  default:\r    logError(objectType + ' - not handled by set function - ' + errorMessage);\r  }\r}","hasResult":false,"scriptName":"DataEntryUtils","examples":[]},{"name":"Test1","lineNo":59,"params":[],"scriptName":"DataEntryUtils","examples":[]}]},{"name":"DataEntryUtilsEndPoints","path":"C:\\DocTarget\\Utils\\DataEntryUtilsEndPoints.sj","functions":[{"name":"EmptyFunctionToKeepparserHappy","lineNo":0,"params":[],"functionText":"function EmptyFunctionToKeepparserHappy(){\r}","hasResult":false,"scriptName":"DataEntryUtilsEndPoints"}]},{"name":"DataEntryUtilsPrivate","path":"C:\\DocTarget\\Utils\\DataEntryUtilsPrivate.sj","functions":[{"name":"setCell","lineNo":4,"params":[{"name":"cell","markedOptional":false,"defaultVal":null},{"name":"value","markedOptional":false,"defaultVal":null}],"functionText":"function setCell(cell, value){\r  var result =  setRosterLiveCombo(cell, value) ||\r                setRosterLiveTextEdit(cell, value); \r  \r  if (!result) {\r    logError('setCell - unhandled data entry cell when setting cell: ' + cell.Name + ' to value ' +  value);\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"readRosterLiveTextEdit","lineNo":14,"params":[{"name":"cell","markedOptional":false,"defaultVal":null}],"functionText":"function readRosterLiveTextEdit(cell){\r  var edit = seek(cell, {ObjectType: 'TextBox', Visible: 'True'});\r  var doesExist = edit.Exists;\r  var result = '';\r  if (doesExist){\r    result = edit.Text;\r  }\r  return doesExist ? {value:result} : false;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"readCell","lineNo":24,"params":[{"name":"cell","markedOptional":false,"defaultVal":null}],"functionText":"function readCell(cell){\r  var wrappedResult = // combo wraps text edit\r                      readRosterLiveTextEdit(cell) ||\r                      {value: cell.contentText}; \r  \r  result = wrappedResult.value;\r  return result;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"setCellEndPoint","lineNo":33,"params":[],"functionText":"function setCellEndPoint() {\r  // add employee timesheet\r  var parentCell = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'},{name: 'Cell(1, 3)'})\r  setCell(parentCell, \"900\");\r}","hasResult":false,"scriptName":"DataEntryUtilsPrivate"},{"name":"setRosterLiveTextEdit","lineNo":39,"params":[{"name":"cell","markedOptional":false,"defaultVal":null},{"name":"value","markedOptional":false,"defaultVal":null}],"functionText":"function setRosterLiveTextEdit(cell, value){\r  var edit = seek(cell, {ObjectType: 'TextBox', Visible: 'True'});\r  var result = edit.Exists;\r  if (result){\r    edit.SetText(value);\r    log('TextEdit set to: ' + value);\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"getDropDownLink","lineNo":50,"params":[{"name":"parentCell","markedOptional":false,"defaultVal":null}],"functionText":"function getDropDownLink(parentCell){\r  var dropDown = seek(parentCell, {ObjectType: 'Link', IdStr: '*_Arrow'});\r  return dropDown;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"setRosterLiveCombo","lineNo":55,"params":[{"name":"parentCell","markedOptional":false,"defaultVal":null},{"name":"textToSelect","markedOptional":false,"defaultVal":null}],"functionText":"function setRosterLiveCombo(parentCell, textToSelect){\r  var dropDown = getDropDownLink(parentCell);\r  var result = dropDown.Exists;\r  if (result){\r    dropDown.Click();  \r    var panel = seekInPage({ObjectType: 'Form'}, {ChildCount: '1', ObjectType: 'Panel', IdStr: '*_DropDown', contentText: '*' + textToSelect + '*'});\r    var textNode = seek(panel, {ObjectType: 'TextNode', contentText: textToSelect});   \r    if (textNode.Exists){\r      textNode.Click();\r       log('Combo set to: ' + textToSelect);\r    } \r    else {\r      logError('Item not found in list: ' + textToSelect);\r    }\r  }\r  return result;\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"setRosterLiveComboEndPoint","lineNo":73,"params":[],"functionText":"function setRosterLiveComboEndPoint() {\r  // add employee timeshaeet\r  var parentCell = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'},{name: 'Cell(1, 2)'})\r  setRosterLiveCombo(parentCell, \"Tue, Apr 23\");\r  \r  // expect error\r  setRosterLiveCombo(parentCell, \"Tue, Apr 30\");\r}","hasResult":false,"scriptName":"DataEntryUtilsPrivate"},{"name":"isRosterLiveCombo","lineNo":83,"params":[{"name":"parentCell","markedOptional":false,"defaultVal":null}],"functionText":"function isRosterLiveCombo(parentCell) {\r  var dropDown = getDropDownLink(parentCell);\r  return dropDown.Exists\r}","hasResult":true,"scriptName":"DataEntryUtilsPrivate"},{"name":"isRosterLiveComboEndPoint","lineNo":88,"params":[],"functionText":"function isRosterLiveComboEndPoint() {\r  // employyee timesheet add\r  var parentCell = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'},{name: 'Cell(1, 2)'})\r  var result = isRosterLiveCombo(parentCell);\r  check(result);\r  \r  parentCell = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'},{name: 'Cell(1, 4)'})\r  result = isRosterLiveCombo(parentCell);\r  checkFalse(result);\r}","hasResult":false,"scriptName":"DataEntryUtilsPrivate"}]},{"name":"ExcelDataConnection","path":"C:\\DocTarget\\Utils\\ExcelDataConnection.sj","functions":[{"name":"DataConnection","lineNo":5,"params":[{"name":"excelFileNameNoPath","markedOptional":false,"defaultVal":null},{"name":"dataSheetName","markedOptional":true,"defaultVal":null},{"name":"wantFileCopy","markedOptional":false,"defaultVal":null}],"functionText":"function DataConnection(excelFileNameNoPath, /* optional */ dataSheetName, wantFileCopy){\r  \r  // constructor invocation required\r  if(false === (this instanceof DataConnection)) {\r    return new DataConnection(excelFileNameNoPath, dataSheet);\r  }\r  \r  var excelFileNameNoPathWithExtension = forceExcelExtension(excelFileNameNoPath),\r  excelFilePath = wantFileCopy ? copyTestFile(excelFileNameNoPathWithExtension): testDataFile(excelFileNameNoPathWithExtension),\r  dataSheet = dataSheetName ? dataSheetName : \"Sheet1\",\r  constr = 'Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\"' + excelFilePath + '\";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\"';\r   \r  // create the connection\r  var connection = new ActiveXObject('ADODB.Connection');\r  connection.ConnectionString = constr;\r  connection.Open();\r  \r  // create recordset\r  var query = 'Select * from [' + dataSheet + '$]';    \r  var recordSet = new ActiveXObject('ADODB.RecordSet');\r  recordSet.Open(query, connection);\r  \r  // assign properties\r  this.connection = connection;\r  this.recordSet = recordSet;\r  \r  this.colCount = function(){\r    return this.recordSet.Fields.Count;\r  }\r  \r  this.close = function(){\r    this.recordSet.close();\r    this.connection.close();   \r  };\r  \r  this.eof = function(){\r    return this.recordSet.EOF;\r  };\r  \r  this.next = function(){\r    this.recordSet.MoveNext();\r    return !this.recordSet.EOF && !this.recordSet.BOF;\r  };\r  \r  this.first = function(){\r    this.recordSet.MoveFirst();\r    return !this.recordSet.EOF && !this.recordSet.BOF;\r  };\r  \r  this.value = function(fieldIndexOrName){\r    return this.recordSet.Fields(fieldIndexOrName).Value;\r  };\r  \r  this.name = function(fieldIndexOrName){\r    return this.recordSet.Fields(fieldIndexOrName).Name;\r  };\r  \r  // returns data type enum http://msdn.microsoft.com/en-us/library/windows/desktop/ms675318%28v=vs.85%29.aspx\r  this.dataType = function(fieldIndexOrName){\r    return this.recordSet.Fields(fieldIndexOrName).Type;\r  };\r  \r  this.matchesSearchCriteria = function matchesSearchCriteria(lookUpNameVals){\r    var that = this;\r    var result = _.chain(lookUpNameVals)\r      .pairs()\r      .all(function(pair){return driverValueEquals.call(that, pair)})\r      .value();\r    return result;\r  };\r  \r  function driverValueEquals(fieldNameValuePair){\r    var result;\r    var objVal = fieldNameValuePair[1];\r    var driverVal = this.value(fieldNameValuePair[0]);\r    return areEqual(objVal, driverVal);\r  }\r  \r  function locatePrivate(reset, lookUpNameVals, index){\r    index = def(index, 0);\r    if(reset){\r      this.first(); \r    }\r    var result = false;\r    var thisIndex = -1;\r    while (!this.eof()){\r      if (this.matchesSearchCriteria(lookUpNameVals)){\r        thisIndex++; \r        if (thisIndex === index) {\r          result = true;\r          break;\r        } \r      }\r      this.next();\r    } \r    return result;\r  }\r  \r  this.locate = function(lookUpNameVals, /* optional */ index){\r    return locatePrivate.call(this, true, lookUpNameVals, index);\r  } \r  \r  this.locateNext = function(lookUpNameVals){\r    return locatePrivate.call(this, false, lookUpNameVals, 1);\r  }  \r}","hasResult":true,"scriptName":"ExcelDataConnection","examples":[]},{"name":"dataSetConnectionUnitTest","lineNo":112,"params":[],"functionText":"function dataSetConnectionUnitTest(){\r  var dc = DataConnection(\"DataClassGentest\");\r  var expected = aqDateTime.SetDateElements(2000,1,4);\r  var result = dc.locate({fieldDate: expected});\r  var tc = dc.value(\"testcase\");\r  var dt = dc.value(\"fieldDate\");\r  var day = aqDateTime.GetDay(dt);\r  check(result);\r  checkEqual(4, day);\r  \r  // change index\r  expected = aqDateTime.SetDateElements(2000,1,3);\r  var result = dc.locate({fieldDate: expected}, 0);\r  tc = dc.value(\"testcase\");\r  checkEqual(2, tc);\r  \r  result = dc.locate({fieldDate: expected}, 1);\r  tc = dc.value(\"testcase\");\r  checkEqual(4, tc);\r  \r  result = dc.locate({fieldDate: expected}, 2);\r  tc = dc.value(\"testcase\");\r  checkEqual(5, tc);\r  \r  // locate next\r  var result = dc.locate({fieldDate: expected});\r  tc = dc.value(\"testcase\");\r  checkEqual(2, tc);\r  \r  dc.locateNext({fieldDate: expected});\r  tc = dc.value(\"testcase\");\r  checkEqual(4, tc);\r  \r  dc.locateNext({fieldDate: expected});\r  tc = dc.value(\"testcase\");\r  checkEqual(5, tc);\r  \r  dc.close();\r}","hasResult":false,"scriptName":"ExcelDataConnection","examples":[]}]},{"name":"FileUtils","path":"C:\\DocTarget\\Utils\\FileUtils.sj","functions":[{"name":"forceExcelExtension","lineNo":4,"params":[{"name":"excelFileNameNoPath","markedOptional":false,"defaultVal":null}],"functionText":"function forceExcelExtension(excelFileNameNoPath){\r  var extension = aqFileSystem.GetFileExtension(excelFileNameNoPath); \r  return extension ? excelFileNameNoPath : excelFileNameNoPath + \".xlsx\";\r}","hasResult":true,"scriptName":"FileUtils","examples":[]},{"name":"copyTestFile","lineNo":9,"params":[{"name":"sourceFileNameNoPath","markedOptional":false,"defaultVal":null},{"name":"destFileNameNoPath","markedOptional":false,"defaultVal":null}],"functionText":"function copyTestFile(sourceFileNameNoPath, destFileNameNoPath)\r{\r  var src = testDataFile(sourceFileNameNoPath),\r  destFileName = destFileNameNoPath ? destFileNameNoPath : sourceFileNameNoPath,\r  dst = activeDataFile(destFileName),\r  copyResult = aqFileSystem.CopyFile(src, dst, false);\r  check(copyResult, \"Copy test file failed \" + src + \" => \" + dst + \" - Check source file exists and dest file is not read only\", true);  \r  return dst\r}","hasResult":true,"scriptName":"FileUtils","examples":["function copyTestFileUnitTest() \r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\ActiveData\\\\\";\r  var testFile = \"EmptyTestFile.txt\"\r  var testFileDesPath = suitePath + testFile \r  aqFileSystem.DeleteFile(testFileDesPath)\r  var result = copyTestFile(testFile)\r  check(aqFile.exists(testFileDesPath))\r  checkEqual(testFileDesPath, result)\r}"]},{"name":"copyTestFileUnitTest","lineNo":20,"params":[],"functionText":"function copyTestFileUnitTest() \r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\ActiveData\\\\\";\r  var testFile = \"EmptyTestFile.txt\"\r  var testFileDesPath = suitePath + testFile \r  aqFileSystem.DeleteFile(testFileDesPath)\r  var result = copyTestFile(testFile)\r  check(aqFile.exists(testFileDesPath))\r  checkEqual(testFileDesPath, result)\r}","hasResult":false,"scriptName":"FileUtils","examples":[]},{"name":"testDataFile","lineNo":31,"params":[{"name":"fileNameNoPath","markedOptional":false,"defaultVal":null},{"name":"ensureExists","markedOptional":false,"defaultVal":"true) || aqFileSystem.exists(result)"}],"functionText":"function testDataFile(fileNameNoPath, ensureExists)\r{\r  var result = projectChildPath(\"TestData\", fileNameNoPath);\r  ensure(!def(ensureExists, true) || aqFileSystem.exists(result), \"testDataFile - target file does not exist: \" + result);\r  return result;\r}","hasResult":true,"scriptName":"FileUtils","examples":["function testDataFileEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath + \"TestData\\\\\", testDataFile());\r  var expected = \"C:\\\\Automation\\\\ManilaPrep\\\\TestData\\\\test.txt\";\r  checkEquals(expected, testDataFile(\"test.txt\"));\r}"]},{"name":"testDataFileLastModified","lineNo":38,"params":[{"name":"fileNameNoPath","markedOptional":false,"defaultVal":null}],"functionText":"function testDataFileLastModified(fileNameNoPath)\r{\r  var testFile = testDataFile(fileNameNoPath, false);\r  return fileLastModified(testFile);\r}","hasResult":true,"scriptName":"FileUtils","examples":[]},{"name":"fileLastModified","lineNo":44,"params":[{"name":"path","markedOptional":false,"defaultVal":null}],"functionText":"function fileLastModified(path) {\r  ensure(aqFileSystem.exists(path), \"target file does not exist: \" + path);\r  var fileInfo = aqFileSystem.GetFileInfo(path);\r  return fileInfo.DateLastModified\r}","hasResult":true,"scriptName":"FileUtils","examples":[]}]},{"name":"FileUtilsEndPoints","path":"C:\\DocTarget\\Utils\\FileUtilsEndPoints.sj","functions":[{"name":"testDataFileEndPoint","lineNo":4,"params":[],"functionText":"function testDataFileEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath + \"TestData\\\\\", testDataFile());\r  var expected = \"C:\\\\Automation\\\\ManilaPrep\\\\TestData\\\\test.txt\";\r  checkEquals(expected, testDataFile(\"test.txt\"));\r}","hasResult":false,"scriptName":"FileUtilsEndPoints"},{"name":"activeDataFileEndPoint","lineNo":14,"params":[],"functionText":"function activeDataFileEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath + \"ActiveData\\\\\", activeDataFile());\r}","hasResult":false,"scriptName":"FileUtilsEndPoints"},{"name":"newExcelDriverUnitTest","lineNo":20,"params":[],"functionText":"function newExcelDriverUnitTest()\r{\r  var driver = newExcelDriver(\"SimpletestData\");\r  checkEqual(\"Janice\", driver.Value(0));\r  DDT.CloseDriver(driver.Name)\r}","hasResult":false,"scriptName":"FileUtilsEndPoints"}]},{"name":"HtmlGrid","path":"C:\\DocTarget\\Utils\\HtmlGrid.sj","functions":[{"name":"verifyGrid","lineNo":9,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"twoDArrayCoTitlesTop","markedOptional":false,"defaultVal":null},{"name":"verificationFunction","markedOptional":true,"defaultVal":null}],"functionText":"function verifyGrid(table, twoDArrayCoTitlesTop, /* optional */ verificationFunction){\r  executeFunctionOnArrayRowsGrid(table, verifyGridRow, twoDArrayCoTitlesTop, verificationFunction)\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function verifyGridEndPoint(){\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  var verificationInfo = [\r                          ['~messageID' ,'employee'       ],\r                          ['2516731'    ,'Cooper, Sheldon']\r                          ];\r  verifyGrid(table, verificationInfo);\r  \r   verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheldon', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2013 11:10:06']\r                      ];\r  verifyGrid(table, verificationInfo);\r  \r  verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheld', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2017 11:10:06']\r                      ];\r  expectDefect(1); \r  // name then date should fail                 \r  verifyGrid(table, verificationInfo);\r  endDefect(); \r  \r  expectDefect(1); \r  verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['999'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheldon', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2013 11:10:06']\r                      ];\r  verifyGrid(table, verificationInfo);\r  endDefect();  \r}"]},{"name":"setGrid","lineNo":14,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"twoDArrayCoTitlesTop","markedOptional":false,"defaultVal":null},{"name":"verificationFunction","markedOptional":true,"defaultVal":null}],"functionText":"function setGrid(table, twoDArrayCoTitlesTop, /* optional */ verificationFunction){\r  executeFunctionOnArrayRowsGrid(table, setGridRow, twoDArrayCoTitlesTop, verificationFunction)\r}","hasResult":false,"scriptName":"HtmlGrid","examples":[]},{"name":"verifyGridRow","lineNo":19,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"criteria","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"verificationFunction","markedOptional":true,"defaultVal":null}],"functionText":"function verifyGridRow(table, criteria, data, /* optional */ verificationFunction){\r  doVerifyOrSetGridRow(verify, seekRowExecute, table, criteria, data,  verificationFunction)\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function verifyGridRowEndPoint() {\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Sheldon'});\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  \r  // date changed but override function forces pass\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '01 Apr 2013 14:40:47'}, function(){return true});\r  \r  expectDefect(1);\r  verifyGridRow(table, {messageID: '9999'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  endDefect();\r  \r  expectDefect(1);\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Shelly'});\r  endDefect();\r  \r  expectDefect(1);\r  verifyGridRow(table, {employee: 'Cooper, Shelly', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  endDefect();\r  \r  expectDefect(1);\r  // date changed\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '01 Apr 2013 14:40:47'});\r  endDefect();\r}"]},{"name":"setGridRow","lineNo":24,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"criteria","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"verificationFunction","markedOptional":true,"defaultVal":null}],"functionText":"function setGridRow(table, criteria, data, /* optional */ verificationFunction){\r  doVerifyOrSetGridRow(set, seekRowExecute, table, criteria, data,  verificationFunction)\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function setGridRowEndPoint() {\r  // after adding empty employee\r  var table = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'});\r  var inputInfo = [\r                          ['~date'        ,'start'  , 'end',  'role'      ],\r                          ['Mon, Apr 15'  ,'0900'   , '1200', 'Bz Biologist']\r                          ];\r  setGrid(table, inputInfo);\r\r}"]},{"name":"seekRowExecute","lineNo":34,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"criteria","markedOptional":true,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"cellFunction","markedOptional":false,"defaultVal":null}],"functionText":"function seekRowExecute(table, /* optional if objects */ criteria, data, cellFunction){\r \r  if (_.isArray(criteria)){\r    // if we are using arrays criteria = columnheaaders ~marks a key\r    // data = actual data but only process data that is not a key\r    ensure(arguments.length > 3, 'Invalid arguments to ' + seekRowExecute);\r    var critData = getCriteriaDataObjectsFromArray(criteria, data);\r    criteria = critData.criteria;\r    data = critData.data;\r  } else {\r    ensure(arguments.length > 2, 'Invalid arguments to ' + seekRowExecute);\r    var arg2 = arguments[2];\r    if (_.isFunction(arg2)) {\r      cellFunction = data;\r      data = criteria;\r    } else if(!hasValue(data)){\r      // allow for null passed as data\r      data = criteria;  \r    }\r  }\r  \r  var targetRow = seekRow(table, criteria);\r  if (hasValue(targetRow)){\r    eachCell(table, cellFunction, data, 0, targetRow);\r  } \r  else {\r    logError('No matching rows found:' + JSON.stringify(criteria));\r  }\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function seekRowExecuteEndPoint() {\r\r  function cellFunc(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log(data.prefix + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  \r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  seekRowExecute(table, {messageID: '2516731'}, {prefix: 'The id is: '}, cellFunc);\r  \r  expectDefect(1); // should log error cause row does not exist\r  seekRowExecute(table, {messageID: '99999'}, {prefix: 'The id is: '}, cellFunc);\r  endDefect();\r  \r  // no critera entered - will set critera to data\r  function cellFunc2(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log(data.messageID + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  seekRowExecute(table, {messageID: '2516731', employee:'Cooper, Sheldon', phoneNumber: '+61423222695'}, cellFunc2);\r\r  expectDefect(1); // should log error cause row does not exist\r  seekRowExecute(table, {messageID: '2516731', employee:'Cooper, Shelly', phoneNumber: '+61423222695'}, cellFunc2);\r  endDefect();\r}"]},{"name":"seekRow","lineNo":68,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"criteria","markedOptional":false,"defaultVal":null}],"functionText":"function seekRow(table, criteria){\r  var lwrCaseCriteria = lwrCasedKeysFromNameVal(criteria);\r  var criteraKeys = _.keys(lwrCaseCriteria);\r  \r  var currentRow = -1,\r  result = null,\r  criteriaCount = _.keys(lwrCaseCriteria).length - _.functions(lwrCaseCriteria).length,\r  matchCount = 0,\r  rowFail = false;\r  \r  function matchCell(cell, data, colTitle, rowIndex, colIndex, arFullRow){\r    if (hasValue(result)){\r      return;\r    }\r    \r    if(currentRow !== rowIndex){\r      currentRow = rowIndex;\r      matchCount = 0;\r      rowFail = false;  \r    }\r    \r    if (!rowFail){\r      lwrTitle = lwrCaseTrimNoSpaces(colTitle);\r    \r      if (_.contains(criteraKeys, lwrTitle)){\r        var cellFunction = lwrCaseCriteria[lwrTitle + 'function'];\r        cellFunction = def(cellFunction, cellEquals);\r        var expected = lwrCaseCriteria[lwrTitle];\r        var valsMatch = cellFunction(cell, expected, colTitle, rowIndex, colIndex, arFullRow);\r        if (valsMatch){\r          matchCount++;\r          if (matchCount === criteriaCount){\r            result = arFullRow;\r          }\r        }\r        else {\r          rowFail = true;\r        }\r      }\r    }\r  }\r                \r  eachCell(table, matchCell);\r  return result;                    \r}","hasResult":true,"scriptName":"HtmlGrid","examples":["function seekRowEndPoint(){\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  var row = seekRow(table, {messageId: '2516730'});\r  checkEqual('11 Apr 2013 14:18:26', row[3].ContentText);\r  \r  \r  row = seekRow(table, {messageId: '9999'});\r  checkEqual(row, null);\r\r  row = seekRow(table, \r                  {Message: 'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.',\r                  phoneNumber: '+61423222695'});\r  checkEqual('2516733', row[2].ContentText);\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  phoneNumber: '+61423222695'});\r  checkEqual('2516732', row[2].ContentText);\r  \r  function areEqualFunc(cell, data, colTitle, rowIndex, colIndex, fullRow) {\r    var result = cell.ContentText === '11 Apr 2013 15:54:49';\r    if (result){\r      log('Cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r    }\r    return result;\r  }\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  dateFunction: areEqualFunc});\r  checkEqual('2516732', row[2].ContentText);\r  \r  function neverEqual(cell, data, colTitle, rowIndex, colIndex, fullRow) {\r    return false;\r  }\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  dateFunction: neverEqual});\r  checkEqual(null, row);\r  \r}"]},{"name":"eachCell","lineNo":120,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"rowCellFunction","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"skipCount","markedOptional":true,"defaultVal":null},{"name":"singleRowTarget","markedOptional":true,"defaultVal":null}],"functionText":"function eachCell(table, rowCellFunction, data, /* optional */ skipCount, /* optional */ singleRowTarget){\r  eachCellPrivate(table, rowCellFunction, data, skipCount, false, singleRowTarget);\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function eachCellEndPoint() {\r  function cellTest(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log('Cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  eachCell(table, cellTest);\r}"]},{"name":"eachCellSimple","lineNo":126,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"rowCellFunction","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"skipCount","markedOptional":true,"defaultVal":null},{"name":"singleRowTarget","markedOptional":true,"defaultVal":null}],"functionText":"function eachCellSimple(table, rowCellFunction, data, /* optional */ skipCount, /* optional */ singleRowTarget){\r  eachCellPrivate(table, rowCellFunction, data, skipCount, true, singleRowTarget);\r}","hasResult":false,"scriptName":"HtmlGrid","examples":["function eachCellSimpleEndPoint() {\r  function cellTest(cell, data, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log('Cell: ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0));\r  }\r\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  eachCellSimple(table, cellTest);\r}"]},{"name":"lwrCaseTrimNoSpaces","lineNo":130,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function lwrCaseTrimNoSpaces(str){\r  return HtmlGridPrivate.lwrCaseTrimNoSpaces(str);\r}","hasResult":true,"scriptName":"HtmlGrid","examples":["function lwrCaseTrimNoSpacesUnitTest() {\r  var result = lwrCaseTrimNoSpaces(null);\r  checkEqual('', result);\r  \r  result = lwrCaseTrimNoSpaces(' HELLo  cooL worlD  ');\r  checkEqual('hellocoolworld', result);\r\r}"]}]},{"name":"HtmlGridEndPoints","path":"C:\\DocTarget\\Utils\\HtmlGridEndPoints.sj","functions":[{"name":"setGridRowEndPoint","lineNo":6,"params":[],"functionText":"function setGridRowEndPoint() {\r  // after adding empty employee\r  var table = seekInPage({IdStr: 'MasterPagecontentradAddGrid_ctl00'});\r  var inputInfo = [\r                          ['~date'        ,'start'  , 'end',  'role'      ],\r                          ['Mon, Apr 15'  ,'0900'   , '1200', 'Bz Biologist']\r                          ];\r  setGrid(table, inputInfo);\r\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"verifyGridEndPoint","lineNo":17,"params":[],"functionText":"function verifyGridEndPoint(){\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  var verificationInfo = [\r                          ['~messageID' ,'employee'       ],\r                          ['2516731'    ,'Cooper, Sheldon']\r                          ];\r  verifyGrid(table, verificationInfo);\r  \r   verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheldon', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2013 11:10:06']\r                      ];\r  verifyGrid(table, verificationInfo);\r  \r  verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheld', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2017 11:10:06']\r                      ];\r  expectDefect(1); \r  // name then date should fail                 \r  verifyGrid(table, verificationInfo);\r  endDefect(); \r  \r  expectDefect(1); \r  verificationInfo = [\r                          ['~messageID' ,'employee'       , 'date'],\r                          ['999'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'],\r                          ['2516732'    ,'Cooper, Sheldon', '11 Apr 2013 15:54:49'],\r                          ['2516729'    ,'Cooper, Sheldon', '11 Apr 2013 11:10:06']\r                      ];\r  verifyGrid(table, verificationInfo);\r  endDefect();  \r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"verifyGridRowEndPoint","lineNo":55,"params":[],"functionText":"function verifyGridRowEndPoint() {\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Sheldon'});\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  \r  // date changed but override function forces pass\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '01 Apr 2013 14:40:47'}, function(){return true});\r  \r  expectDefect(1);\r  verifyGridRow(table, {messageID: '9999'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  endDefect();\r  \r  expectDefect(1);\r  verifyGridRow(table, {messageID: '2516731'}, {employee: 'Cooper, Shelly'});\r  endDefect();\r  \r  expectDefect(1);\r  verifyGridRow(table, {employee: 'Cooper, Shelly', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r  endDefect();\r  \r  expectDefect(1);\r  // date changed\r  verifyGridRow(table, {employee: 'Cooper, Sheldon', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '01 Apr 2013 14:40:47'});\r  endDefect();\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"verifyGridRowUsingArrayEndPoint","lineNo":83,"params":[],"functionText":"function verifyGridRowUsingArrayEndPoint() {\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  var colTitles, data;\r  \r  colTitles = ['~messageID' ,'employee'];\r  data =      ['2516731'    ,'Cooper, Sheldon'];\r  verifyGridRow(table, colTitles, data);\r  \r  colTitles = ['~messageID' ,'employee'       , 'date'];\r  data =      ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data);\r  \r  colTitles = ['~messageID' ,'~employee'       , 'date'];\r  data =      ['2516731'    ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data);\r  \r  colTitles = ['messageID' ,'employee'       , 'date'];\r  data =      ['2516731'   ,'Cooper, Sheldon', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data);\r  \r  // data not the same but override validation function\r  colTitles = ['~messageID' ,'employee'       , 'date'];\r  data =      ['2516731'   ,'Cooper, Shello', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data, function(){return true});\r\r  expectDefect(1);\r  colTitles = ['~messageID' ,'employee'       , 'date'];\r  data =      ['99999'   ,'Cooper, Shello', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data, function(){return true});\r  endDefect();\r  \r\r  expectDefect(1);\r  colTitles = ['~messageID' ,'employee'       , 'date'];\r  data =      ['2516731'   ,'Cooper, Shello', '11 Apr 2013 14:40:47'];\r  verifyGridRow(table, colTitles, data);\r  endDefect();\r\r//  expectDefect(1);\r//  scenario not reproducable as array\r//  verifyGridRow(table, {employee: 'Cooper, Shelly', messageID: '2516731'}, {employee: 'Cooper, Sheldon', date: '11 Apr 2013 14:40:47'});\r//  endDefect();\r  \r  expectDefect(1);\r  // date changed\r  colTitles = ['messageID' ,'employee'       , 'date'];\r  data =      ['2516731'   ,'Cooper, Sheldon', '11 Apr 2017 14:40:47'];\r  verifyGridRow(table, colTitles, data);\r  endDefect();\r  \r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"seekRowExecuteEndPoint","lineNo":138,"params":[],"functionText":"function seekRowExecuteEndPoint() {\r\r  function cellFunc(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log(data.prefix + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  \r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  seekRowExecute(table, {messageID: '2516731'}, {prefix: 'The id is: '}, cellFunc);\r  \r  expectDefect(1); // should log error cause row does not exist\r  seekRowExecute(table, {messageID: '99999'}, {prefix: 'The id is: '}, cellFunc);\r  endDefect();\r  \r  // no critera entered - will set critera to data\r  function cellFunc2(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log(data.messageID + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  seekRowExecute(table, {messageID: '2516731', employee:'Cooper, Sheldon', phoneNumber: '+61423222695'}, cellFunc2);\r\r  expectDefect(1); // should log error cause row does not exist\r  seekRowExecute(table, {messageID: '2516731', employee:'Cooper, Shelly', phoneNumber: '+61423222695'}, cellFunc2);\r  endDefect();\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"seekRowExecute2EndPoint","lineNo":169,"params":[],"functionText":"function seekRowExecute2EndPoint() {\r  var table, colTitles, data; \r \r  function cellFunc(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================');\r    }\r    log(data.messageid + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  \r  table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  colTitles = ['Employee'         ,'~Message ID'  ,'~Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,'2516732'      ,'11 Apr 2013 15:54:49' ,'+61423222695' ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  seekRowExecute(table, colTitles, data, cellFunc);\r  \r  expectDefect(1); // should log error cause row does not exist\r  colTitles = ['Employee'         ,'~Message ID'  ,'~Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,'9999'      ,'11 Apr 2013 15:54:49' ,'+61423222695' ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  seekRowExecute(table, colTitles, data, cellFunc);\r  endDefect();\r  \r  table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  colTitles = ['Employee'         ,'Message ID'  ,'Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,'2516732'     ,'11 Apr 2013 15:54:49' ,'+61423222695' ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  seekRowExecute(table, colTitles, data, cellFunc);\r  \r  expectDefect(1); // should log error cause row does not exist - the plus has been removed from the phone number\r  table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  colTitles = ['Employee'         ,'Message ID'  ,'Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,'2516732'     ,'11 Apr 2013 15:54:49' ,'61423222695' ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  seekRowExecute(table, colTitles, data, cellFunc);\r  endDefect();\r  \r  // no critera entered - will set critera to data\r  function cellFunc2(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================');\r    }\r    log(data.messageID + ' - cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r  \r  expectDefect(1); //Sould throw error passing function in array\r  function cellFuncTrue(cell, data, colTitle, rowIndex, colIndex){\r    return true;\r  }\r  colTitles = ['Employee'         ,'~Message ID'  ,'~Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,cellFuncTrue    ,'11 Apr 2013 15:54:49'    ,'+61423222695'    ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  seekRowExecute(table, colTitles, data, cellFunc2);\r  endDefect();\r \r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"seekRowEndPoint","lineNo":221,"params":[],"functionText":"function seekRowEndPoint(){\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  var row = seekRow(table, {messageId: '2516730'});\r  checkEqual('11 Apr 2013 14:18:26', row[3].ContentText);\r  \r  \r  row = seekRow(table, {messageId: '9999'});\r  checkEqual(row, null);\r\r  row = seekRow(table, \r                  {Message: 'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.',\r                  phoneNumber: '+61423222695'});\r  checkEqual('2516733', row[2].ContentText);\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  phoneNumber: '+61423222695'});\r  checkEqual('2516732', row[2].ContentText);\r  \r  function areEqualFunc(cell, data, colTitle, rowIndex, colIndex, fullRow) {\r    var result = cell.ContentText === '11 Apr 2013 15:54:49';\r    if (result){\r      log('Cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r    }\r    return result;\r  }\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  dateFunction: areEqualFunc});\r  checkEqual('2516732', row[2].ContentText);\r  \r  function neverEqual(cell, data, colTitle, rowIndex, colIndex, fullRow) {\r    return false;\r  }\r  \r  row = seekRow(table, \r                  {date: '11 Apr 2013 15:54:49',\r                  dateFunction: neverEqual});\r  checkEqual(null, row);\r  \r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"eachCellEndPoint","lineNo":264,"params":[],"functionText":"function eachCellEndPoint() {\r  function cellTest(cell, data, colTitle, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log('Cell: ' + ' col Title: ' + colTitle + ' - ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0) + ' Content text: ' + cell.ContentText);\r  }\r\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  eachCell(table, cellTest);\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"eachCellSimpleEndPoint","lineNo":276,"params":[],"functionText":"function eachCellSimpleEndPoint() {\r  function cellTest(cell, data, rowIndex, colIndex){\r    if (colIndex === 0){\r      log('=================')\r    }\r    log('Cell: ' + rowIndex + ', ' +  colIndex + ' Visible: ' + (cell.Height > 0));\r  }\r\r  var table = seekInPage({IdStr: 'MasterPagecontentgridSMSHistory_ctl00'});\r  eachCellSimple(table, cellTest);\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"},{"name":"cellTest","lineNo":292,"params":[{"name":"cell","markedOptional":false,"defaultVal":null},{"name":"colTitle","markedOptional":false,"defaultVal":null},{"name":"rowIndex","markedOptional":false,"defaultVal":null},{"name":"colIndex","markedOptional":false,"defaultVal":null}],"functionText":"function cellTest(cell, colTitle, rowIndex, colIndex){\r  if(sameText(colTitle, 'date')){\r    log(colTitle + ' : ' + cell.InnerText);\r  } \r  else {\r    log(colTitle + ' : ' + colIndex);\r  }\r  \r  var node = seek(cell, {ObjectTupe: 'TextNode'});\r}","hasResult":false,"scriptName":"HtmlGridEndPoints"}]},{"name":"HtmlGridPrivate","path":"C:\\DocTarget\\Utils\\HtmlGridPrivate.sj","functions":[{"name":"executeFunctionOnArrayRowsGrid","lineNo":8,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"verifyOrSetGridRow","markedOptional":false,"defaultVal":null},{"name":"twoDArrayCoTitlesTop","markedOptional":false,"defaultVal":null},{"name":"verificationFunction","markedOptional":true,"defaultVal":null}],"functionText":"function executeFunctionOnArrayRowsGrid(table, verifyOrSetGridRow, twoDArrayCoTitlesTop, /* optional */ verificationFunction){\r  var colTitles = twoDArrayCoTitlesTop[0];\r  var dataRows = twoDArrayCoTitlesTop.slice(1);\r  \r  function testRow(row){\r    verifyOrSetGridRow(table, colTitles, row, verificationFunction);\r  }\r  _.each(dataRows,testRow);\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"doVerifyOrSetGridRow","lineNo":19,"params":[{"name":"verifyorSetCellFunction","markedOptional":false,"defaultVal":null},{"name":"seekRowExecute","markedOptional":false,"defaultVal":null},{"name":"table","markedOptional":false,"defaultVal":null},{"name":"criteria","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"overrideVerifyFunctionOrSetParentFunction","markedOptional":true,"defaultVal":"defaultVerifySetFunction"}],"functionText":"function doVerifyOrSetGridRow(verifyorSetCellFunction, seekRowExecute, table, criteria, data, /* optional */ overrideVerifyFunctionOrSetParentFunction){\r  \r  function defaultVerifySetFunction(cell, data, colTitle, rowIndex, colIndex, arRowCells){\r    var datakeys = _.keys(data);\r    var lwrTitle =  lwrCaseTrimNoSpaces(colTitle);\r    var wantVerify = _.contains(datakeys, lwrTitle);\r    if (wantVerify){\r      var expected = data[lwrTitle];\r      var errorStr = 'Cell verification failed: ' + colTitle + ': row ' + rowIndex;\r      verifyorSetCellFunction(cell, expected,  errorStr);\r    }\r  }\r  \r  var verificationOrSetFunction = def(overrideVerifyFunctionOrSetParentFunction, defaultVerifySetFunction);\r  seekRowExecute(table, criteria, data, verificationOrSetFunction);\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"getCriteriaDataObjectsFromArray","lineNo":36,"params":[{"name":"colTitles","markedOptional":false,"defaultVal":null},{"name":"colData","markedOptional":false,"defaultVal":null}],"functionText":"function  getCriteriaDataObjectsFromArray(colTitles, colData){\r  ensure(colTitles.length === colData.length, 'The length of the col titles and col data arrays are different')\r  \r  function startWithTild(str){\r    return startsWith(str, '~');\r  }\r  \r  function removeTildPrefixAndLwr(str){\r    var result = startWithTild(str) ? str.slice(1) : str;\r    result = lwrCaseTrimNoSpaces(result);\r    return result;\r  }\r  \r  function removeTildFromTuple0(tuple){\r    var result = [removeTildPrefixAndLwr(tuple[0]), tuple[1]]\r    return result;\r  }\r  \r  var titleDataTuples = _.zip(colTitles, colData);\r  var criteriaItems = _.chain(titleDataTuples).\r              filter(function(tuple){return startWithTild(tuple[0])}).\r              map(removeTildFromTuple0).\r              value();\r              \r  var dataItems = _.chain(titleDataTuples).\r              map(removeTildFromTuple0).\r              value();\r              \r  var dataResult = tuples2Object(dataItems);\r  var criteriaItems = criteriaItems.length === 0 ? dataResult :  tuples2Object(criteriaItems);\r  var result = {\r    criteria: criteriaItems,\r    data: dataResult\r  };\r  \r  return result;\r  \r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"getCriteriaDataObjectsFromArrayEndPoint","lineNo":75,"params":[],"functionText":"function getCriteriaDataObjectsFromArrayEndPoint() {\r  function cellFuncTrue(cell, data, colTitle, rowIndex, colIndex){\r    return true;\r  }\r  var colTitles, data, result;\r  colTitles = ['Employee'         ,'~Message ID'  ,'~Date'                ,'Phone Number' ,'Message'];\r  data =      ['Cooper, Sheldon'  ,cellFuncTrue    ,'11 Apr 2013 15:54:49'    ,'+61423222695'    ,'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  result = getCriteriaDataObjectsFromArray(colTitles, data);\r  \r  colTitles = ['Employee', '~Message ID', '~Date', 'Phone Number', 'Message'];\r  data = ['Cooper, Sheldon', '2516732', '11 Apr 2013 15:54:49', '+61423222695', \r   'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  \r  var result = getCriteriaDataObjectsFromArray(colTitles, data);\r  \r  colTitles = ['Employee', 'Message ID', 'Date', 'Phone Number', 'Message'];\r  data = ['Cooper, Sheldon', '2516732', '11 Apr 2013 15:54:49', '+61423222695',\r              'Hi Sheldon, Zigzag OFFERING shifts Caltech 0900-1400 Thu 11 Apr. Reply Y or N.'];\r  result = getCriteriaDataObjectsFromArray(colTitles, data);\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"tuples2Object","lineNo":96,"params":[{"name":"tuples","markedOptional":false,"defaultVal":null}],"functionText":"function tuples2Object(tuples){\r  var result = {}\r  _.each(tuples, function(tuple){\r    var propName = tuple[0];\r    var propVal = tuple[1];\r    ensure(!_.isFunction(propVal), 'Passing function as a property in an array is not supported')\r    result[propName] = propVal;\r  });\r\r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"tuples2ObjectEndPoint","lineNo":108,"params":[],"functionText":"function tuples2ObjectEndPoint() {\r  function hi(){\r    return true;\r  }\r  var tup = ['name', hi];\r  //tup[1]();\r  var tups = [tup];\r  \r  var result = tuples2Object(tups);\r  result[0]();\r\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"lwrCasedKeysFromNameVal","lineNo":122,"params":[{"name":"critera","markedOptional":false,"defaultVal":null}],"functionText":"function lwrCasedKeysFromNameVal(critera){\r  var pairs = _.pairs(critera);\r  var lwrCaseCriteria = _.map(pairs, function(pair){return [lwrCaseTrimNoSpaces(pair[0]), pair[1]]});\r  var result = {}\r  _.each(lwrCaseCriteria, function(pair){\r            result[pair[0]] = pair[1]; \r            });\r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"lwrCasedKeysFromNameValEndPoint","lineNo":132,"params":[],"functionText":"function lwrCasedKeysFromNameValEndPoint() {\r  var critera = {\r    Name: 'jim Jamooche',\r    date: aqDateTime.SetDateTimeElements(2013, 1, 5, 0, 0, 0),\r    EMPTY: null,\r    EMPTY_2: undefined\r  };\r  \r  var expected = {\r    name: 'jim Jamooche',\r    date: aqDateTime.SetDateTimeElements(2013, 1, 5, 0, 0, 0),\r    empty: null,\r    empty_2: undefined\r  };\r  \r  var actual = lwrCasedKeysFromNameVal(critera);\r  // - CheckEqual not working with dates\r  //checkEqual(expected, actual);\r\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"lwrCaseTrimNoSpacesUnitTest","lineNo":155,"params":[],"functionText":"function lwrCaseTrimNoSpacesUnitTest() {\r  var result = lwrCaseTrimNoSpaces(null);\r  checkEqual('', result);\r  \r  result = lwrCaseTrimNoSpaces(' HELLo  cooL worlD  ');\r  checkEqual('hellocoolworld', result);\r\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"eachCellPrivate","lineNo":166,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"rowCellFunction","markedOptional":false,"defaultVal":null},{"name":"data","markedOptional":false,"defaultVal":null},{"name":"skipCount","markedOptional":false,"defaultVal":"useSimple ? 0 : 1"},{"name":"useSimple","markedOptional":false,"defaultVal":null},{"name":"singleRowTarget","markedOptional":false,"defaultVal":null}],"functionText":"function eachCellPrivate(table, rowCellFunction, data, skipCount, useSimple, singleRowTarget){\r  ensure(table.ObjectType === 'Table', 'Calling a table function on a non table object.');\r  skipCount = def(skipCount, useSimple ? 0 : 1);\r  var arRows = allTableCells(table, !useSimple);\r  \r  if (!useSimple){\r    colTitles = _.map(arRows[0], function(cell){return cell.contentText;})\r  }\r\r  function eachCell(arRowCells, indexInArray){\r    _.each(arRowCells, function(cell){\r                          colIndex = cell.columnIndex;\r                          if (useSimple){\r                            rowIndex = cell.rowIndex;\r                            rowCellFunction(cell, data, rowIndex, colIndex, arRowCells);\r                          }\r                          else {\r                            rowIndex = indexInArray; // visible rows\r                            var colTitle = colTitles[colIndex];\r                            rowCellFunction(cell, data, colTitle, rowIndex, colIndex, arRowCells);\r                          }\r                          });\r  };\r  \r\r  if (hasValue(singleRowTarget)){\r    targetIndex = singleRowTarget.length > -1 ? singleRowTarget[0].RowIndex : -1;\r    \r    function rowIndexSameAsTarget(arTheseCols){\r      var result = -1,\r      idx = -1;\r      _.each(arTheseCols, function(item){\r        idx++;\r        if (result < 0 && item.length > 0){\r          var firstCell = item[0];\r          result = firstCell.RowIndex === targetIndex ? idx : result;\r        };\r      });\r      return result;\r    }\r    \r    var visRowIndex = rowIndexSameAsTarget(arRows);\r    eachCell(singleRowTarget, visRowIndex);\r  } \r  else {\r    var rowCount = arRows.length;\r    // rows zero indexed so start at skip count\r    for (var i = skipCount; i < rowCount; i++){\r      var arRowCells = arRows[i];\r      eachCell(arRowCells, i);\r    }\r  }\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"allTableCells","lineNo":220,"params":[{"name":"table","markedOptional":false,"defaultVal":null},{"name":"filterVisible","markedOptional":false,"defaultVal":null}],"functionText":"function allTableCells(table, filterVisible){\r  var cells = table.FindAllChildren('ObjectType', 'Cell', 1);\r  cells =(new VBArray(cells)).toArray();\r  cells = _.chain(cells)\r    .filter(function (cell){return !filterVisible || cell.Visible && cell.Height > 0})\r    .sortBy(function(cell){return cell.RowIndex})\r    .groupBy(function(cell){return cell.RowIndex}) \r    .map(function (arr){return _.sortBy(arr, function(cell){return cell.ColumnIndex;})})\r    .value();\r  return cells;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"getColTitles","lineNo":232,"params":[{"name":"table","markedOptional":false,"defaultVal":null}],"functionText":"function getColTitles(table){\r  var titleCells = table.rows.item(0).cells;\r  var cellCount = titleCells.length;\r  var result = {}\r  var counter = 0;\r  _.each(titleCells, function(cell){\r     var cellTitle = cell.innerText;\r     result[counter] = cellTitle;\r     counter++;\r    });\r    \r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"getColTitlesEndPoint","lineNo":249,"params":[],"functionText":"function getColTitlesEndPoint(){\r  var table = testTable();\r  var result = getColTitles(table);\r  checkEqual(result[5], 'Pay Level')\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"getIndexFunctionPairs","lineNo":255,"params":[{"name":"mixedMap","markedOptional":false,"defaultVal":null},{"name":"table","markedOptional":false,"defaultVal":null}],"functionText":"function getIndexFunctionPairs(mixedMap, table){\r  function colNameToIndex(colNameOrIndex){\r    return colNameToIndexWithTable(colNameOrIndex, table);  \r  }\r  \r  var colIds = _.chain(mixedMap).\r                    keys(mixedMap).\r                    map(colNameToIndex).\r                    value();\r  \r  \r  var functions = _.values(mixedMap);\r  var result = _.zip(colIds, functions);                   \r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"colNameToIndexWithTable","lineNo":271,"params":[{"name":"colNameOrIndex","markedOptional":false,"defaultVal":null},{"name":"table","markedOptional":false,"defaultVal":null}],"functionText":"function colNameToIndexWithTable(colNameOrIndex, table){\r  var colIndex = parseInt(colNameOrIndex);\r  result = _.isNaN(colIndex) ?\r          colIndexFromColName(colNameOrIndex, table) :\r          colIndex;\r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"matchCellTitle","lineNo":280,"params":[{"name":"title1","markedOptional":false,"defaultVal":null},{"name":"title2","markedOptional":false,"defaultVal":null}],"functionText":"function matchCellTitle(title1, title2){\r  function process(str){\r    var result =  aqString.Trim(str)\r    result = aqString.Replace(result, ' ', ''); \r    return result\r  }\r  return sameText(process(title1), process(title2));\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"colIndexFromColName","lineNo":289,"params":[{"name":"colNameOrIndex","markedOptional":false,"defaultVal":null},{"name":"table","markedOptional":false,"defaultVal":null}],"functionText":"function colIndexFromColName(colNameOrIndex, table){\r  var titleCells = table.rows.item(0).cells;\r  var cellCount = titleCells.length;\r  var result = -1;\r    \r  for (var counter = 0; counter < cellCount; counter++){\r    var cell = titleCells.item(counter);\r    var cellTitle = cell.innerText;\r    if (matchCellTitle(cellTitle, colNameOrIndex)) {\r      result = counter;  \r      break;\r    }   \r  }\r  ensure(result > -1, 'No column found for cdolum tittle: ' + colNameOrIndex);\r  return result;\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"testTable","lineNo":306,"params":[],"functionText":"function testTable(){\r  return seekByIDDefPage('MasterPagecontentradGridPayDetails_ctl00');\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"getIndexFunctionPairsMapEndPoint","lineNo":310,"params":[],"functionText":"function getIndexFunctionPairsMapEndPoint() {\r  function hello(){log('Hi')}\r  function seeYa(){log('seeYa')}\r \r  var mixedMap = {\r    0: null,\r    Date: hello,\r    End: null,\r    Start: hello,\r    Department: seeYa\r  }\r  \r  \r  var table = testTable();\r  var result = getIndexFunctionPairs(mixedMap, table);\r  \r  function applyFunction(pair){\r    var cellIndex = pair[0],\r    cellFunction = pair[1];\r    \r    if(hasValue(cellFunction)){\r      cellFunction();\r    }\r  \r  }\r  _.each(result, applyFunction);\r}","hasResult":false,"scriptName":"HtmlGridPrivate"},{"name":"lwrCaseTrimNoSpaces","lineNo":338,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function lwrCaseTrimNoSpaces(str){\r  return hasValue(str) ? \r              aqString.ToLower(aqString.Replace(str, ' ', '')) :\r              '';\r}","hasResult":true,"scriptName":"HtmlGridPrivate"},{"name":"getRowInfo","lineNo":344,"params":[],"functionText":"function getRowInfo(){\r\r}","hasResult":false,"scriptName":"HtmlGridPrivate"}]},{"name":"Json2","path":"C:\\DocTarget\\Utils\\Json2.sj","functions":[{"name":"documentationStub","lineNo":158,"params":[],"functionText":"function documentationStub(){\r}","hasResult":false,"scriptName":"Json2","examples":[]}]},{"name":"PathUtils","path":"C:\\DocTarget\\Utils\\PathUtils.sj","functions":[{"name":"relativeToAbsolute","lineNo":5,"params":[{"name":"baseDir","markedOptional":false,"defaultVal":null},{"name":"relativePath","markedOptional":false,"defaultVal":null}],"functionText":"function relativeToAbsolute(baseDir, relativePath){\r  return PathUtilsParent.relativeToAbsolute(baseDir, relativePath);\r}","hasResult":true,"scriptName":"PathUtils","examples":["function relativeToAbsoluteEndPoint(){\r var relativePath = \"..\\\\..\\\\Utils\\\\FileUtils.sj\",\r basePath = Project.Path;\r var result = relativeToAbsolute(basePath, relativePath);\r}"]},{"name":"nowLogSuffix","lineNo":9,"params":[],"functionText":"function nowLogSuffix(){\r  var now = aqDateTime.Now();\r  return aqDateTime.GetYear(now) + '-' + \r    aqDateTime.GetMonth(now) + '-' + \r    aqDateTime.GetDay(now) + '-' + \r    aqDateTime.GetHours(now) + '-' +\r    aqDateTime.GetMinutes(now) + '-' +\r    aqDateTime.GetSeconds(now);\r}","hasResult":true,"scriptName":"PathUtils","examples":["function nowLogSuffixEndPoint(){\r  var result = nowLogSuffix();\r}"]},{"name":"latestConfigFilePath","lineNo":20,"params":[],"functionText":"function latestConfigFilePath()\r{\r  return activeDataFile('latestConfig.json')   \r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"ensureDirectoryExists","lineNo":25,"params":[{"name":"fullDirPath","markedOptional":false,"defaultVal":null}],"functionText":"function ensureDirectoryExists(fullDirPath){\r  if (!aqFileSystem.Exists(fullDirPath)){\r    aqFileSystem.CreateFolder(fullDirPath)\r  }\r}","hasResult":false,"scriptName":"PathUtils","examples":[]},{"name":"activeDataFile","lineNo":33,"params":[{"name":"fileNameNoPath","markedOptional":false,"defaultVal":null}],"functionText":"function activeDataFile(fileNameNoPath){\r  var folderName = \"ActiveData\";\r  var activeDataDir = suiteChildPath(folderName);\r  ensureDirectoryExists(activeDataDir);\r  var result = combine(activeDataDir, fileNameNoPath);\r  return result;\r}","hasResult":true,"scriptName":"PathUtils","examples":["function activeDataFileEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath + \"ActiveData\\\\\", activeDataFile());\r}","function activeDataFileEndPoint() {\r  var result = activeDataFile('AFile.txt');\r}"]},{"name":"configSourceFile","lineNo":41,"params":[{"name":"fileNameNoPath","markedOptional":false,"defaultVal":null}],"functionText":"function configSourceFile(fileNameNoPath){\r  return suiteChildPath(\"Config\", fileNameNoPath);     \r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"testDataPath","lineNo":45,"params":[],"functionText":"function testDataPath(){\r  return projectChildPath(\"TestData\");      \r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"logsDirPath","lineNo":49,"params":[],"functionText":"function logsDirPath(){\r  var result = 'C:\\\\TestCompleteLogs';\r  ensureDirectoryExists(result);\r  return result;      \r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"projectChildPath","lineNo":55,"params":[{"name":"childDir","markedOptional":false,"defaultVal":null},{"name":"childDirFile","markedOptional":false,"defaultVal":null}],"functionText":"function projectChildPath(childDir, childDirFile){\r  return childPath(Project.Path, childDir, childDirFile);       \r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"suiteChildPath","lineNo":59,"params":[{"name":"childDir","markedOptional":false,"defaultVal":null},{"name":"childDirFile","markedOptional":false,"defaultVal":null}],"functionText":"function suiteChildPath(childDir, childDirFile){\r  return childPath(ProjectSuite.Path, childDir, childDirFile);    \r}","hasResult":true,"scriptName":"PathUtils","examples":["function suiteChildPathEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath, suiteChildPath(\"\"));\r  \r  suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\dir\\\\\";\r  checkEquals(suitePath, suiteChildPath(\"dir\"));\r  \r  suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\dir\\\\testFile.txt\";\r  checkEquals(suitePath, suiteChildPath(\"dir\",\"testFile.txt\"));\r}"]},{"name":"tempFile","lineNo":63,"params":[{"name":"fileNameNoPath","markedOptional":false,"defaultVal":null},{"name":"wantThrowIfNotExist","markedOptional":false,"defaultVal":"false"}],"functionText":"function tempFile(fileNameNoPath, wantThrowIfNotExist){\r  wantThrowIfNotExist = def(wantThrowIfNotExist, false);\r  var result = combine(tempDir(), fileNameNoPath);\r  ensure(!wantThrowIfNotExist || aqFile.exists(result), \"File does not exist\");\r  return result; \r}","hasResult":true,"scriptName":"PathUtils","examples":["function tempFileEndPoint() \r{\r  aqFile.WriteToTextFile(tempFile(\"Test.txt\"), \"fdfd\", aqFile.ctUnicode , true);\r  var result = tempFile(\"MissingtempFile.txt\");\r  result = tempFile(\"Test.txt\");\r  //should throw \r  result = tempFile(\"MissingTestFile.txt\", true);  \r}"]},{"name":"combine","lineNo":70,"params":[],"functionText":"function combine(){\r  return PathUtilsPrivate.combine.apply(this, arguments);\r}","hasResult":true,"scriptName":"PathUtils","examples":["function combineUnitTest()\r{\r  var path = combine(\"C:\", \"Demo\", \"Data\");\r  path = combine(\"\");\r  path = combine();\r  path = combine(\"C\");\r}"]},{"name":"tempDir","lineNo":74,"params":[],"functionText":"function tempDir(){\r  return Sys.OSInfo.TempDirectory\r}","hasResult":true,"scriptName":"PathUtils","examples":[]},{"name":"forceSlash","lineNo":78,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function forceSlash(str){\r  return PathUtilsPrivate.forceSlash(str);\r}","hasResult":true,"scriptName":"PathUtils","examples":["function forceSlashUnitTest()\r{\r  var str = \"\";\r  str = forceSlash(str);\r  \r  str = \"c:\\\\dir\"\r  str = forceSlash(str);\r  \r  str = \"c:\\\\dir\\\\\"\r  str = forceSlash(str);\r}"]}]},{"name":"PathUtilsEndPoints","path":"C:\\DocTarget\\Utils\\PathUtilsEndPoints.sj","functions":[{"name":"activeDataFileEndPoint","lineNo":3,"params":[],"functionText":"function activeDataFileEndPoint() {\r  var result = activeDataFile('AFile.txt');\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"nowLogSuffixEndPoint","lineNo":7,"params":[],"functionText":"function nowLogSuffixEndPoint(){\r  var result = nowLogSuffix();\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"relativeToAbsoluteEndPoint","lineNo":11,"params":[],"functionText":"function relativeToAbsoluteEndPoint(){\r var relativePath = \"..\\\\..\\\\Utils\\\\FileUtils.sj\",\r basePath = Project.Path;\r var result = relativeToAbsolute(basePath, relativePath);\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"suiteChildPathEndPoint","lineNo":18,"params":[],"functionText":"function suiteChildPathEndPoint()\r{\r  var suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\\";\r  checkEquals(suitePath, suiteChildPath(\"\"));\r  \r  suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\dir\\\\\";\r  checkEquals(suitePath, suiteChildPath(\"dir\"));\r  \r  suitePath = \"C:\\\\Automation\\\\ManilaPrep\\\\dir\\\\testFile.txt\";\r  checkEquals(suitePath, suiteChildPath(\"dir\",\"testFile.txt\"));\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"combineUnitTest","lineNo":31,"params":[],"functionText":"function combineUnitTest()\r{\r  var path = combine(\"C:\", \"Demo\", \"Data\");\r  path = combine(\"\");\r  path = combine();\r  path = combine(\"C\");\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"forceSlashUnitTest","lineNo":39,"params":[],"functionText":"function forceSlashUnitTest()\r{\r  var str = \"\";\r  str = forceSlash(str);\r  \r  str = \"c:\\\\dir\"\r  str = forceSlash(str);\r  \r  str = \"c:\\\\dir\\\\\"\r  str = forceSlash(str);\r}","hasResult":false,"scriptName":"PathUtilsEndPoints"},{"name":"tempFileEndPoint","lineNo":51,"params":[],"functionText":"function tempFileEndPoint() \r{\r  aqFile.WriteToTextFile(tempFile(\"Test.txt\"), \"fdfd\", aqFile.ctUnicode , true);\r  var result = tempFile(\"MissingtempFile.txt\");\r  result = tempFile(\"Test.txt\");\r  //should throw \r  result = tempFile(\"MissingTestFile.txt\", true);  \r}","hasResult":false,"scriptName":"PathUtilsEndPoints"}]},{"name":"PathUtilsParent","path":"C:\\DocTarget\\Utils\\PathUtilsParent.sj","functions":[{"name":"relativeToAbsolute","lineNo":2,"params":[{"name":"baseDir","markedOptional":false,"defaultVal":null},{"name":"relativePath","markedOptional":false,"defaultVal":null}],"functionText":"function relativeToAbsolute(baseDir, relativePath){\r  var pathParts = tokenise(relativePath),\r  dirParts = tokenise(baseDir);\r  \r  var absPathParts = _.reject( \r    pathParts,\r    function(part){\r      return !aqString.Find(part, \"..\");\r      }\r    );\r    \r  var drillUpCount = pathParts.length - absPathParts.length;\r  var resultDirPartsCount = dirParts.length - drillUpCount;\r  var resultBase = dirParts.slice(0, resultDirPartsCount);\r  var arResult = resultBase.concat(absPathParts);\r  return arResult.join(\"\\\\\"); \r}","hasResult":true,"scriptName":"PathUtilsParent"},{"name":"tokenise","lineNo":20,"params":[{"name":"path","markedOptional":false,"defaultVal":null}],"functionText":"function tokenise(path) {\r  return aqFileSystem.ExcludeTrailingBackSlash(path).split(\"\\\\\");\r}","hasResult":true,"scriptName":"PathUtilsParent"},{"name":"tokeniseUnitTest","lineNo":24,"params":[],"functionText":"function tokeniseUnitTest(){\r  var tokens = tokenise(\"Script\\\\CheckUtilsPrivate.sj\");\r}","hasResult":false,"scriptName":"PathUtilsParent"}]},{"name":"PathUtilsPrivate","path":"C:\\DocTarget\\Utils\\PathUtilsPrivate.sj","functions":[{"name":"childPath","lineNo":0,"params":[{"name":"baseDir","markedOptional":false,"defaultVal":null},{"name":"childDir","markedOptional":false,"defaultVal":null},{"name":"childDirFile","markedOptional":false,"defaultVal":null}],"functionText":"function childPath(baseDir, childDir, childDirFile){\r  var dir = combine(baseDir, childDir)\r  var result = forceSlash(dir)  \r  result = childDirFile ? result + childDirFile : result;\r  return result      \r}","hasResult":true,"scriptName":"PathUtilsPrivate"},{"name":"combine","lineNo":7,"params":[],"functionText":"function combine()\r{\r  var counter;\r  var result = \"\";\r  for (counter = 0; counter < arguments.length; counter += 1)\r  { \r    result = counter === 0 ? result : forceSlash(result);\r    result = result + arguments[counter]; \r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"PathUtilsPrivate"},{"name":"forceSlash","lineNo":20,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function forceSlash(str)\r{\r  return aqFileSystem.IncludeTrailingBackSlash(str);\r}","hasResult":true,"scriptName":"PathUtilsPrivate"}]},{"name":"ReflectionUtils","path":"C:\\DocTarget\\Utils\\ReflectionUtils.sj","functions":[{"name":"scriptFilesInProjectFile","lineNo":20,"params":[{"name":"projectFilePath","markedOptional":false,"defaultVal":null}],"functionText":"function scriptFilesInProjectFile(projectFilePath){\r  \r  basePath = aqFileSystem.GetFileFolder(projectFilePath);\r  \r  function xmlFragementToAbsoluteNamePath(str){\r    return xmlFragementToNamePath(str, basePath);\r  }\r  \r  var arProjectFiles = arrayFromFile(projectFilePath, projectScriptFileEncoding());\r  var arResult = \r  _.chain(arProjectFiles)\r    .filter(\r      function(xmlString){\r        return aqString.Find(xmlString, '<Prp name=\"relpath\"', 0, false) > -1 &&\r        aqString.Find(xmlString, '.sj\"/>', 0, false) > -1\r      })\r    .map(xmlFragementToAbsoluteNamePath)\r    .value();\r filesInProject = arResult;\r return filesInProject;\r}","hasResult":true,"scriptName":"ReflectionUtils","examples":["function scriptFilesInProjectFileEndPoint() {\r var result = scriptFilesInProjectFile(Project.FileName);\r check(result.length > 20);\r}"]},{"name":"extendedScriptInfo","lineNo":43,"params":[{"name":"projectFilePath","markedOptional":false,"defaultVal":null}],"functionText":"function extendedScriptInfo(projectFilePath){\r  var result =  _.chain(scriptFilesInProjectFile(projectFilePath))\r                  .map( \r                    function(namePathObj){\r                      var result = {};\r                      result['name'] = _.keys(namePathObj)[0];\r                      result['path'] = _.values(namePathObj)[0];\r                      return result;\r                  })\r                  .map(addFileInfo)\r                  .value();\r                  \r  var tree = JSON.stringify(result);\r  stringToFile(tree, 'C:\\\\parsedInfo.txt'); \r  result = linkFunctionsToExamples(result);\r\r  return result;\r}","hasResult":true,"scriptName":"ReflectionUtils","examples":["function extendedScriptInfoEndPoint() {\r var result = extendedScriptInfo(Project.FileName);\r check(result.length > 20);\r}"]}]},{"name":"ReflectionUtilsEndPoints","path":"C:\\DocTarget\\Utils\\ReflectionUtilsEndPoints.sj","functions":[{"name":"scriptFilesInProjectFileEndPoint","lineNo":4,"params":[],"functionText":"function scriptFilesInProjectFileEndPoint() {\r var result = scriptFilesInProjectFile(Project.FileName);\r check(result.length > 20);\r}","hasResult":false,"scriptName":"ReflectionUtilsEndPoints"},{"name":"extendedScriptInfoEndPoint","lineNo":9,"params":[],"functionText":"function extendedScriptInfoEndPoint() {\r var result = extendedScriptInfo(Project.FileName);\r check(result.length > 20);\r}","hasResult":false,"scriptName":"ReflectionUtilsEndPoints"}]},{"name":"ReflectionUtilsPrivate","path":"C:\\DocTarget\\Utils\\ReflectionUtilsPrivate.sj","functions":[{"name":"addFileInfo","lineNo":6,"params":[{"name":"filePathInfo","markedOptional":false,"defaultVal":null}],"functionText":"function addFileInfo(filePathInfo){\r  Indicator.PushText('parsing ' + filePathInfo.name);\r  var result = addFunctionInfo(filePathInfo);\r  if (result.functions.length === 0){\r    logError('file with no functions found (check and check file encoding): ' + filePathInfo.name);\r  }\r  Indicator.PopText();\r  return result;\r}","hasResult":true,"scriptName":"ReflectionUtilsPrivate"},{"name":"addFunctionInfo","lineNo":16,"params":[{"name":"filePathInfo","markedOptional":false,"defaultVal":null}],"functionText":"function addFunctionInfo(filePathInfo){\r  var result = filePathInfo;\r  result['functions'] = getFunctionInfo(filePathInfo);\r  return result;\r}","hasResult":true,"scriptName":"ReflectionUtilsPrivate"}]},{"name":"SimplifiedLogUtils","path":"C:\\DocTarget\\Utils\\SimplifiedLogUtils.sj","functions":[{"name":"onLogMessage","lineNo":9,"params":[{"name":"Sender","markedOptional":false,"defaultVal":null},{"name":"LogParams","markedOptional":false,"defaultVal":null}],"functionText":"function onLogMessage(Sender, LogParams)\r{\r  function interestingMessage(str){\r    return isEndTest(str) ||\r      isStartTest(str) ||\r      isDefectStart(str) ||\r      isDefectEnd(str); \r  }\r\r  if (interestingMessage(LogParams.Str)){\r    simplifiedLog.push(logTime() + LogParams.Str);\r  } \r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"onLogError","lineNo":23,"params":[{"name":"Sender","markedOptional":false,"defaultVal":null},{"name":"LogParams","markedOptional":false,"defaultVal":null}],"functionText":"function onLogError(Sender, LogParams){\r  simplifiedLog.push(logTime() + errorPrefix() + LogParams.Str);\r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"logTime","lineNo":27,"params":[],"functionText":"function logTime(){\r  var result = aqConvert.DateTimeToFormatStr( aqDateTime.Now(),' %d-%b %H:%M:%S: ')\r  return result;\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isStartTest","lineNo":32,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isStartTest(str)\r{\r  return hasText(startTestToken(), str) ;\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isEndTest","lineNo":37,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isEndTest(str)\r{\r  return hasText(endTestToken(), str);\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isDefectStart","lineNo":42,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isDefectStart(str)\r{\r  return hasText(defectExpectedToken(), str);\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isActiveDefectStart","lineNo":47,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isActiveDefectStart(str)\r{\r  var result = isDefectStart(str);\r  if (result){\r    var active = subStrAfter(str, 'Active:');\r    active = aqString.Trim(active);\r    result = sameText(active, 'true');\r  }\r  return result;\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isInActiveDefectStart","lineNo":58,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isInActiveDefectStart(str)\r{\r  return isDefectStart(str) && !isActiveDefectStart(str);\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isDefectEnd","lineNo":63,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isDefectEnd(str)\r{\r  return hasText(endDefectExpectedToken(), str);\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"errorPrefix","lineNo":68,"params":[],"functionText":"function errorPrefix(){\r  return \"ERROR: \"\r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"isError","lineNo":72,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isError(str)\r{\r  return hasText(errorPrefix(), str);\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"saveProcessSimplifiedLog","lineNo":77,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"simpleLogProcessingMethod","markedOptional":false,"defaultVal":null}],"functionText":"function saveProcessSimplifiedLog(runConfig, simpleLogProcessingMethod) {\r  var logDir = logsDirPath();  \r  var fileName = combine(logDir, nowLogSuffix() + '.log');\r  var logStr = arrayToString(simplifiedLog);\r  log('Saving simplified log to file: ' + fileName, logStr);\r  stringToFile(logStr, fileName);\r  simpleLogProcessingMethod(runConfig, simplifiedLog);\r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"defaultSimpleLogProcessing","lineNo":86,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"arLogEntries","markedOptional":false,"defaultVal":null}],"functionText":"function defaultSimpleLogProcessing(runConfig, arLogEntries){\r  // do nothing by default\r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"parseSimplifiedLogFile","lineNo":90,"params":[{"name":"arLog","markedOptional":false,"defaultVal":null}],"functionText":"function parseSimplifiedLogFile(arLog){\r  \r  var result = {\r    sectionsWithType1ErrorCount: 0,\r    sectionsWithType2ErrorCount: 0,\r    logedSections: [],\r    hasErrors: function(){return result.sectionsWithType1ErrorCount > 0 || result.sectionsWithType2ErrorCount > 0},\r    summary:function(){\r      var t1 = result.sectionsWithType1ErrorCount,\r          t2 = result.sectionsWithType2ErrorCount;\r      \r      return t1  === 0 && t2 === 0 ?\r        'No Errors in Test Run' :\r        'Type 1 Errors: ' +  t1.toString() + ' - Type 1 Errors: ' +  t2.toString(); \r    }\r  };\r  \r  var state = {\r    inTest: false,\r    inError: false,\r    expectDefect: false,\r    type1Error: false,\r    type2Error: false,\r    lines: []\r  }\r  \r  function updateResultAndReset(){\r    // update result\r    if (state.type1Error || state.type2Error){\r      var header = state.type1Error && state.type2Error \r          ? '1 & 2 Errors' : state.type1Error ? '1 Error' : '2 Error';\r      header = '****** Type ' + header + ' - ' + (state.inTest ? ' In ' : ' Out of ') + 'Test ******';\r      var section = [header];\r      section = section.concat(state.lines);\r      section.push('*********************');\r      section.push('');\r      \r      if (state.type1Error){\r        result.sectionsWithType1ErrorCount++;  \r      }\r      \r      if (state.type2Error){\r        result.sectionsWithType2ErrorCount++;  \r      }\r      \r      result.logedSections = result.logedSections.concat(section);\r    }\r    state.inTest = false;\r    state.inError = false;\r    state.expectDefect = false;\r    state.loggedSections =[];\r    state.type1Error = false;\r    state.type2Error = false;\r    state.lines =[];\r  }\r  \r  \r  function parseLine(str){\r    var isTestStart = isStartTest(str);\r    \r    if (!isTestStart){\r      state.lines.push(str);\r   } \r    \r    // error\r    if (isError(str)){\r      state.inError = true;\r      state.type1Error = state.type1Error || !state.expectDefect;\r    } \r    \r    if (isActiveDefectStart(str)){\r      state.inError = false;\r      state.expectDefect = true;\r    }\r    \r    if (isDefectEnd(str)){\r      state.type2Error = state.type2Error || (state.expectDefect && !state.inError);\r      state.inError = false;\r      state.expectDefect = false;\r    }\r    \r    if (isTestStart){\r      updateResultAndReset();\r      state.inTest = true;\r    }\r    \r    if (isEndTest(str)){\r      updateResultAndReset();\r      state.inTest = false;\r    }\r    \r    if (isTestStart){\r      state.lines.push(str);\r    }\r  }\r  \r  _.each(arLog, parseLine);\r  updateResultAndReset();\r  return result;\r\r}","hasResult":true,"scriptName":"SimplifiedLogUtils","examples":[]},{"name":"parseLogFileEndPoint","lineNo":193,"params":[],"functionText":"function parseLogFileEndPoint() \r{\r  var path = testDataFile('simpleLogWitErrors.txt');\r  var logArray = arrayFromFile(path, projectScriptFileEncoding());\r  var result = parseSimplifiedLogFile(logArray);\r  var errors = result.hasErrors();\r  var toLog = result.logedSections.join(newLine());\r  toLog = toLog + newLine() + newLine() + logArray.join(newLine());   \r  log(toLog);\r}","hasResult":false,"scriptName":"SimplifiedLogUtils","examples":[]}]},{"name":"StringUtils","path":"C:\\DocTarget\\Utils\\StringUtils.sj","functions":[{"name":"createGuid","lineNo":7,"params":[],"functionText":"function createGuid(){\r  var scriptLet = Sys.OleObject(\"Scriptlet.TypeLib\");\r  var guid = aqString.Trim(scriptLet.GUID);\r  var trimAr = ['{','}'];\r  var result = trimChars(guid, trimAr);\r  return result;\r}","hasResult":true,"scriptName":"StringUtils","examples":[]},{"name":"trim","lineNo":15,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function trim(str){\r  return StringUtilsParent.trim(str)\r}","hasResult":true,"scriptName":"StringUtils","examples":[]},{"name":"trimChars","lineNo":19,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"arChars","markedOptional":false,"defaultVal":null}],"functionText":"function trimChars(str, arChars){\r  return StringUtilsParent.trimChars(str, arChars);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function trimCharsUnitTest(){\r  var trimAr = ['a','b','}'];\r  var target = 'aabcccdf}b';\r  target = trimChars(target, trimAr);\r  checkEqual(target, 'cccdf');\r  \r  target = '{B80F3702-696A-4757-ABF1-5725A65E8C22}';\r  trimAr = ['{','}'];\r  target = trimChars(target, trimAr);\r}"]},{"name":"startsWith","lineNo":23,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"prefix","markedOptional":false,"defaultVal":null}],"functionText":"function startsWith(str, prefix) {\r  return StringUtilsParent.startsWith(str, prefix);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function startsWithUnitTest()\r{\r  check(startsWith(\"str\", \"st\"));\r  check(startsWith(\"str\", \"\"));\r  check(startsWith(\"\", \"\"));\r  \r  checkFalse(startsWith(\"\", \"S\"));\r  checkFalse(startsWith(\"str\", \"S\"));\r}"]},{"name":"endsWith","lineNo":27,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"suffix","markedOptional":false,"defaultVal":null}],"functionText":"function endsWith(str, suffix) {\r  return StringUtilsParent.endsWith(str, suffix);\r}","hasResult":true,"scriptName":"StringUtils","examples":[]},{"name":"appendDelim","lineNo":31,"params":[{"name":"str1","markedOptional":false,"defaultVal":"\"\""},{"name":"delim","markedOptional":false,"defaultVal":"\"\""},{"name":"str2","markedOptional":false,"defaultVal":"\"\""}],"functionText":"function appendDelim(str1, delim, str2)\r{\r  str1 = def(str1, \"\");\r  delim = def(delim, \"\"); \r  str2 = def(str2, \"\"); \r  \r  var result;   \r  if (str1 === \"\" || str2 === \"\")\r  {\r    result = str1 + str2;\r  } \r  else\r  {\r    result = str1 + delim + str2;\r  }\r  \r  return result\r}","hasResult":true,"scriptName":"StringUtils","examples":["function appendDelimUnitTest()\r{\r  var str1, str2, delim, result\r  str1 = \"Hello\"\r  delim = \" \"\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"Hello World\", result)\r  \r  str1 = \"\"\r  delim = \" \"\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"World\", result)\r  \r  str1 = \"Hello\"\r  delim = \" \"\r  str2 = \"\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"Hello\", result)\r  \r  str1 = \"Hello\"\r  delim = null\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"HelloWorld\", result)\r}"]},{"name":"hasText","lineNo":50,"params":[{"name":"needle","markedOptional":false,"defaultVal":null},{"name":"hayStack","markedOptional":false,"defaultVal":null},{"name":"caseSensitive","markedOptional":true,"defaultVal":null}],"functionText":"function hasText(needle, hayStack, /* optional */ caseSensitive)\r{\r  /* caseSensitive - defaults to false */\r  return StringUtilsParent.hasText(needle, hayStack, caseSensitive);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function hasTextUnitTest()\r{\r  var needle, hayStack, result;\r  \r  needle = \"John\";\r  hayStack = \"i am johnie\";\r  result = hasText(needle, hayStack, true); \r  checkFalse(result);\r  \r  needle = \"John\";\r  hayStack = \"Johnie\";\r  result = hasText(needle, hayStack); \r  check(result);\r  \r  needle = \"John\";\r  hayStack = \"johnie\";\r  result = hasText(needle, hayStack); \r  check(result);\r  \r  needle = \"\";\r  hayStack = \"johnie\";\r  result = hasText(needle, hayStack); \r  checkFalse(result);\r}","function hasTextEndPoint()\r{\r  // should throw exception\r  hasText(null, 1); \r  hasText(1, null); \r}"]},{"name":"stringToFile","lineNo":56,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function stringToFile(str, filePath, encoding){\r  StringUtilsParent.stringToFile(str, filePath, encoding);\r}","hasResult":false,"scriptName":"StringUtils","examples":["function stringToFileUnitTest()\r{\r  var readBack, path;\r  path = tempDir() + \"Test.txt\";\r  stringToFile(\"This is a test\", path);\r  readBack = stringFromFile(path); \r  checkEqual(\"This is a test\", readBack);\r}"]},{"name":"bisect","lineNo":62,"params":[{"name":"strSource","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function bisect(strSource, delim)\r{\r  return StringUtilsParent.bisect(strSource, delim);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function bisectUnitTest()\r{\r  var str, pre, post, result;\r  \r  str = \"Hello Cool World\";\r  result = bisect(str, \",\");\r  checkEqual(\"Hello Cool World\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"e\");\r  checkEqual(\"Th\", result.prefix);\r  checkEqual(\" quick brown fox jumps\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"s\");\r  checkEqual(\"The quick brown fox jump\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"T\");\r  checkEqual(\"\", result.prefix);\r  checkEqual(\"he quick brown fox jumps\", result.suffix);\r  \r  str = \"The quick brown fox jumpsz\";\r  result = bisect(str, \"sz\");\r  checkEqual(\"The quick brown fox jump\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"\");\r  checkEqual(\"The quick brown fox jumps\", result.prefix);\r  checkEqual(\"\", result.suffix);\r    \r  str = \"\";\r  result = bisect(str, \"\");\r  checkEqual(\"\", result.prefix);\r  checkEqual(\"\", result.suffix);\r   \r  str = '<Prp name=\"relpath\" type=\"S\" value=\"..\\\\..\\\\Utils\\\\FileUtils.sj\"/>';\r  result = bisect(str, 'value=\"');\r  checkEqual('<Prp name=\"relpath\" type=\"S\" ', result.prefix);\r  checkEqual('..\\\\..\\\\Utils\\\\FileUtils.sj\"/>', result.suffix);\r}"]},{"name":"subStrBefore","lineNo":67,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrBefore(str, delim)\r{\r  return StringUtilsParent.subStrBefore(str, delim);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function subStrBeforeUnitTest()\r{\r  var result;\r  result = subStrBefore(\"\", \",\");\r  checkEqual(\"\",result);\r   \r  result = subStrBefore(\",Gee wilikers me kent\", \",\");\r  checkEqual(\"\",result);\r   \r  result = subStrBefore(\"Gee wilikers me kent,\", \",\");\r  checkEqual(\"Gee wilikers me kent\", result);\r   \r  result = subStrBefore(\"Gee wilikers, Mr Kent\", \",\");\r  checkEqual(\"Gee wilikers\", result);\r}"]},{"name":"subStrAfter","lineNo":72,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrAfter(str, delim)\r{\r  return StringUtilsParent.subStrAfter(str, delim);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function subStrAfterUnitTest(){\r   var result;\r   result = subStrAfter(\"\", \",\");\r   checkEqual(\"\",result);\r   \r   result = subStrAfter(\",Gee wilikers me kent\", \",\");\r   checkEqual(\"Gee wilikers me kent\",result);\r   \r   result = subStrAfter(\"Gee wilikers me kent,\", \",\");\r   checkEqual(\"\", result);\r   \r   result = subStrAfter(\"Gee wilikers, Mr Kent\", \",\");\r   checkEqual(\" Mr Kent\", result);\r}"]},{"name":"stringFromFile","lineNo":77,"params":[{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function stringFromFile(filePath, encoding)\r{\r  return  StringUtilsParent.stringFromFile(filePath, encoding);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function stringFromFileUnitTest(){\r  var result = stringFromFile(testDataFile(\"TestText.txt\")); \r  check(aqString.Contains(result, \"Unit\"));\r}"]},{"name":"newLine","lineNo":82,"params":[],"functionText":"function newLine(){return StringUtilsParent.newLine();}","hasResult":true,"scriptName":"StringUtils","examples":["function newLineUnitTest()\r{\r var rslt =  \"Hello\" + newLine() + \"World\";\r checkEqual(\"Hello\\nWorld\", rslt)\r}"]},{"name":"sameText","lineNo":84,"params":[{"name":"str1","markedOptional":false,"defaultVal":null},{"name":"str2","markedOptional":false,"defaultVal":null},{"name":"caseSensitive","markedOptional":true,"defaultVal":null}],"functionText":"function sameText(str1, str2, /* optional */ caseSensitive){\r  /* caseSensitive - defaults to false */\r  return StringUtilsParent.sameText(str1, str2, caseSensitive);\r}","hasResult":true,"scriptName":"StringUtils","examples":["function sameTextUnitTest()\r{\r  var result = sameText(null,null);\r  check(result);\r  \r  result = sameText(\"\",\"\");\r  check(result);\r  \r  result = sameText(\"Hi\",\"hI\");\r  check(result);\r  \r  result = sameText(\"Hi\",\"hI\", true);\r  checkFalse(result);\r  \r  var result = sameText(\"hi\",null);\r  checkFalse(result);\r  \r  result = sameText(\"Hi\",\"Hii\");\r  checkFalse(result);\r}"]}]},{"name":"StringUtilsEndPoints","path":"C:\\DocTarget\\Utils\\StringUtilsEndPoints.sj","functions":[{"name":"trimCharsUnitTest","lineNo":5,"params":[],"functionText":"function trimCharsUnitTest(){\r  var trimAr = ['a','b','}'];\r  var target = 'aabcccdf}b';\r  target = trimChars(target, trimAr);\r  checkEqual(target, 'cccdf');\r  \r  target = '{B80F3702-696A-4757-ABF1-5725A65E8C22}';\r  trimAr = ['{','}'];\r  target = trimChars(target, trimAr);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"startsWithUnitTest","lineNo":16,"params":[],"functionText":"function startsWithUnitTest()\r{\r  check(startsWith(\"str\", \"st\"));\r  check(startsWith(\"str\", \"\"));\r  check(startsWith(\"\", \"\"));\r  \r  checkFalse(startsWith(\"\", \"S\"));\r  checkFalse(startsWith(\"str\", \"S\"));\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"stringToFileUnitTest","lineNo":26,"params":[],"functionText":"function stringToFileUnitTest()\r{\r  var readBack, path;\r  path = tempDir() + \"Test.txt\";\r  stringToFile(\"This is a test\", path);\r  readBack = stringFromFile(path); \r  checkEqual(\"This is a test\", readBack);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"appendDelimUnitTest","lineNo":35,"params":[],"functionText":"function appendDelimUnitTest()\r{\r  var str1, str2, delim, result\r  str1 = \"Hello\"\r  delim = \" \"\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"Hello World\", result)\r  \r  str1 = \"\"\r  delim = \" \"\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"World\", result)\r  \r  str1 = \"Hello\"\r  delim = \" \"\r  str2 = \"\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"Hello\", result)\r  \r  str1 = \"Hello\"\r  delim = null\r  str2 = \"World\" \r  result = appendDelim(str1, delim, str2)\r  checkEqual(\"HelloWorld\", result)\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"hasTextUnitTest","lineNo":63,"params":[],"functionText":"function hasTextUnitTest()\r{\r  var needle, hayStack, result;\r  \r  needle = \"John\";\r  hayStack = \"i am johnie\";\r  result = hasText(needle, hayStack, true); \r  checkFalse(result);\r  \r  needle = \"John\";\r  hayStack = \"Johnie\";\r  result = hasText(needle, hayStack); \r  check(result);\r  \r  needle = \"John\";\r  hayStack = \"johnie\";\r  result = hasText(needle, hayStack); \r  check(result);\r  \r  needle = \"\";\r  hayStack = \"johnie\";\r  result = hasText(needle, hayStack); \r  checkFalse(result);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"hasTextEndPoint","lineNo":88,"params":[],"functionText":"function hasTextEndPoint()\r{\r  // should throw exception\r  hasText(null, 1); \r  hasText(1, null); \r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"bisectUnitTest","lineNo":96,"params":[],"functionText":"function bisectUnitTest()\r{\r  var str, pre, post, result;\r  \r  str = \"Hello Cool World\";\r  result = bisect(str, \",\");\r  checkEqual(\"Hello Cool World\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"e\");\r  checkEqual(\"Th\", result.prefix);\r  checkEqual(\" quick brown fox jumps\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"s\");\r  checkEqual(\"The quick brown fox jump\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"T\");\r  checkEqual(\"\", result.prefix);\r  checkEqual(\"he quick brown fox jumps\", result.suffix);\r  \r  str = \"The quick brown fox jumpsz\";\r  result = bisect(str, \"sz\");\r  checkEqual(\"The quick brown fox jump\", result.prefix);\r  checkEqual(\"\", result.suffix);\r  \r  str = \"The quick brown fox jumps\";\r  result = bisect(str, \"\");\r  checkEqual(\"The quick brown fox jumps\", result.prefix);\r  checkEqual(\"\", result.suffix);\r    \r  str = \"\";\r  result = bisect(str, \"\");\r  checkEqual(\"\", result.prefix);\r  checkEqual(\"\", result.suffix);\r   \r  str = '<Prp name=\"relpath\" type=\"S\" value=\"..\\\\..\\\\Utils\\\\FileUtils.sj\"/>';\r  result = bisect(str, 'value=\"');\r  checkEqual('<Prp name=\"relpath\" type=\"S\" ', result.prefix);\r  checkEqual('..\\\\..\\\\Utils\\\\FileUtils.sj\"/>', result.suffix);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"subStrBeforeUnitTest","lineNo":141,"params":[],"functionText":"function subStrBeforeUnitTest()\r{\r  var result;\r  result = subStrBefore(\"\", \",\");\r  checkEqual(\"\",result);\r   \r  result = subStrBefore(\",Gee wilikers me kent\", \",\");\r  checkEqual(\"\",result);\r   \r  result = subStrBefore(\"Gee wilikers me kent,\", \",\");\r  checkEqual(\"Gee wilikers me kent\", result);\r   \r  result = subStrBefore(\"Gee wilikers, Mr Kent\", \",\");\r  checkEqual(\"Gee wilikers\", result);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"subStrAfterUnitTest","lineNo":157,"params":[],"functionText":"function subStrAfterUnitTest(){\r   var result;\r   result = subStrAfter(\"\", \",\");\r   checkEqual(\"\",result);\r   \r   result = subStrAfter(\",Gee wilikers me kent\", \",\");\r   checkEqual(\"Gee wilikers me kent\",result);\r   \r   result = subStrAfter(\"Gee wilikers me kent,\", \",\");\r   checkEqual(\"\", result);\r   \r   result = subStrAfter(\"Gee wilikers, Mr Kent\", \",\");\r   checkEqual(\" Mr Kent\", result);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"stringFromFileUnitTest","lineNo":172,"params":[],"functionText":"function stringFromFileUnitTest(){\r  var result = stringFromFile(testDataFile(\"TestText.txt\")); \r  check(aqString.Contains(result, \"Unit\"));\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"newLineUnitTest","lineNo":177,"params":[],"functionText":"function newLineUnitTest()\r{\r var rslt =  \"Hello\" + newLine() + \"World\";\r checkEqual(\"Hello\\nWorld\", rslt)\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"},{"name":"sameTextUnitTest","lineNo":183,"params":[],"functionText":"function sameTextUnitTest()\r{\r  var result = sameText(null,null);\r  check(result);\r  \r  result = sameText(\"\",\"\");\r  check(result);\r  \r  result = sameText(\"Hi\",\"hI\");\r  check(result);\r  \r  result = sameText(\"Hi\",\"hI\", true);\r  checkFalse(result);\r  \r  var result = sameText(\"hi\",null);\r  checkFalse(result);\r  \r  result = sameText(\"Hi\",\"Hii\");\r  checkFalse(result);\r}","hasResult":false,"scriptName":"StringUtilsEndPoints"}]},{"name":"StringUtilsGrandParent","path":"C:\\DocTarget\\Utils\\StringUtilsGrandParent.sj","functions":[{"name":"stringToFile","lineNo":3,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":"projectScriptFileEncoding())"}],"functionText":"function stringToFile(str, filePath, encoding){\r  var writeSuccess = aqFile.WriteToTextFile(filePath, str, def(encoding, projectScriptFileEncoding()), true);\r  if (!writeSuccess){\r    throwEx('Failed to write to File - ' + filePath);\r  }\r}","hasResult":false,"scriptName":"StringUtilsGrandParent"},{"name":"trimChars","lineNo":10,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"arChars","markedOptional":false,"defaultVal":null}],"functionText":"function trimChars(str, arChars)\r{\r  function inTrim(char) {\r    return _.contains(arChars, char);\r  }\r  \r  while (inTrim(str.substr(0, 1))){\r    str = str.substr(1);\r  }\r \r  var result = '';\r  var trimFinished = false;\r  for (var counter = str.length - 1; counter > -1; counter--) {\r    var thisChar = str.charAt(counter);\r    if (trimFinished || !inTrim(thisChar)){\r      result = thisChar + result;\r      trimFinished = true; \r    }\r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"newLine","lineNo":34,"params":[],"functionText":"function newLine(){return \"\\n\";}","hasResult":false,"scriptName":"StringUtilsGrandParent"},{"name":"stringFromFile","lineNo":36,"params":[{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":"projectScriptFileEncoding("}],"functionText":"function stringFromFile(filePath, encoding){\r  encoding = def(encoding, projectScriptFileEncoding());\r  log(\"Openning File: \" + filePath);\r  return aqFile.ReadWholeTextFile(filePath, encoding); \r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"endsWith","lineNo":42,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"suffix","markedOptional":false,"defaultVal":null}],"functionText":"function endsWith(str, suffix) {\r  return str.indexOf(suffix, str.length - suffix.length) !== -1;\r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"hasText","lineNo":46,"params":[{"name":"needle","markedOptional":false,"defaultVal":null},{"name":"hayStack","markedOptional":false,"defaultVal":null},{"name":"caseSensitive","markedOptional":false,"defaultVal":"false"}],"functionText":"function hasText(needle, hayStack, caseSensitive)\r{\r  caseSensitive = def(caseSensitive, false);\r  if (!caseSensitive){\r    needle = aqString.ToLower(needle); \r    hayStack = aqString.ToLower(hayStack);\r  }\r  return aqString.Find(hayStack, needle) > -1;\r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"bisect","lineNo":59,"params":[{"name":"strSource","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function bisect(strSource, delim)\r{\r  var delimLength = aqString.GetLength(delim), \r    pos = aqString.Find(strSource, delim, 0),\r    srcLength = aqString.GetLength(strSource),\r    before, \r    after;\r   \r  if (pos < 0)\r  {\r    before = def(strSource, \"\");  \r    after = \"\";   \r  }\r  else\r  {\r    before = aqString.SubString(strSource, 0, pos) \r    if (pos < srcLength - delimLength) \r    {\r      after = aqString.SubString(strSource, pos + delimLength, srcLength)\r    }\r    else\r    {\r      after = \"\"\r    }\r  }\r  \r  return {\r    prefix: before,\r    suffix: after\r  }\r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"subStrBefore","lineNo":91,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrBefore(str, delim)\r{\r  var result = bisect(str, delim);\r  return result.prefix;   \r}","hasResult":true,"scriptName":"StringUtilsGrandParent"},{"name":"subStrAfter","lineNo":97,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrAfter(str, delim)\r{\r  var result = bisect(str, delim);\r  return result.suffix;   \r}","hasResult":true,"scriptName":"StringUtilsGrandParent"}]},{"name":"StringUtilsParent","path":"C:\\DocTarget\\Utils\\StringUtilsParent.sj","functions":[{"name":"trimChars","lineNo":3,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"arChars","markedOptional":false,"defaultVal":null}],"functionText":"function trimChars(str, arChars){\r  return StringUtilsGrandParent.trimChars(str, arChars);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"stringToFile","lineNo":7,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function stringToFile(str, filePath, encoding){\r  StringUtilsGrandParent.stringToFile(str, filePath, encoding);\r}","hasResult":false,"scriptName":"StringUtilsParent"},{"name":"startsWith","lineNo":11,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"preFix","markedOptional":false,"defaultVal":null}],"functionText":"function startsWith(str, preFix) {\r  return str.indexOf(preFix) === 0;\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"sameText","lineNo":15,"params":[{"name":"str1","markedOptional":false,"defaultVal":null},{"name":"str2","markedOptional":false,"defaultVal":null},{"name":"caseSensitive","markedOptional":false,"defaultVal":"false"}],"functionText":"function sameText(str1, str2, caseSensitive)\r{ \r  function compareTheStrings(str1, str2){\r    if (!caseSensitive) {\r      str1 = aqString.ToLower(str1);\r      str2 = aqString.ToLower(str2);\r    }\r    return str1 === str2;\r  }\r  \r  caseSensitive = def(caseSensitive, false);\r  var nullResult = !((str1 === null) ^ (str2 === null));\r  var result;\r  if (nullResult)\r  {\r    result = (!str1 && !str2) || compareTheStrings(str1, str2);\r  }\r  else\r  {\r    result = false;\r  }\r \r  return result\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"endsWith","lineNo":40,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"suffix","markedOptional":false,"defaultVal":null}],"functionText":"function endsWith(str, suffix) {\r  return StringUtilsGrandParent.endsWith(str, suffix);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"hasText","lineNo":44,"params":[{"name":"needle","markedOptional":false,"defaultVal":null},{"name":"hayStack","markedOptional":false,"defaultVal":null},{"name":"caseSensitive","markedOptional":false,"defaultVal":null}],"functionText":"function hasText(needle, hayStack, caseSensitive)\r{\r  return StringUtilsGrandParent.hasText(needle, hayStack, caseSensitive);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"stringFromFile","lineNo":49,"params":[{"name":"filePath","markedOptional":false,"defaultVal":null},{"name":"encoding","markedOptional":false,"defaultVal":null}],"functionText":"function stringFromFile(filePath, encoding){\r  return StringUtilsGrandParent.stringFromFile(filePath, encoding)\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"newLine","lineNo":53,"params":[],"functionText":"function newLine(){return StringUtilsGrandParent.newLine();}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"bisect","lineNo":57,"params":[{"name":"strSource","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function bisect(strSource, delim)\r{\r  return StringUtilsGrandParent.bisect(strSource, delim);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"subStrBefore","lineNo":62,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrBefore(str, delim)\r{\r  return StringUtilsGrandParent.subStrBefore(str, delim);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"subStrAfter","lineNo":67,"params":[{"name":"str","markedOptional":false,"defaultVal":null},{"name":"delim","markedOptional":false,"defaultVal":null}],"functionText":"function subStrAfter(str, delim){\r  ensure(arguments.length === 2, 'subStrAfter - 2 arguments required');\r  return StringUtilsGrandParent.subStrAfter(str, delim);\r}","hasResult":true,"scriptName":"StringUtilsParent"},{"name":"trim","lineNo":72,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function trim(str){\r  return aqString.Trim(str);\r}","hasResult":true,"scriptName":"StringUtilsParent"}]},{"name":"SysUtils","path":"C:\\DocTarget\\Utils\\SysUtils.sj","functions":[{"name":"projectScriptFileEncoding","lineNo":12,"params":[],"functionText":"function projectScriptFileEncoding(){return SysUtilsParent.projectScriptFileEncoding()}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"endTestToken","lineNo":14,"params":[],"functionText":"function endTestToken() {return \"End Test\"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"startTestToken","lineNo":15,"params":[],"functionText":"function startTestToken() {return \"Start Test: \"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"iterationToken","lineNo":16,"params":[],"functionText":"function iterationToken() {return \" iteration: \"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"testCaseIdToken","lineNo":17,"params":[],"functionText":"function testCaseIdToken() {return \" testCaseID: \"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"defectExpectedToken","lineNo":18,"params":[],"functionText":"function defectExpectedToken() {return \"Defect Expected: \"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"activeToken","lineNo":19,"params":[],"functionText":"function activeToken() {return \" Active: \"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"endDefectExpectedToken","lineNo":20,"params":[],"functionText":"function endDefectExpectedToken() {return \"End Defect Expected\"}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"notImplementedWarning","lineNo":22,"params":[{"name":"functionName","markedOptional":false,"defaultVal":"'FUNCTION') + ' NOT IMPLEMENTED'"}],"functionText":"function notImplementedWarning(functionName){\r  Log.Warning(def(functionName,'FUNCTION') + ' NOT IMPLEMENTED');\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"seek","lineNo":26,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function seek(container, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  return findChildNested(container, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7);\r}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"seekh","lineNo":30,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function seekh(container, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  return findChildNested(container, true, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7);\r}","hasResult":true,"scriptName":"SysUtils","examples":["function seekhEndPoint(){\r // runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var page = singleWebPage();\r  var txt = seek(page, \r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  txt = seekh(page, \r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}"]},{"name":"findAllChildren","lineNo":36,"params":[{"name":"testObjOrAliasStr","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":null},{"name":"refresh","markedOptional":true,"defaultVal":null}],"functionText":"function findAllChildren(testObjOrAliasStr, propValsObj, /* optional */ depth, /* optional */ refresh) {\r  return SysUtilsPrivate.findAllChildren(testObjOrAliasStr, propValsObj, depth, refresh);\r}","hasResult":true,"scriptName":"SysUtils","examples":["function findAllChildrenEndPoint()\r{\r  var imageArray = findAllChildren(\r    \"Aliases.browser.pageAvalonWhyChooseAvalon.formCountryform.panelPageWrapper.panelMainContainer.panelOuterContainer.panelInnerContainer.panelCtl00Divtopnavouter.panelCtl00Divtopnav\",\r    {\r      alt: 'Why Choose Avalon?',\r      VisibleOnScreen: 'True'\r    //  src: 'http://travel.avalonwaterways.com.au/2013/why-choose-avalon/~/media/Images/Avalon/SecondLevelTabs/menu_01-over.ashx' \r    },\r    2\r  ); \r  checkEqual(1, imageArray.length);\r  imageArray[0].click();\r}"]},{"name":"findChild","lineNo":42,"params":[{"name":"testObjOrAliasStr","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":null},{"name":"refresh","markedOptional":true,"defaultVal":null}],"functionText":"function findChild(testObjOrAliasStr, propValsObj, /* optional */ depth, /* optional */ refresh) {\r  return SysUtilsPrivate.findChild(testObjOrAliasStr, propValsObj, depth, refresh);\r}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"logError","lineNo":46,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":false,"defaultVal":null},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function logError(message, additionalInfo, /* optional */ attr){\r  SysUtilsParent.logError(message, additionalInfo, attr);\r}","hasResult":false,"scriptName":"SysUtils","examples":["function logErrorEndPoint(){\r  logError(\"Hi There\");\r}"]},{"name":"waitAlias","lineNo":50,"params":[{"name":"aliasString","markedOptional":false,"defaultVal":null},{"name":"throwExceptionOnFail","markedOptional":true,"defaultVal":"true"},{"name":"timeOut","markedOptional":true,"defaultVal":"10000"}],"functionText":"function waitAlias(aliasString, /* optional */ throwExceptionOnFail, /* optional */ timeOut){\r  throwExceptionOnFail = def(throwExceptionOnFail, true);\r  timeOut = def(timeOut, 10000);\r  \r  var result = Aliases;\r  var parts = aliasString.split(\".\");\r  \r  // trim aliases if required\r  if (sameText(parts[0], \"Aliases\")) {\r    parts = parts.slice(1); \r  }\r  \r  for (var counter = 0; counter < parts.length; counter++){\r    result = result.WaitAliasChild(parts[counter], timeOut);\r    if(!result.Exists) {\r      break; \r    }\r  }\r  \r  if(throwExceptionOnFail && !result.Exists) {\r    throwEx('waitAlias: ' + aliasString + ' does not exist');\r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"SysUtils","examples":["function waitAliasEndPoint() {\r  // open ie multitab with close multi tab warnings enabled open 2 tabs\r  var al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  checkFalse(al.Exists);\r  \r  ShowMessage(\"Invoke multi tabs close confirmation now\");\r  \r  al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  check(al.Exists);\r  \r  al = waitAlias('browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  check(al.Exists);\r  \r  ShowMessage(\"Close tab window now - exception should follow\");\r  \r  al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false, 1000);\r  check(al.Exists);\r  \r  al = waitAlias('browser.dlgInternetExplorer.btnCloseAllTabs');\r}"]},{"name":"logCheckPoint","lineNo":76,"params":[{"name":"messageText","markedOptional":false,"defaultVal":null},{"name":"additionalInformation","markedOptional":true,"defaultVal":"messageText"},{"name":"priority","markedOptional":true,"defaultVal":"pmNormal"},{"name":"attr","markedOptional":true,"defaultVal":"Log.CreateNewAttributes("},{"name":"picture","markedOptional":true,"defaultVal":"''"},{"name":"folderID","markedOptional":true,"defaultVal":"-1"}],"functionText":"function logCheckPoint(messageText, /* optional */ additionalInformation,/* optional */ priority,/* optional */ attr,/* optional */ picture,/* optional */ folderID){\r  // same defaults as TestComplete\r  additionalInformation = def(additionalInformation, messageText);\r  priority = def(priority, pmNormal);\r  attr = def(attr, Log.CreateNewAttributes());\r  picture = def(picture, '');\r  folderID = def(folderID, -1);\r  Log.Checkpoint(messageText, additionalInformation, priority, attr, picture, folderID)\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"logItalic","lineNo":86,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":true,"defaultVal":null}],"functionText":"function logItalic(message, /* optional */ additionalInfo){\r  var attr = Log.CreateNewAttributes();\r  attr.Italic = true;\r  log(message, additionalInfo, attr);\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"logBold","lineNo":92,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":false,"defaultVal":null}],"functionText":"function logBold(message, additionalInfo){\r  var attr = Log.CreateNewAttributes();\r  attr.Bold = true;\r  log(message, additionalInfo, attr);\r}","hasResult":false,"scriptName":"SysUtils","examples":["function logBoldEndPoint(){\r  logBold(\"Hi There\");\r}"]},{"name":"log","lineNo":98,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":false,"defaultVal":null},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function log(message, additionalInfo, /* optional */ attr){\r  SysUtilsParent.log(message, additionalInfo, /* optional */ attr)\r}","hasResult":false,"scriptName":"SysUtils","examples":["function logEndPoint(){\r  log(\"Hi There\");\r}"]},{"name":"scriptFilePath","lineNo":102,"params":[{"name":"scriptName","markedOptional":false,"defaultVal":null}],"functionText":"function scriptFilePath(scriptName){\r arFiles = scriptFilesInProject();\r fileItem = _.find(arFiles,\r  function(item){\r    return !_.isUndefined(item[scriptName]);\r    }\r );\r ensure(!_.isUndefined(fileItem), \"Script not in project: \" + scriptName);\r return fileItem[scriptName];\r}","hasResult":true,"scriptName":"SysUtils","examples":["function scriptFilePathEndPoint(){\r  var path = scriptFilePath(\"TestCaseList\");\r}"]},{"name":"scriptContents","lineNo":113,"params":[{"name":"scriptName","markedOptional":false,"defaultVal":null}],"functionText":"function scriptContents(scriptName){\r  var scriptPath = scriptFilePath(scriptName)\r  var arResult = arrayFromFile(scriptPath, projectScriptFileEncoding());\r  return arResult;\r}","hasResult":true,"scriptName":"SysUtils","examples":["function scriptContentsUnitTest(){\r var result = scriptContents(\"SysUtilsEndPoints\");\r check(hasText('scriptContentsUnitTest()', result))\r}"]},{"name":"scriptFilesInProject","lineNo":121,"params":[],"functionText":"function scriptFilesInProject(){\r if (_.isUndefined(filesInProject)){\r   filesInProject = scriptFilesInProjectFile(Project.FileName);\r } \r return filesInProject;\r}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"testFilesInProject","lineNo":129,"params":[],"functionText":"function testFilesInProject(){\r  testScriptFilesInProject = testFilesNamesOrPaths(testScriptFilesInProject, getScriptNameFromScriptInfo, scriptFilesInProject);\r  return testScriptFilesInProject;\r}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"testFilePathsInProject","lineNo":135,"params":[],"functionText":"function testFilePathsInProject(){\r  testScriptFilePathsInProject = testFilesNamesOrPaths(testScriptFilesInProject, getScriptPathFromScriptInfo, scriptFilesInProject);\r  return testScriptFilePathsInProject;\r}","hasResult":true,"scriptName":"SysUtils","examples":[]},{"name":"areEqual","lineNo":140,"params":[{"name":"expected","markedOptional":false,"defaultVal":null},{"name":"actual","markedOptional":false,"defaultVal":null}],"functionText":"function areEqual(expected, actual)\r{\r  var result;\r  if (!result) {\r    if (expected === null ^ actual === null) {\r      result = false;\r    } else if (expected === null && actual === null){\r      result = true;\r    } else {\r      var varType = GetVarType(actual);\r      switch (varType){\r        case 7: // Date\r          result = aqDateTime.Compare(expected, actual) === 0;\r          break;\r        default:\r          result = _.isEqual(expected, actual);\r          break;\r      }\r    }\r    return result;\r  }\r}","hasResult":true,"scriptName":"SysUtils","examples":["function areEqualUnitTest() {\r  var result = areEqual(null, null);\r  check(result);\r  \r  result = areEqual(22, 22);\r  check(result);\r  \r  result = areEqual(22, '22');\r  check(!result);\r\r}"]},{"name":"isNullOrUndefined","lineNo":163,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullOrUndefined(arg)\r{\r  return SysUtilsParent.isNullOrUndefined(arg);\r}","hasResult":true,"scriptName":"SysUtils","examples":["function isNullOrUndefinedUnitTest() \r{\r  var test;\r  check(isNullOrUndefined(test));\r  check(isNullOrUndefined(null));\r  check(!isNullOrUndefined(\"\"));\r}"]},{"name":"isNullEmptyOrUndefined","lineNo":168,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullEmptyOrUndefined(arg)\r{\r  return SysUtilsParent.isNullEmptyOrUndefined(arg);\r}","hasResult":true,"scriptName":"SysUtils","examples":["function isNullEmptyOrUndefinedUnitTest()\r{\r\tvar myVar;\r\tcheck(isNullEmptyOrUndefined(myVar));\r\tcheck(isNullEmptyOrUndefined(null));\r\tcheck(isNullEmptyOrUndefined(''));\r\tcheck(isNullEmptyOrUndefined(\"\"));\r\r\tcheck(!isNullEmptyOrUndefined(\"s\"));\r\tcheck(!isNullEmptyOrUndefined(1));\r}"]},{"name":"ForEachChild","lineNo":173,"params":[{"name":"parent","markedOptional":false,"defaultVal":null},{"name":"childFunction","markedOptional":false,"defaultVal":null},{"name":"prm0","markedOptional":false,"defaultVal":null},{"name":"prm1","markedOptional":false,"defaultVal":null},{"name":"prm2","markedOptional":false,"defaultVal":null},{"name":"prm3","markedOptional":false,"defaultVal":null},{"name":"prm4","markedOptional":false,"defaultVal":null},{"name":"prm5","markedOptional":false,"defaultVal":null},{"name":"prm6","markedOptional":false,"defaultVal":null},{"name":"prm7","markedOptional":false,"defaultVal":null},{"name":"prm8","markedOptional":false,"defaultVal":null},{"name":"prm9","markedOptional":false,"defaultVal":null}],"functionText":"function ForEachChild(parent, childFunction, prm0, prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9)\r{\r  var count = parent.ChildCount;\r  var counter;\r  for (counter = 0; counter < count; counter++)\r  {\r    var thisChild = parent.Child(counter)\r    childFunction(thisChild, prm0, prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9)\r  }\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"hasValue","lineNo":184,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function hasValue(arg)\r{\r  return SysUtilsParent.hasValue(arg)\r}","hasResult":false,"scriptName":"SysUtils","examples":["function hasValueUnitTest()\r{\r  var obj, result\r  \r  result = hasValue(obj)\r  check(result)\r  \r  result = hasValue(null)\r  check(result)\r  \r  result = hasValue(\"\")\r  check(result)\r  \r  result = hasValue(\"John\")\r  check(result)\r  \r  result = hasValue(1)\r  check(result)\r  \r  var obj = Array(1, 2, 3)\r  result = hasValue(obj)\r  check(result)\r}"]},{"name":"exists","lineNo":191,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function exists(arg)\r{\r  return SysUtilsParent.exists(arg);\r}","hasResult":false,"scriptName":"SysUtils","examples":["function existsUnitTest()\r{\r  check(exists(1));\r}","function existsEndPoint()\r{\r // runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var page = singleWebPage();\r  \r  var txt = findChild(page, \r    {ObjectType: 'Page'});\r  var exist = exists(txt);\r  checkFalse(exist);\r}"]},{"name":"TerminateProcess","lineNo":196,"params":[{"name":"processName","markedOptional":false,"defaultVal":null}],"functionText":"function TerminateProcess(processName)\r{\r  var process = Sys.WaitProcess(processName);\r  while (process.Exists) {\r    TerminateProcessInstance(process);\r    var process = Sys.WaitProcess(processName);\r  } \r}","hasResult":false,"scriptName":"SysUtils","examples":["function terminateProcessEndPoint()\r{\r  var counter;\r  for (counter = 0; counter < 10; counter++)\r  {\r    executeFile(NOTE_PAD_PATH, \"\", false);\r  }\r  \r  var notePadProcessName = \"notepad\"; \r  TerminateProcess(notePadProcessName); \r  check(processexists(notePadProcessName));\r \r  //should run without error\r  TerminateProcess(\"BlahhhDoesNotexist\")      \r}"]},{"name":"TerminateProcessInstance","lineNo":205,"params":[{"name":"process","markedOptional":false,"defaultVal":null}],"functionText":"function TerminateProcessInstance(process)\r{\r  var timeOut = 10;\r  var tryCount = 0;\r  do {\r    if (process.Exists)\r    {\r      process.Terminate();\r      tryCount = tryCount + 1;\r    }\r    \r    if (process.Exists) \r    {\r      Delay(1000, \"Waiting for process: \" & processName & \" to terminate.\");\r    } \r    else\r    {\r      break;\r    }\r  }  while (tryCount < timeOut)\r\r\r   if (process.Exists)\r   {\r      throwEx(\"Failed to teminate process: \" & processName & \" after a rest period of: \" & timeOut & \" seconds.\");\r   } \r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"executeFile","lineNo":233,"params":[{"name":"filepath","markedOptional":false,"defaultVal":null},{"name":"params","markedOptional":false,"defaultVal":"\"\""},{"name":"waitTillTerminated","markedOptional":false,"defaultVal":"true"}],"functionText":"function executeFile(filepath, params, waitTillTerminated)\r{\r  params = def(params, \"\");\r  waitTillTerminated = def(waitTillTerminated, true);\r  \r  var wscript = Sys.OleObject(\"WScript.Shell\")\r  var exe = wscript.Exec(filepath + params)\r\r  if (waitTillTerminated)\r  {\r    while (exe.Status === 0)\r    {\r      delay(1000, \"Waiting for \" + filepath & \" to finish\")\r    }\r  }\r}","hasResult":false,"scriptName":"SysUtils","examples":["function executeFileEndPoint()\r{\r  executeFile(NOTE_PAD_PATH, \"\", true);\r}"]},{"name":"processexists","lineNo":250,"params":[{"name":"processName","markedOptional":false,"defaultVal":null}],"functionText":"function processexists(processName)\r{\r  var process = Sys.WaitProcess(processName);\r  return process.Exists;\r}","hasResult":true,"scriptName":"SysUtils","examples":["function processexistsUnitTest()\r{\r check(processexists(\"TestComplete\") || processexists(\"TestExecute\"));\r check(processexists(\"TestCompletez\"));\r}"]},{"name":"expectDefect","lineNo":257,"params":[{"name":"defectID","markedOptional":false,"defaultVal":null},{"name":"active","markedOptional":false,"defaultVal":"\"True\""}],"functionText":"function expectDefect(defectID, active)\r{\r  Log.Message(defectExpectedToken() + defectID + activeToken() + def(active, \"True\"));\r}","hasResult":false,"scriptName":"SysUtils","examples":["function expectDefectUnitTest()\r{\r  expectDefect(1234)\r}"]},{"name":"expectDefectUnitTest","lineNo":262,"params":[],"functionText":"function expectDefectUnitTest()\r{\r  expectDefect(1234)\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"endDefect","lineNo":267,"params":[],"functionText":"function endDefect()\r{\r  Log.Message(endDefectExpectedToken());\r}","hasResult":false,"scriptName":"SysUtils","examples":["function endDefectUnitTest()\r{\r  endDefect(1234)\r}"]},{"name":"endDefectUnitTest","lineNo":272,"params":[],"functionText":"function endDefectUnitTest()\r{\r  endDefect(1234)\r}","hasResult":false,"scriptName":"SysUtils","examples":[]},{"name":"def","lineNo":277,"params":[{"name":"arg","markedOptional":false,"defaultVal":"defaultVal"},{"name":"defaultVal","markedOptional":false,"defaultVal":null}],"functionText":"function def(arg, defaultVal) \r{\r  return SysUtilsParent.def(arg, defaultVal)\r}","hasResult":true,"scriptName":"SysUtils","examples":["function defUnitTest()\r{\r\tvar myVar;\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r\r\tvar myVar = \"\";\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r\r\tvar myVar = null;\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r}"]},{"name":"throwEx","lineNo":282,"params":[{"name":"errorMessage","markedOptional":false,"defaultVal":null},{"name":"detailMessage","markedOptional":false,"defaultVal":null}],"functionText":"function throwEx(errorMessage, detailMessage)\r{\r  SysUtilsParent.throwEx(errorMessage, detailMessage);\r}","hasResult":false,"scriptName":"SysUtils","examples":["function throwExEndPoint()\r{\r  throwEx(\"message\", \"detail!!\");\r}"]},{"name":"ensure","lineNo":287,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"message","markedOptional":false,"defaultVal":null}],"functionText":"function ensure(condition, message) \r{\r  SysUtilsParent.ensure(condition, message); \r}","hasResult":false,"scriptName":"SysUtils","examples":["function ensureEndPoint() \r{\r  ensure(true);\r  ensure(false, \"Should throw!\");\r}"]}]},{"name":"SysUtilsEndPoints","path":"C:\\DocTarget\\Utils\\SysUtilsEndPoints.sj","functions":[{"name":"areEqualUnitTest","lineNo":6,"params":[],"functionText":"function areEqualUnitTest() {\r  var result = areEqual(null, null);\r  check(result);\r  \r  result = areEqual(22, 22);\r  check(result);\r  \r  result = areEqual(22, '22');\r  check(!result);\r\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"seekhEndPoint","lineNo":19,"params":[],"functionText":"function seekhEndPoint(){\r // runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var page = singleWebPage();\r  var txt = seek(page, \r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  txt = seekh(page, \r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"findAllChildrenEndPoint","lineNo":33,"params":[],"functionText":"function findAllChildrenEndPoint()\r{\r  var imageArray = findAllChildren(\r    \"Aliases.browser.pageAvalonWhyChooseAvalon.formCountryform.panelPageWrapper.panelMainContainer.panelOuterContainer.panelInnerContainer.panelCtl00Divtopnavouter.panelCtl00Divtopnav\",\r    {\r      alt: 'Why Choose Avalon?',\r      VisibleOnScreen: 'True'\r    //  src: 'http://travel.avalonwaterways.com.au/2013/why-choose-avalon/~/media/Images/Avalon/SecondLevelTabs/menu_01-over.ashx' \r    },\r    2\r  ); \r  checkEqual(1, imageArray.length);\r  imageArray[0].click();\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"scriptContentsUnitTest","lineNo":48,"params":[],"functionText":"function scriptContentsUnitTest(){\r var result = scriptContents(\"SysUtilsEndPoints\");\r check(hasText('scriptContentsUnitTest()', result))\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"scriptFilePathEndPoint","lineNo":53,"params":[],"functionText":"function scriptFilePathEndPoint(){\r  var path = scriptFilePath(\"TestCaseList\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"logErrorEndPoint","lineNo":57,"params":[],"functionText":"function logErrorEndPoint(){\r  logError(\"Hi There\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"logBoldEndPoint","lineNo":61,"params":[],"functionText":"function logBoldEndPoint(){\r  logBold(\"Hi There\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"logEndPoint","lineNo":65,"params":[],"functionText":"function logEndPoint(){\r  log(\"Hi There\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"ensureEndPoint","lineNo":69,"params":[],"functionText":"function ensureEndPoint() \r{\r  ensure(true);\r  ensure(false, \"Should throw!\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"waitAliasEndPoint","lineNo":75,"params":[],"functionText":"function waitAliasEndPoint() {\r  // open ie multitab with close multi tab warnings enabled open 2 tabs\r  var al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  checkFalse(al.Exists);\r  \r  ShowMessage(\"Invoke multi tabs close confirmation now\");\r  \r  al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  check(al.Exists);\r  \r  al = waitAlias('browser.dlgInternetExplorer.btnCloseAllTabs', false);\r  check(al.Exists);\r  \r  ShowMessage(\"Close tab window now - exception should follow\");\r  \r  al = waitAlias('Aliases.browser.dlgInternetExplorer.btnCloseAllTabs', false, 1000);\r  check(al.Exists);\r  \r  al = waitAlias('browser.dlgInternetExplorer.btnCloseAllTabs');\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"testScriptFilesInProjectEndPoint","lineNo":96,"params":[],"functionText":"function testScriptFilesInProjectEndPoint(){\r  var testFilePath = testDataFile(\"projTest.mds.forTesting\"); \r  var result = scriptFilesInProject();\r  result = scriptFilesInProject();\r  result = scriptFilesInProject();\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"defUnitTest","lineNo":103,"params":[],"functionText":"function defUnitTest()\r{\r\tvar myVar;\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r\r\tvar myVar = \"\";\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r\r\tvar myVar = null;\r\tvar deffedVar = def(myVar, 1);\r\tcheckEqual(deffedVar, 1);\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"isNullEmptyOrUndefinedUnitTest","lineNo":118,"params":[],"functionText":"function isNullEmptyOrUndefinedUnitTest()\r{\r\tvar myVar;\r\tcheck(isNullEmptyOrUndefined(myVar));\r\tcheck(isNullEmptyOrUndefined(null));\r\tcheck(isNullEmptyOrUndefined(''));\r\tcheck(isNullEmptyOrUndefined(\"\"));\r\r\tcheck(!isNullEmptyOrUndefined(\"s\"));\r\tcheck(!isNullEmptyOrUndefined(1));\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"hasValueUnitTest","lineNo":130,"params":[],"functionText":"function hasValueUnitTest()\r{\r  var obj, result\r  \r  result = hasValue(obj)\r  check(result)\r  \r  result = hasValue(null)\r  check(result)\r  \r  result = hasValue(\"\")\r  check(result)\r  \r  result = hasValue(\"John\")\r  check(result)\r  \r  result = hasValue(1)\r  check(result)\r  \r  var obj = Array(1, 2, 3)\r  result = hasValue(obj)\r  check(result)\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"existsUnitTest","lineNo":154,"params":[],"functionText":"function existsUnitTest()\r{\r  check(exists(1));\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"existsEndPoint","lineNo":159,"params":[],"functionText":"function existsEndPoint()\r{\r // runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var page = singleWebPage();\r  \r  var txt = findChild(page, \r    {ObjectType: 'Page'});\r  var exist = exists(txt);\r  checkFalse(exist);\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"throwExEndPoint","lineNo":170,"params":[],"functionText":"function throwExEndPoint()\r{\r  throwEx(\"message\", \"detail!!\");\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"isNullOrUndefinedUnitTest","lineNo":176,"params":[],"functionText":"function isNullOrUndefinedUnitTest() \r{\r  var test;\r  check(isNullOrUndefined(test));\r  check(isNullOrUndefined(null));\r  check(!isNullOrUndefined(\"\"));\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"terminateProcessEndPoint","lineNo":186,"params":[],"functionText":"function terminateProcessEndPoint()\r{\r  var counter;\r  for (counter = 0; counter < 10; counter++)\r  {\r    executeFile(NOTE_PAD_PATH, \"\", false);\r  }\r  \r  var notePadProcessName = \"notepad\"; \r  TerminateProcess(notePadProcessName); \r  check(processexists(notePadProcessName));\r \r  //should run without error\r  TerminateProcess(\"BlahhhDoesNotexist\")      \r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"executeFileEndPoint","lineNo":202,"params":[],"functionText":"function executeFileEndPoint()\r{\r  executeFile(NOTE_PAD_PATH, \"\", true);\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"},{"name":"processexistsUnitTest","lineNo":207,"params":[],"functionText":"function processexistsUnitTest()\r{\r check(processexists(\"TestComplete\") || processexists(\"TestExecute\"));\r check(processexists(\"TestCompletez\"));\r}","hasResult":false,"scriptName":"SysUtilsEndPoints"}]},{"name":"SysUtilsGrandParent","path":"C:\\DocTarget\\Utils\\SysUtilsGrandParent.sj","functions":[{"name":"projectScriptFileEncoding","lineNo":0,"params":[],"functionText":"function projectScriptFileEncoding(){return aqFile.ctANSI}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"logError","lineNo":2,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":false,"defaultVal":"message"},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function logError(message, additionalInfo, /* optional */ attr){\r  additionalInfo = def(additionalInfo, message);\r  if (hasValue(attr)) {\r    Log.Error(message, additionalInfo, pmNormal, attr);\r  } \r  else {\r    Log.Error(message, additionalInfo);\r  }\r}","hasResult":false,"scriptName":"SysUtilsGrandParent"},{"name":"log","lineNo":12,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":true,"defaultVal":"message"},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function log(message, /* optional */ additionalInfo, /* optional */ attr){\r  additionalInfo = def(additionalInfo, message);\r  if (hasValue(attr)) {\r    Log.Message(message, additionalInfo, pmNormal, attr);\r  } \r  else {\r    Log.Message(message, additionalInfo);\r  }\r}","hasResult":false,"scriptName":"SysUtilsGrandParent"},{"name":"hasValue","lineNo":22,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function hasValue(arg)\r{\r  var isDefined = !isNullEmptyOrUndefined(arg);\r  if (isDefined){\r    return exists(arg);\r  } \r  else {\r    return false;\r  }\r}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"exists","lineNo":35,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function exists(arg)\r{ \r  var existProperty = true;\r  var doesExist = true;\r  try\r  {\r    doesExist = arg.Exists; \r  }\r  catch (e)\r  {\r    existProperty = false;\r    var message = e.message;\r    var expectedError = (message === \"Object doesn't support this property or method\") || hasText('does not exist', message);\r    if (!expectedError){\r      throwEx(\"exists - unexpected failure: \" + e.message);\r    }\r  }\r \r  if (existProperty && !isNullEmptyOrUndefined(doesExist))\r  {\r    return doesExist;\r  }\r  else\r  {\r    // any object with no exists property is deemed to exist \r    // use hasValue to check if defined or empty or has false exists property\r    return true;\r  }\r}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"def","lineNo":64,"params":[{"name":"arg","markedOptional":false,"defaultVal":null},{"name":"defaultVal","markedOptional":false,"defaultVal":null}],"functionText":"function def(arg, defaultVal) \r{\r  return isNullOrUndefined(arg) ? defaultVal : arg;\r}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"isNullOrUndefined","lineNo":69,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullOrUndefined(arg)\r{\r  return (typeof arg === 'undefined') || arg === null;\r}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"isNullEmptyOrUndefined","lineNo":74,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullEmptyOrUndefined(arg)\r{\r  return isNullOrUndefined(arg) || arg === '';\r}","hasResult":true,"scriptName":"SysUtilsGrandParent"},{"name":"throwEx","lineNo":79,"params":[{"name":"errorMessage","markedOptional":false,"defaultVal":null},{"name":"detailMessage","markedOptional":false,"defaultVal":"errorMessage"}],"functionText":"function throwEx(errorMessage, detailMessage)\r{\r  detailMessage = def(detailMessage, errorMessage);\r  Log.Error(\"Exception - \" + errorMessage, detailMessage);\r\tthrow ({\r\t\tname: \"Exception - \" + errorMessage,\r\t\tmessage: detailMessage\r\t});\r}","hasResult":false,"scriptName":"SysUtilsGrandParent"}]},{"name":"SysUtilsParent","path":"C:\\DocTarget\\Utils\\SysUtilsParent.sj","functions":[{"name":"logError","lineNo":4,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":false,"defaultVal":null},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function logError(message, additionalInfo, /* optional */ attr){\r  SysUtilsGrandParent.logError(message, additionalInfo, attr);\r}","hasResult":false,"scriptName":"SysUtilsParent"},{"name":"projectScriptFileEncoding","lineNo":8,"params":[],"functionText":"function projectScriptFileEncoding(){return SysUtilsGrandParent.projectScriptFileEncoding();}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"log","lineNo":10,"params":[{"name":"message","markedOptional":false,"defaultVal":null},{"name":"additionalInfo","markedOptional":true,"defaultVal":null},{"name":"attr","markedOptional":true,"defaultVal":null}],"functionText":"function log(message, /* optional */ additionalInfo, /* optional */ attr){\r  StringUtilsGrandParent.log(message, additionalInfo, attr);\r}","hasResult":false,"scriptName":"SysUtilsParent"},{"name":"ensure","lineNo":14,"params":[{"name":"condition","markedOptional":false,"defaultVal":null},{"name":"message","markedOptional":false,"defaultVal":null}],"functionText":"function ensure(condition, message) \r{\r  checkWithMainMessagePrefix(condition, \"Ensure Failure \", message, true);\r}","hasResult":false,"scriptName":"SysUtilsParent"},{"name":"def","lineNo":19,"params":[{"name":"arg","markedOptional":false,"defaultVal":"defaultVal"},{"name":"defaultVal","markedOptional":false,"defaultVal":null}],"functionText":"function def(arg, defaultVal) \r{\r  return SysUtilsGrandParent.def(arg, defaultVal);\r}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"hasValue","lineNo":24,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function hasValue(arg)\r{\r return SysUtilsGrandParent.hasValue(arg);\r}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"isNullOrUndefined","lineNo":29,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullOrUndefined(arg)\r{\r  return SysUtilsGrandParent.isNullOrUndefined(arg);\r}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"isNullEmptyOrUndefined","lineNo":34,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function isNullEmptyOrUndefined(arg)\r{\r  return SysUtilsGrandParent.isNullEmptyOrUndefined(arg);\r}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"exists","lineNo":41,"params":[{"name":"arg","markedOptional":false,"defaultVal":null}],"functionText":"function exists(arg)\r{ \r return SysUtilsGrandParent.exists(arg);\r}","hasResult":true,"scriptName":"SysUtilsParent"},{"name":"throwEx","lineNo":46,"params":[{"name":"errorMessage","markedOptional":false,"defaultVal":null},{"name":"detailMessage","markedOptional":false,"defaultVal":null}],"functionText":"function throwEx(errorMessage, detailMessage)\r{\r  SysUtilsGrandParent.throwEx(errorMessage, detailMessage);\r}","hasResult":false,"scriptName":"SysUtilsParent"}]},{"name":"SysUtilsPrivate","path":"C:\\DocTarget\\Utils\\SysUtilsPrivate.sj","functions":[{"name":"findChildNested","lineNo":6,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"wantHighlight","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function findChildNested(container, wantHighlight, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  \r  var hasHighLight = _.isBoolean(wantHighlight);\r  var startArg = hasHighLight ? 2 : 1;\r  var highlight = hasHighLight ? wantHighlight : false;\r  var args = arguments;\r  \r  var result = {Exists: false};\r  var currentUiObject = null;\r  for (var counter = startArg; counter < arguments.length; counter++){\r    if (counter === startArg){\r      currentUiObject = container;\r    }\r    var thisObjOrFunc = arguments[counter];\r    var uiObjValid = hasValue(currentUiObject);\r    var testObjValid = hasValue(thisObjOrFunc);\r    if (uiObjValid && testObjValid){\r      currentUiObject = getNextChild(currentUiObject, thisObjOrFunc, highlight);\r    } \r    else {\r      break;\r    }\r     \r  }\r  \r  if (hasValue(currentUiObject)){\r    result = currentUiObject;\r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"getNextChild","lineNo":38,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"filterObjOrFunc","markedOptional":false,"defaultVal":null},{"name":"wantHighlight","markedOptional":false,"defaultVal":null}],"functionText":"function getNextChild(container, filterObjOrFunc, wantHighlight){\r  var result;\r  if (_.isFunction(filterObjOrFunc)){\r    result = findChildMatchingPredicate(container, filterObjOrFunc);\r  } \r  else {\r    var arPropNames = _.keys(filterObjOrFunc); \r    var arPropValues = _.values(filterObjOrFunc); \r    function isTarget(testObj){\r      testObj = _.isString(testObj) ? waitAlias(testObj) : testObj;\r      var resultObj = testObj.Find(arPropNames, arPropValues, 0);\r      var result = resultObj.Exists;\r      return result;\r    }\r    result = findChildMatchingPredicate(container, isTarget);\r  }\r  \r  if (!isNullOrUndefined(result) && wantHighlight){\r    Sys.HighlightObject(result);\r  }\r  return result;\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"findChildMatchingPredicate","lineNo":61,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"filter","markedOptional":false,"defaultVal":null}],"functionText":"function findChildMatchingPredicate(container, filter){\r  var candidates = [container];\r  var result = null;\r  do {\r    candidates = takeNextGenerationOfObjects(candidates); \r    result = _.find(candidates, filter);\r  }\r  while (isNullOrUndefined(result) && candidates.length > 0);\r  return result;\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"takeNextGenerationOfObjects","lineNo":73,"params":[{"name":"arContainers","markedOptional":false,"defaultVal":null}],"functionText":"function takeNextGenerationOfObjects(arContainers){\r  return _.chain(arContainers)\r        .filter(function(obj){return !isNullOrUndefined(obj)})\r        .map(function(uiObj){return findAllChildren(uiObj, {FullName:'*'}, 1)})\r        .flatten()\r        .value();\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"findChild","lineNo":84,"params":[{"name":"testObjOrAliasStr","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":"20000"},{"name":"refresh","markedOptional":true,"defaultVal":null}],"functionText":"function findChild(testObjOrAliasStr, propValsObj, /* optional */ depth, /* optional */ refresh) {\r  depth = def(depth, 20000); \r  function findChild(testObject, arPropNames, arPropValues, depth, refresh) {\r    var result = testObject.FindChild(arPropNames, arPropValues, depth, refresh);\r    return result; \r  } \r  \r  return findInChildrenShared(findChild, testObjOrAliasStr, propValsObj, depth, refresh);\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"findAllChildren","lineNo":96,"params":[{"name":"testObjOrAliasStr","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":"20000"},{"name":"refresh","markedOptional":true,"defaultVal":null}],"functionText":"function findAllChildren(testObjOrAliasStr, propValsObj, /* optional */ depth, /* optional */ refresh) {\r  depth = def(depth, 20000);\r  function findAll(testObject, arPropNames, arPropValues, depth, refresh) {\r    var resultVbArray = testObject.FindAllChildren(arPropNames, arPropValues, depth, refresh);\r    var result = (new VBArray(resultVbArray)).toArray();\r    return result;  \r  }\r  \r  return findInChildrenShared(findAll, testObjOrAliasStr, propValsObj, depth, refresh);\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"findInChildrenShared","lineNo":109,"params":[{"name":"childFunc","markedOptional":false,"defaultVal":null},{"name":"testObjOrAliasStr","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":"10000"},{"name":"refresh","markedOptional":true,"defaultVal":"true"}],"functionText":"function findInChildrenShared(childFunc, testObjOrAliasStr, propValsObj, /* optional */ depth, /* optional */ refresh) {\r  /* \r    === Defaults same as for TestComplete ==\r      Depth [in]    Optional    Integer Default value: 1    \r      Refresh [in]  Optional    Boolean Default value: True\r  */ \r  depth = def(depth, 10000);\r  refresh = def(refresh, true);\r  \r  var arPropNames = _.keys(propValsObj); \r  var arPropValues = _.values(propValsObj); \r  \r  var testObj = _.isString(testObjOrAliasStr) ? waitAlias(testObjOrAliasStr) : testObjOrAliasStr;\r  var result = childFunc(testObj, arPropNames,arPropValues, depth, refresh);\r  return result;\r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"getScriptNameFromScriptInfo","lineNo":146,"params":[{"name":"scriptInfo","markedOptional":false,"defaultVal":null}],"functionText":"function getScriptNameFromScriptInfo(scriptInfo) {\r  // scriptname: path\r  return _.keys(scriptInfo)[0];   \r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"getScriptPathFromScriptInfo","lineNo":151,"params":[{"name":"scriptInfo","markedOptional":false,"defaultVal":null}],"functionText":"function getScriptPathFromScriptInfo(scriptInfo) {\r  // scriptname: path\r  return _.values(scriptInfo)[0];   \r}","hasResult":true,"scriptName":"SysUtilsPrivate"},{"name":"testFilesNamesOrPaths","lineNo":156,"params":[{"name":"singletonvarAlreadyCalculated","markedOptional":false,"defaultVal":"calculateResult("},{"name":"scriptInfoTransformer","markedOptional":false,"defaultVal":null},{"name":"getScriptFilesMethod","markedOptional":false,"defaultVal":null}],"functionText":"function testFilesNamesOrPaths(singletonvarAlreadyCalculated, scriptInfoTransformer, getScriptFilesMethod){\r  \r function calculateResult(){\r  allFiles = getScriptFilesMethod();\r  return _.chain(allFiles)\r    .filter(\r      function(scriptInfo){\r        var scriptName = getScriptNameFromScriptInfo(scriptInfo);\r        return endsWith(scriptName, 'Test');\r        }\r      )\r    .map(function(scriptInfo)\r    {\r      // scriptname: path\r      return scriptInfoTransformer(scriptInfo); \r    }\r    )\r    .value();\r  }\r  return def(singletonvarAlreadyCalculated, calculateResult());\r}","hasResult":true,"scriptName":"SysUtilsPrivate"}]},{"name":"SysUtilsPrivateEndPoints","path":"C:\\DocTarget\\Utils\\SysUtilsPrivateEndPoints.sj","functions":[{"name":"findChildNestedEndPoint","lineNo":4,"params":[],"functionText":"function findChildNestedEndPoint(){\r // runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var page = singleWebPage();\r  var txt = findChildNested(page, function(obj){return hasText('username', obj.idStr)});\r  delay(1);\r  \r  txt = findChildNested(page, true, function(obj){return hasText('username', obj.idStr)});\r  delay(1);\r  \r  txt = findChildNested(page, true, \r    {ObjectType: 'Page'},\r    function(obj){return hasText('username', obj.idStr)});\r  checkFalse(txt.Exists);\r  \r  txt = findChildNested(page, true, \r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r\r}","hasResult":false,"scriptName":"SysUtilsPrivateEndPoints"}]},{"name":"TestRunnerUtils","path":"C:\\DocTarget\\Utils\\TestRunnerUtils.sj","functions":[{"name":"runLastConfig","lineNo":7,"params":[{"name":"preAcceptMethod","markedOptional":true,"defaultVal":null},{"name":"restartMethod","markedOptional":true,"defaultVal":null},{"name":"simpleLogProcessingMethod","markedOptional":true,"defaultVal":null}],"functionText":"function runLastConfig(/* optional */ preAcceptMethod, /* optional */ restartMethod, /* optional */simpleLogProcessingMethod){\r  var config = getRunConfig();\r  runFromConfig(config, preAcceptMethod, restartMethod, simpleLogProcessingMethod);\r}","hasResult":false,"scriptName":"TestRunnerUtils","examples":["function runLastConfigUnitTest(){\r  runLastConfig();\r}"]},{"name":"runFromConfig","lineNo":12,"params":[{"name":"config","markedOptional":false,"defaultVal":null},{"name":"preAcceptMethod","markedOptional":true,"defaultVal":"defaultPreAccept"},{"name":"restartMethod","markedOptional":true,"defaultVal":"defaultRestart"},{"name":"simpleLogProcessingMethod","markedOptional":true,"defaultVal":null}],"functionText":"function runFromConfig(config,/* optional */ preAcceptMethod, /* optional */ restartMethod, /* optional */simpleLogProcessingMethod){\r  preAcceptMethod = def(preAcceptMethod, defaultPreAccept);\r  restartMethod = def(restartMethod, defaultRestart);\r  \r  // TC Logging Defaults\r  fullyEnableCallStack();\r  updatedDataClasses();\r  \r  \r  // save config to last config file\r  var cfgString = JSON.stringify(config);\r  if (!hasValue(config.name)){\r    logError('Run config has no \"name\" property - all run configs should be named', cfgString);\r  }\r  \r  stringToFile(cfgString, latestConfigFilePath(), projectScriptFileEncoding());\r  \r  var testList = validateGenerateTestList(config, preAcceptMethod);\r  runTestList(testList, config, restartMethod, simpleLogProcessingMethod);\r}","hasResult":false,"scriptName":"TestRunnerUtils","examples":[]},{"name":"runTests","lineNo":33,"params":[{"name":"configFileNoDirOrConfigObj","markedOptional":false,"defaultVal":null},{"name":"preAcceptMethod","markedOptional":false,"defaultVal":null},{"name":"restartMethod","markedOptional":false,"defaultVal":null},{"name":"simpleLogProcessingMethod","markedOptional":false,"defaultVal":null}],"functionText":"function runTests(configFileNoDirOrConfigObj, preAcceptMethod, restartMethod, simpleLogProcessingMethod){\r  \r  var useConfigFile;\r  if (hasValue(configFileNoDirOrConfigObj)){\r    useConfigFile = _.isString(configFileNoDirOrConfigObj);\r    if (useConfigFile) {\r      copyConfigFile(configFileNoDirOrConfigObj);\r    }\r  } \r  else {\r    useConfigFile = true;\r  }\r  // if it is not a string represnting a file then\r  // assume it is a config object\r  if (useConfigFile){\r    runLastConfig(preAcceptMethod, restartMethod, simpleLogProcessingMethod);\r  }\r  else {\r    runFromConfig(configFileNoDirOrConfigObj, preAcceptMethod, restartMethod, simpleLogProcessingMethod);\r  }\r  \r}","hasResult":false,"scriptName":"TestRunnerUtils","examples":["function runTestsUnitTest(){\r  runTests(\"SelectedTests\");\r}"]},{"name":"runTestCaseEndPoint","lineNo":56,"params":[{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":"0"},{"name":"startIfNotRunning","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":"getRunConfig("}],"functionText":"function runTestCaseEndPoint(testCaseID, iteration, startIfNotRunning, runConfig){\r  fullyEnableCallStack();\r  verifyTestCaseIDsUnique();\r  updatedDataClasses();\r  \r  testCaseID = _.isArray(testCaseID) ? testCaseID[0] : testCaseID;\r  iteration = def(iteration, 0);\r  var testScript = getTestScriptForTestID(testCaseID);\r  var testConfig = getConfig(testScript);\r  var dataClass = testConfig.dataClass;\r\r  if (hasValue(dataClass)){\r    ODT.Classes(dataClass).loadIteration(testCaseID, iteration);\r  } else {\r    ensure(iteration === 0, \"Can only run iteration zero on an non data driven test\");\r  }\r  runConfig = def(runConfig, getRunConfig());\r  \r  var dbName = getRestartDB(testScript);\r  if (hasValue(startIfNotRunning)){\r    startIfNotRunning(dbName, runConfig);\r  }\r\r  Runner.CallMethod(testScript + '.testCase', runConfig, testConfig, testCaseID, iteration);\r}","hasResult":false,"scriptName":"TestRunnerUtils","examples":["function runTestCaseEndPointEndPoint(){\r  function startIfNotRunning(){};\r  runTestCaseEndPoint(1, 0, startIfNotRunning);\r}"]},{"name":"defaultPreAccept","lineNo":82,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function defaultPreAccept(runConfig, testConfig){\r  result = hasValue(testConfig['enabled']) ? testConfig['enabled'] : true;\r  \r  // check country\r  if (result) {\r    var runCountries = lwrCountries(runConfig); \r    var testCountries = lwrCountries(testConfig); \r    result = (runCountries === ALL_COUNTRIES) || (testCountries === ALL_COUNTRIES) ||\r      _.intersection(runCountries, testCountries).length > 0;\r  }\r  \r  //dummy run\r  if (result) {\r    var dummyTest = def(testConfig.dummy, false);\r    var dummyRun = def(runConfig.dummy, false);\r    result = dummyTest === dummyRun;\r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtils","examples":["function defaultPreAcceptUnitTest(){\r  var runConfig = {country: 'All'};\r  testConfig = {};\r  var result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'All'};\r  testConfig = {country: 'Aus'};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ']};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'Aus'};\r  testConfig = {country: 'NZ'};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r \r  runConfig = {country: ['GBR','USA']};\r  testConfig = {country: ['Aus', 'NZ']};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r  \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ'], enabled: true};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r  \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ'], enabled: false};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r}"]},{"name":"defaultRestart","lineNo":103,"params":[{"name":"dbName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function defaultRestart(dbName, runConfig){\r  log(\"No restart method - call to restart for db: \" + dbName);\r}","hasResult":false,"scriptName":"TestRunnerUtils","examples":[]}]},{"name":"TestRunnerUtilsEndPoints","path":"C:\\DocTarget\\Utils\\TestRunnerUtilsEndPoints.sj","functions":[{"name":"runTestCaseEndPointEndPoint","lineNo":3,"params":[],"functionText":"function runTestCaseEndPointEndPoint(){\r  function startIfNotRunning(){};\r  runTestCaseEndPoint(1, 0, startIfNotRunning);\r}","hasResult":false,"scriptName":"TestRunnerUtilsEndPoints"},{"name":"runLastConfigUnitTest","lineNo":8,"params":[],"functionText":"function runLastConfigUnitTest(){\r  runLastConfig();\r}","hasResult":false,"scriptName":"TestRunnerUtilsEndPoints"},{"name":"runTestsUnitTest","lineNo":12,"params":[],"functionText":"function runTestsUnitTest(){\r  runTests(\"SelectedTests\");\r}","hasResult":false,"scriptName":"TestRunnerUtilsEndPoints"},{"name":"defaultPreAcceptUnitTest","lineNo":17,"params":[],"functionText":"function defaultPreAcceptUnitTest(){\r  var runConfig = {country: 'All'};\r  testConfig = {};\r  var result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'All'};\r  testConfig = {country: 'Aus'};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ']};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r \r  runConfig = {country: 'Aus'};\r  testConfig = {country: 'NZ'};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r \r  runConfig = {country: ['GBR','USA']};\r  testConfig = {country: ['Aus', 'NZ']};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r  \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ'], enabled: true};\r  result = defaultPreAccept(runConfig, testConfig);\r  check(result);\r  \r  runConfig = {country: 'All'};\r  testConfig = {country: ['Aus', 'NZ'], enabled: false};\r  result = defaultPreAccept(runConfig, testConfig);\r  checkFalse(result);\r}","hasResult":false,"scriptName":"TestRunnerUtilsEndPoints"}]},{"name":"TestRunnerUtilsPrivate","path":"C:\\DocTarget\\Utils\\TestRunnerUtilsPrivate.sj","functions":[{"name":"fullyEnableCallStack","lineNo":8,"params":[],"functionText":"function fullyEnableCallStack(){\r  callStack = Log.CallStackSettings;\r  callStack.EnableStackOnMessage = true;\r  callStack.EnableStackOnWarning = true;\r  callStack.EnableStackOnError = true;\r  callStack.EnableStackOnCheckpoint = true;\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getRunConfig","lineNo":16,"params":[],"functionText":"function getRunConfig(){\r  var config = stringFromFile(latestConfigFilePath(), projectScriptFileEncoding());\r  return JSON.parse(config);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"scriptHasID","lineNo":21,"params":[{"name":"scriptName","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null}],"functionText":"function scriptHasID(scriptName, testCaseID){\r  var testcases = getTestCaseIds(scriptName);\r  return _.contains(testcases, testCaseID);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getTestScriptForTestID","lineNo":26,"params":[{"name":"testCaseID","markedOptional":false,"defaultVal":null}],"functionText":"function getTestScriptForTestID(testCaseID){\r  function scriptHasTestCaseID(scriptName){\r    return scriptHasID(scriptName, testCaseID)\r  }\r  var testCaseFiles = testFilesInProject();\r  var scriptWithTestID = _.find(testCaseFiles, scriptHasTestCaseID);\r  ensure(hasValue(scriptWithTestID), \"Can't find test of ID: \" + testCaseID);\r  return scriptWithTestID;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getTestCaseIds","lineNo":36,"params":[{"name":"scriptName","markedOptional":false,"defaultVal":null}],"functionText":"function getTestCaseIds(scriptName){\r  var testConfig = getConfig(scriptName);\r  var testcases = testCasesArray(testConfig, scriptName);\r  return testcases;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getTestCaseIdsEndPoint","lineNo":42,"params":[],"functionText":"function getTestCaseIdsEndPoint() {\r  var testCases = getTestCaseIds('Dummy3Test');\r  checkEqual([2, 3], testCases); \r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"verifyTestCaseIDsUnique","lineNo":47,"params":[{"name":"projTestCaseFiles","markedOptional":true,"defaultVal":"testFilesInProject("}],"functionText":"function verifyTestCaseIDsUnique(/* optional */ projTestCaseFiles){\r  Indicator.PushText('Verifying test case Ids are unique');\r  projTestCaseFiles = def(projTestCaseFiles, testFilesInProject());\r\r  var duplicateIDs = _.chain(projTestCaseFiles).\r              map(getTestCaseIds).\r              flatten().\r              groupBy(function(id){return id;}).\r              filter(function(idArray){return idArray.length > 1;}).\r              map(function(idArray){return idArray[0]}).\r              value();\r  \r  ensure(duplicateIDs.length === 0, 'Duplicate test case IDs detected - please remove duplicate test case ids before continuing: ' + arrayToString(duplicateIDs));\r  Indicator.PopText();\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"verifyTestCaseIDsUniqueUnitTest","lineNo":63,"params":[],"functionText":"function verifyTestCaseIDsUniqueUnitTest() {\r  verifyTestCaseIDsUnique()\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"runTestList","lineNo":67,"params":[{"name":"testList","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"restartMethod","markedOptional":false,"defaultVal":null},{"name":"simpleLogProcessingMethod","markedOptional":true,"defaultVal":"defaultSimpleLogProcessing"}],"functionText":"function runTestList(testList, runConfig, restartMethod, /* optional */ simpleLogProcessingMethod){\r  var dbName,\r  lastTestSinceRestartCompletedNormally = true,\r  simpleLogProcessingMethod = def(simpleLogProcessingMethod, defaultSimpleLogProcessing);\r  \r  function restartResetFlag(){\r    restartMethod(dbName);\r    lastTestSinceRestartCompletedNormally = true;\r  }\r  \r  logBold(\"====== Starting Test Run: \" +  def(runConfig.name, 'Unnamed') + \" ======\");\r  try\r  {\r    _.forEach(testList,\r      function(testItem){\r        if(isRestart(testItem)){\r          dbName = Trim(subStrAfter(testItem, 'DB:'));\r          logBold(\"====== Restarting: \" + dbName + \" ======\");\r          restartResetFlag();\r        }\r        else\r        {\r          if (!lastTestSinceRestartCompletedNormally){\r            logError(\"=== Restarting due to exception in test: \" + dbName + \" ===\");\r            restartResetFlag();\r          }\r          lastTestSinceRestartCompletedNormally = runTest(testItem, runConfig, restartMethod, dbName);\r        }\r      }\r    );\r  }\r  finally\r  {\r    saveProcessSimplifiedLog(runConfig, simpleLogProcessingMethod);\r  }\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"testCasesArray","lineNo":104,"params":[{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testItem","markedOptional":false,"defaultVal":null}],"functionText":"function testCasesArray(testConfig, testItem){\r  var testCases = testConfig.testCase;\r  ensure(hasValue(testCases), \"No test case defined in \" + testItem);\r  return  _.isArray(testCases) ? testCases : [testCases];\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"runTest","lineNo":110,"params":[{"name":"testItem","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function runTest(testItem, runConfig){\r  var result = true;\r  try\r  {\r    var testConfig = getConfig(testItem);\r    var wantRun = acceptClientMachine(testItem, runConfig, testConfig); \r    \r    if (wantRun) { \r      logStartOfTest(testItem, testConfig, runConfig);\r      var testCases = testCasesArray(testConfig, testItem);\r      _.forEach(\r          testCases, \r          function(testCaseID){runTestID(testItem, testCaseID, runConfig, testConfig);}\r        );\r   } \r   else {\r    log('Test Skipped: acceptClientMachine() returned false');\r   }\r   \r  }\r  catch (e)\r  {\r    result = false;\r    Indicator.Clear();\r    logError(\"Exception Encountered in Test - \" + testItem + ' ERROR: ' + e.description, e.description);\r  }\r  finally\r  {\r    Log.PopLogFolder();\r  }\r  \r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"runTestID","lineNo":145,"params":[{"name":"testItem","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function runTestID(testItem, testCaseID, runConfig, testConfig) {\r  var dataClass = testConfig.dataClass;\r  if (hasValue(dataClass)){\r    runDataDrivenTest(testItem, testCaseID, runConfig, testConfig, dataClass);\r  } else {\r    runTestIteration(testItem, testCaseID, null, runConfig, testConfig, null);\r  }\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"logStartOfTest","lineNo":154,"params":[{"name":"testItem","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function logStartOfTest(testItem, testConfig, runConfig){\r  var configInfoMessage = 'testConfig' +\r    newLine() + \r    JSON.stringify(testConfig) +\r    newLine() + \r    newLine() + \r    'runConfig' +\r    newLine() + \r    JSON.stringify(runConfig);\r  var folderMessage = \"Test Case: \" + testItem + ' - When ' + testConfig.when + ' then ' +  testConfig.then;\r  var attr = Log.CreateNewAttributes();\r  attr.Bold = true;\r  Log.PushLogFolder(Log.CreateFolder(folderMessage, \r    aqString.Replace(folderMessage, ' - When', newLine() + 'When') + newLine() + newLine() + configInfoMessage,\r    pmNormal, attr));\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"runDataDrivenTest","lineNo":172,"params":[{"name":"testItem","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"dataClassName","markedOptional":false,"defaultVal":null}],"functionText":"function runDataDrivenTest(testItem, testCaseID, runConfig, testConfig, dataClassName){\r  var dataClass = ODT.Classes(dataClassName);\r  ensure(hasValue(dataClass), testItem + \" - dataClass:\" + dataClassName + \" does not exist!\");\r  \r  var hasRun = false;\r  dataClass.resetIterator();\r  while(dataClass.next(testCaseID)){\r   hasRun = true; \r   runTestIteration(testItem, testCaseID, dataClass.currentIndex, runConfig, testConfig, dataClass);\r  }\r  ensure(hasRun, testItem + \" - dataClass:\" + dataClassName + \" testCase: \" + testCaseID + \" does not exist!\");\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"runTestIteration","lineNo":185,"params":[{"name":"testItem","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"dataClass","markedOptional":false,"defaultVal":null}],"functionText":"function runTestIteration(testItem, testCaseID, iteration, runConfig, testConfig, dataClass){\r  if (acceptIteration(testItem, runConfig, testConfig,  testCaseID, iteration)) {\r    var message = testItem + testCaseIdToken() + testCaseID;\r    if (hasValue(dataClass)){\r      message = message + ' dataClass: ' + dataClass.Name + iterationToken() + iteration;\r    }\r  \r    var logMessage = startTestToken() + message;\r    logItalic('====== ' + logMessage + ' - When ' + testConfig.when + ' then ' +  testConfig.then + ' ======');\r  \r    Indicator.PushText(message);\r    try\r    {\r      Runner.CallMethod(testItem + '.testCase', runConfig, testConfig, testCaseID, iteration);\r    }\r    catch(e){\r      logError(\"Exception Encountered in Test - \" + testItem + ' ERROR: ' + e.description, e.description);\r    }\r    finally\r    {\r      logItalic(endTestToken());\r      Indicator.Clear();\r    }\r\r  }\r  else {\r    log(\"====== Test iteration not run: acceptIteration returned false: \" + testItem + \": \" + iteration + \" ======\");\r  }\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"testCaseListContent","lineNo":215,"params":[],"functionText":"function testCaseListContent(){\r  var testListPath = scriptFilePath(\"TestCaseList\");\r  var arTestCaseListContent = arrayFromFile(testListPath, projectScriptFileEncoding());\r  return arTestCaseListContent;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"allTestCaseItems","lineNo":221,"params":[],"functionText":"function allTestCaseItems(){\r  var arTestCaseListContent = testCaseListContent();\r  var arAllTestCaseItems = _.filter(\r      arTestCaseListContent,\r      isTestOrRestart\r      );\r  return arAllTestCaseItems;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"isTestOrRestart","lineNo":231,"params":[{"name":"item","markedOptional":false,"defaultVal":null}],"functionText":"function isTestOrRestart(item){\r  return isDB(item) || isUseUnit(item);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"isDB","lineNo":235,"params":[{"name":"item","markedOptional":false,"defaultVal":null}],"functionText":"function isDB(item){\r  return startsWith(item, '//DB:');\r}\r\rfunction extractDB(str){\r  var result = subStrAfter(str, '//DB:');\r  return Trim(result);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"isUseUnit","lineNo":244,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isUseUnit(str){\r  return startsWith(str, '//USEUNIT');\r}\r\rfunction extractScriptName(str){\r  var result = subStrAfter(str, '//USEUNIT');\r  return Trim(result);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"validateGenerateTestList","lineNo":253,"params":[{"name":"config","markedOptional":false,"defaultVal":null},{"name":"preAcceptMethod","markedOptional":false,"defaultVal":null}],"functionText":"function validateGenerateTestList(config, preAcceptMethod){\r  var testCaseFilesInProject = testFilesInProject();\r  var arAllTestCaseItems = allTestCaseItems();\r  var arTestCaseListContent = testCaseListContent();\r\r  var arAllListedTestFileNames = _.chain(arAllTestCaseItems)\r    .filter(isUseUnit)\r    .map(extractScriptName)\r    .value();\r   \r  var configInfo = '--- Run Config ---' + newLine() + JSON.stringify(config) + newLine() + newLine() + '--- Test Items ---' +  newLine();\r  Indicator.PushText(\"Validating test list\");\r  var testListPath = scriptFilePath(\"TestCaseList\");\r  validateTestList(testCaseFilesInProject, arAllListedTestFileNames, arTestCaseListContent, testListPath);\r  Log.Message('Test Items Before PreAccept / Accept', configInfo + arAllTestCaseItems.join(newLine()));\r \r  Indicator.PushText(\"Filtering for first level accept\");\r  var result = filterTestListForInConfigAccepted(arAllTestCaseItems, config, preAcceptMethod);\r  Log.Message('Test Items After PreAccept / Accept', configInfo + result.join(newLine()));\r    \r  Indicator.PushText(\"Removing duplicate restarts\");\r  result = removeDuplicateRestarts(result);\r  log('Test Items After Remove Duplicate Restarts', configInfo + result.join(newLine()));\r  \r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getRestartDB","lineNo":280,"params":[{"name":"testScript","markedOptional":false,"defaultVal":null}],"functionText":"function getRestartDB(testScript){\r  var arAllTestItems = allTestCaseItems();\r  arAllTestItems = arAllTestItems.reverse();\r  var length = arAllTestItems.length;\r  var testScriptFound = false;\r  result = '';\r  \r  for (var counter = 0; counter < length; counter++) {\r    var item = arAllTestItems[counter];\r    if (!testScriptFound && isUseUnit(item)) { \r      var script = extractScriptName(item);\r      testScriptFound = sameText(script, testScript);\r    } \r    else if (testScriptFound && isDB(item)) {\r      result = extractDB(item);\r      break;\r    }\r  }\r  \r  ensure(hasValue(result), 'No restart item found for: ' + testScript);\r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getRestartDBEndPoint","lineNo":303,"params":[],"functionText":"function getRestartDBEndPoint() {\r  var result = getRestartDB('Dummy3Test');\r  checkEqual('Performance', result);\r  \r  result = getRestartDB('Dummy4Test');\r  checkEqual('Default', result);\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"unitValidateGenerateTestList","lineNo":311,"params":[],"functionText":"function unitValidateGenerateTestList(){\r  var result = validateGenerateTestList();\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"isRestart","lineNo":315,"params":[{"name":"str","markedOptional":false,"defaultVal":null}],"functionText":"function isRestart(str){\r  return hasValue(str) && startsWith(str, 'DB:');\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"filterTestListForInConfigAccepted","lineNo":319,"params":[{"name":"arAllTestCaseItems","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"preAcceptMethod","markedOptional":false,"defaultVal":null}],"functionText":"function filterTestListForInConfigAccepted(arAllTestCaseItems, runConfig, preAcceptMethod){\r  var result;\r  // remove comments from start of line  \r  var testCaseItems = _.map(arAllTestCaseItems,\r    function(str){\r      str = aqString.Replace(str, '//USEUNIT', '');\r      str = aqString.Replace(str, '//DB:', 'DB:');\r      return Trim(str);\r    });\r   \r  // will return an array of test names or all, \r  //or not be defined\r  var testSpec = runConfig.tests;\r  if (_.isArray(testSpec)) {\r    //array to hash testName: true\r    var testSpecObj = {};\r    _.forEach(testSpec, \r      function(str){\r        testSpecObj[str] = true;\r      }\r    );\r      \r    result = _.filter(testCaseItems,\r    function(str){\r      return isRestart(str) || testSpecObj[str];\r    });\r  }\r  else\r  {\r    result = testCaseItems;\r  }\r  \r  result = filterForPreAcceptAndAcceptTest(result, preAcceptMethod, runConfig);\r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"filterForPreAcceptAndAcceptTest","lineNo":355,"params":[{"name":"testItems","markedOptional":false,"defaultVal":null},{"name":"preAcceptMethod","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function filterForPreAcceptAndAcceptTest(testItems, preAcceptMethod, runConfig){\r  return _.filter(testItems,\r      function(testItem){\r        if (isRestart(testItem)) {\r          return true;\r        }\r        else\r        {\r          var testConfig = getConfig(testItem);\r          var result = preAcceptMethod(runConfig, testConfig);\r          if (result){\r            result = testAccepted(testItem, runConfig, testConfig);\r          }\r          return result;\r        }\r      }\r  )\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"propsArrayToObject","lineNo":374,"params":[{"name":"props","markedOptional":false,"defaultVal":null}],"functionText":"function propsArrayToObject(props){\r  var result = {},\r  propName, propValue;\r  _.each(props, function(str){\r    str = trimChars(str, [',']);\r    var bisected = bisect(str, ':');\r    result[bisected.prefix] = bisected.suffix;\r  });\r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getConfig","lineNo":385,"params":[{"name":"testScriptName","markedOptional":false,"defaultVal":null}],"functionText":"function getConfig(testScriptName){\r  var configMethodName = testScriptName + '.config';\r  return Runner.CallMethod(configMethodName);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"getConfigEndPoint","lineNo":390,"params":[],"functionText":"function getConfigEndPoint(){\r  var cfg = getConfig(\"CheckTabsTest\")  \r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"testAccepted","lineNo":394,"params":[{"name":"testName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function testAccepted(testName, runConfig, testConfig){\r return boolScriptMethodDefaultTrue(testName, 'acceptTest', runConfig, testConfig);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"acceptIteration","lineNo":399,"params":[{"name":"testName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function acceptIteration(testName, runConfig, testConfig,  testCaseID, iteration){\r return boolScriptMethodDefaultTrue(testName, 'acceptIteration', runConfig, testConfig,  testCaseID, iteration);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"acceptClientMachine","lineNo":403,"params":[{"name":"testName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptClientMachine(testName, runConfig, testConfig){\r return boolScriptMethodDefaultTrue(testName, 'acceptClientMachine', runConfig, testConfig);\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"boolScriptMethodDefaultTrue","lineNo":407,"params":[{"name":"testName","markedOptional":false,"defaultVal":null},{"name":"methodName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function boolScriptMethodDefaultTrue(testName, methodName, runConfig, testConfig,  testCaseID, iteration){\r  var result;\r  try\r  {\r    result = Runner.CallMethod(testName + '.' + methodName, runConfig, testConfig,  testCaseID, iteration);\r  }\r  catch (e)\r  {\r    if (!hasText('Unable to find the specified element.', e.message)){\r      throwEx(e.message);\r  }\r    result = true;\r  }\r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"removeDuplicateRestarts","lineNo":424,"params":[{"name":"filteredTestCaseItems","markedOptional":false,"defaultVal":null}],"functionText":"function removeDuplicateRestarts(filteredTestCaseItems){\r  var testCasesDuplicateRestartsRemoved = [];\r  var thisItem, nextItem,\r  pushed = false;\r  for(var counter = filteredTestCaseItems.length - 1; counter > -1; counter--){\r    thisItem = filteredTestCaseItems[counter];\r    if (!isRestart(thisItem) || (!isRestart(nextItem) && pushed)) {\r      testCasesDuplicateRestartsRemoved.push(thisItem);\r      pushed = true;\r    }\r    nextItem = thisItem;\r  }\r  var result = testCasesDuplicateRestartsRemoved.reverse();\r  return result;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"copyConfigFile","lineNo":441,"params":[{"name":"configFileNoDir","markedOptional":false,"defaultVal":null}],"functionText":"function copyConfigFile(configFileNoDir){\r  configFileNoDir = aqFileSystem.GetFileNameWithoutExtension(configFileNoDir) + '.json';\r  var src = configSourceFile(configFileNoDir),\r  dst = latestConfigFilePath(),\r  copyResult = aqFileSystem.CopyFile(src, dst, false);\r  ensure(copyResult, \"Copy config file failed \" + src + \" => \" + dst + \" - Check source file exists and dest file is not read only\", true);  \r  return dst\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"copyConfigFileEndPoint","lineNo":450,"params":[],"functionText":"function copyConfigFileEndPoint(){\r  copyConfigFile('default');\r  copyConfigFile('noExist');\r}","hasResult":false,"scriptName":"TestRunnerUtilsPrivate"},{"name":"isRunnningInInteractiveMode","lineNo":455,"params":[],"functionText":"function isRunnningInInteractiveMode() {\r  return BuiltIn.ParamCount() === 0;\r}","hasResult":true,"scriptName":"TestRunnerUtilsPrivate"},{"name":"validateTestList","lineNo":459,"params":[{"name":"testCaseFilesInProject","markedOptional":false,"defaultVal":null},{"name":"arAllListedTestFileNames","markedOptional":false,"defaultVal":null},{"name":"arTestCaseListContent","markedOptional":false,"defaultVal":null},{"name":"testListPath","markedOptional":false,"defaultVal":null}],"scriptName":"TestRunnerUtilsPrivate"}]},{"name":"UnderScoreJSUtils","path":"C:\\DocTarget\\Utils\\UnderScoreJSUtils.sj","functions":[{"name":"documentationStub","lineNo":10,"params":[],"functionText":"function documentationStub(){\r\r}","hasResult":false,"scriptName":"UnderScoreJSUtils","examples":[]}]},{"name":"WebUtils","path":"C:\\DocTarget\\Utils\\WebUtils.sj","functions":[{"name":"isMozilla","lineNo":5,"params":[{"name":"browser","markedOptional":false,"defaultVal":null}],"functionText":"function isMozilla(browser){\r  return (aqString.Find(browser.FullName, 'Process(\"firefox\"', 0, false) !=-1);\r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"backClick","lineNo":13,"params":[{"name":"browserName","markedOptional":false,"defaultVal":null}],"functionText":"function backClick(browserName){\r  var browser = browserFromName(browserName); \r  var page = singleWebPage(browserName);\r  if (isMozilla(browser)){\r    page.back();\r  }  \r  else { \r    page.GoBack();\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"findChildInPage","lineNo":24,"params":[{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":null},{"name":"refresh","markedOptional":true,"defaultVal":null},{"name":"waitPage","markedOptional":true,"defaultVal":null}],"functionText":"function findChildInPage(propValsObj, /* optional */ depth, /* optional */ refresh, /* optional */ waitPage) {\r  function findChildFunc(page, propValsMap, searchDepth, wantRefresh){\r    return findChild(page, propValsMap, searchDepth, wantRefresh);\r  }\r  return executeFindChildFunc(findChildFunc, propValsObj, depth, refresh, waitPage);\r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"findAllChildrenInPage","lineNo":31,"params":[{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":null},{"name":"refresh","markedOptional":true,"defaultVal":null},{"name":"waitPage","markedOptional":true,"defaultVal":null}],"functionText":"function findAllChildrenInPage(propValsObj, /* optional */ depth, /* optional */ refresh, /* optional */ waitPage){\r  function findChildFunc(page, propValsMap, searchDepth, wantRefresh){\r    return findAllChildren(page, propValsMap, searchDepth, wantRefresh);\r  }\r  return executeFindChildFunc(findChildFunc, propValsObj, depth, refresh, waitPage);\r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"extractMailToFromHref","lineNo":38,"params":[{"name":"href","markedOptional":false,"defaultVal":"''"}],"functionText":"function extractMailToFromHref(href){\r  href = def(href,'');\r  href = aqString.Trim(aqString.ToLower(href));\r  var result = subStrAfter(href,':');\r  if (hasText('?', result)) {\r    result = subStrBefore(result, '?');\r  } \r  return result;\r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"browserNameIE","lineNo":59,"params":[],"functionText":"function browserNameIE(){\r  return WebUtilsPrivate.browserNameIE(); \r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"browserNameFireFox","lineNo":63,"params":[],"functionText":"function browserNameFireFox(){\r  return WebUtilsPrivate.browserNameFireFox(); \r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"browserNameChrome","lineNo":67,"params":[],"functionText":"function browserNameChrome(){\r  return WebUtilsPrivate.browserNameChrome(); \r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"browserNameDefault","lineNo":71,"params":[],"functionText":"function browserNameDefault(){\r  return WebUtilsPrivate.browserNameDefault(); \r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"singleWebPage","lineNo":75,"params":[{"name":"browserName","markedOptional":true,"defaultVal":null}],"functionText":"function singleWebPage( /* optional */ browserName)\r{\r  return WebUtilsPrivate.singleWebPage(browserName);\r}","hasResult":true,"scriptName":"WebUtils","examples":["function singleWebPageEndPoint() \r{\r  var page = singleWebPage();\r  Sys.HighlightObject(page);\r}"]},{"name":"seekInPage","lineNo":81,"params":[{"name":"browserName","markedOptional":true,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function seekInPage(/* optional */ browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  return runSeekFunction(seek, browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7);\r}","hasResult":true,"scriptName":"WebUtils","examples":["function seekInPageEndPoint(){\r//  runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var txt = seekInPage(\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  var txt = seekInPage(\r    browserNameIE(),\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}"]},{"name":"seekInPageh","lineNo":85,"params":[{"name":"browserName","markedOptional":true,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function seekInPageh(/* optional */ browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  return runSeekFunction(seekh, browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7);\r}","hasResult":false,"scriptName":"WebUtils","examples":["function seekInPagehEndPoint(){\r//  runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var txt = seekInPageh(\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  var txt = seekInPageh(\r    browserNameIE(),\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}"]},{"name":"waitBrowserMainPage","lineNo":89,"params":[{"name":"browserName","markedOptional":true,"defaultVal":null}],"functionText":"function waitBrowserMainPage( /* optional */ browserName)\r{\r  var thisPage = singleWebPage(browserName);\r  thisPage.Wait();\r  return thisPage;\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"closeBrowser","lineNo":97,"params":[{"name":"browserName","markedOptional":true,"defaultVal":"\"*\""}],"functionText":"function closeBrowser( /* optional */ browserName)\r{ \r  browserName = def(browserName, \"*\")\r  var browser = Sys.WaitBrowser(browserName);\r  var result = browser.Exists;\r  if (result) {\r    browser.Close();\r    closeIEMultTabsWarning();\r    if (browser.Exists){\r      browser.Terminate();\r    }\r    // keep closing until all closed\r    closeBrowser(browserName);\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"crossBrowserTest","lineNo":113,"params":[{"name":"startingUrl","markedOptional":false,"defaultVal":null},{"name":"func","markedOptional":false,"defaultVal":null},{"name":"param0","markedOptional":false,"defaultVal":null},{"name":"param1","markedOptional":false,"defaultVal":null},{"name":"param2","markedOptional":false,"defaultVal":null},{"name":"param3","markedOptional":false,"defaultVal":null},{"name":"param4","markedOptional":false,"defaultVal":null},{"name":"param5","markedOptional":false,"defaultVal":null},{"name":"param6","markedOptional":false,"defaultVal":null},{"name":"param7","markedOptional":false,"defaultVal":null},{"name":"param8","markedOptional":false,"defaultVal":null},{"name":"param9","markedOptional":false,"defaultVal":null}],"functionText":"function crossBrowserTest(startingUrl, func, param0, param1, param2, param3, param4, param5, param6, param7, param8, param9)\r{\r  var counter;\r  for(counter = 0; counter < Browsers.Count; counter++)\r  {\r    var thisBrowser = Browsers.Item(counter);\r    thisBrowser.Run(startingUrl);\r    func(param0, param1, param2, param3, param4, param5, param6, param7, param8, param9);\r    closeBrowser();\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"closeIEMultTabsWarning","lineNo":125,"params":[],"functionText":"function closeIEMultTabsWarning()\r{\r  var closeTabsButton = waitAlias(\"Aliases.browser.dlgInternetExplorer.btnCloseAllTabs\", false, 1000);\r  if (closeTabsButton.Exists) {\r    closeTabsButton.ClickButton();\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"defaultBrowser","lineNo":133,"params":[],"functionText":"function defaultBrowser(){\r  return btIExplorer;\r}","hasResult":true,"scriptName":"WebUtils","examples":[]},{"name":"runUrl","lineNo":137,"params":[{"name":"url","markedOptional":false,"defaultVal":null},{"name":"browserItem","markedOptional":true,"defaultVal":"defaultBrowser("}],"functionText":"function runUrl(url, /* optional */ browserItem){\r  browserItem = def(browserItem, defaultBrowser());\r  Browsers.Item(browserItem).Run(url); \r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"reopenBrowser","lineNo":142,"params":[{"name":"url","markedOptional":false,"defaultVal":null},{"name":"browserItem","markedOptional":true,"defaultVal":null}],"functionText":"function reopenBrowser(url, /* optional */ browserItem){\r  closeBrowser();\r  runUrl(url, browserItem);\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"findBrokenLinks","lineNo":149,"params":[{"name":"container","markedOptional":false,"defaultVal":null},{"name":"linkPreCheckFuncFunction","markedOptional":false,"defaultVal":null},{"name":"responseTextCheckFunc","markedOptional":false,"defaultVal":null}],"functionText":"function findBrokenLinks(container, linkPreCheckFuncFunction, responseTextCheckFunc)\r{\r  // Obtains the links\r  var links = findAllChildren(container, {Name: 'Link*', VisibleOnScreen: 'True'});\r  \r  var linksCount = links.length;\r  \r  if (linksCount > 0)\r  {\r    // Searches for broken links\r    for (var counter = 0; counter < linksCount; counter++)\r    {\r      var linkObj = links[counter];\r      verifyLinkedObject(linkObj, linkPreCheckFuncFunction, responseTextCheckFunc);\r    }\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"findMainPageBrokenLinks","lineNo":167,"params":[{"name":"linkPreCheckFuncFunction","markedOptional":false,"defaultVal":null},{"name":"responseTextCheckFunc","markedOptional":false,"defaultVal":null}],"functionText":"function findMainPageBrokenLinks(linkPreCheckFuncFunction, responseTextCheckFunc)\r{\r  var page = singleWebPage();\r  findBrokenLinks(page, linkPreCheckFuncFunction, responseTextCheckFunc);\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"verifyLinkedObject","lineNo":175,"params":[{"name":"linkedTestObj","markedOptional":false,"defaultVal":null},{"name":"linkPreCheckFuncFunction","markedOptional":false,"defaultVal":null},{"name":"responseTextCheckFunc","markedOptional":false,"defaultVal":null}],"functionText":"function verifyLinkedObject(linkedTestObj, linkPreCheckFuncFunction, responseTextCheckFunc) {\r  var link = linkedTestObj.href;\r  var messagePrefix = \"Link: \" + link + ': '\r  var error = {message: '', description: '', hasError: function(){return hasValue(error.message)}}\r  try\r  {\r    responseTextCheckFunc = def(responseTextCheckFunc, defaultresponseTextCheckFunc);\r    linkPreCheckFuncFunction = def(linkPreCheckFuncFunction, defaultlinkPreCheckFuncFunction);\r    var wantLinkCheck = linkPreCheckFuncFunction(linkedTestObj, error);\r    var status = wantLinkCheck ? '' : 'No Status Code - Link Precheck Determined Not to Check Link - ';\r    \r    if (wantLinkCheck) {\r      var httpObj = getHttpResponse(link, error)\r      if(!error.hasError()) {\r        status = httpObj.status; \r        var responseText = httpObj.responseText; \r        verifyStatusCode(status, messagePrefix, responseText, responseTextCheckFunc, error);\r      }\r    }\r   }\r  catch (e)\r  {\r    error.message = 'Exception encountered while testing link: ' + link + ' - ' + e.description;\r    error.description = 'Exception encountered while testing link: ' + link + newLine() + e.description + newLine() + e.message;\r  }\r\r  result = !error.hasError();\r  if (result) {\r    logCheckPoint(messagePrefix + ' is valid - status code: ' + status, responseText);\r  } else {\r    highLightLinkLogError(linkedTestObj, error);\r  }\r}","hasResult":false,"scriptName":"WebUtils","examples":[]},{"name":"getHttpResponse","lineNo":209,"params":[{"name":"link","markedOptional":false,"defaultVal":null},{"name":"error","markedOptional":false,"defaultVal":null}],"functionText":"function getHttpResponse(link, error) {\r  var httpObj = Sys.OleObject(\"MSXML2.XMLHTTP\");\r  // not asynchronous\r  httpObj.open(\"GET\", link, true);\r  httpObj.send();\r\r  var waitCounter = 0;\r  while (httpObj.readyState !== 4 && waitCounter < 100){\r    Delay(100, 'Waiting for http response from: ' + link);\r    waitCounter++;\r  }\r      \r  var isReady = httpObj.readyState === 4; \r  if (!isReady){\r    error.message = messagePrefix + \" timed out.\";\r  }\r\r  return httpObj;\r}","hasResult":true,"scriptName":"WebUtils","examples":[null]}]},{"name":"WebUtilsEndPoints","path":"C:\\DocTarget\\Utils\\WebUtilsEndPoints.sj","functions":[{"name":"seekInPageEndPoint","lineNo":3,"params":[],"functionText":"function seekInPageEndPoint(){\r//  runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var txt = seekInPage(\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  var txt = seekInPage(\r    browserNameIE(),\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}","hasResult":false,"scriptName":"WebUtilsEndPoints"},{"name":"seekInPagehEndPoint","lineNo":17,"params":[],"functionText":"function seekInPagehEndPoint(){\r//  runUrl('http://support.smartbear.com/samples/testcomplete9/weborders/')\r  var txt = seekInPageh(\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r  \r  var txt = seekInPageh(\r    browserNameIE(),\r    {ObjectType: 'Form'},\r    function(obj){return hasText('username', obj.idStr)});\r  check(txt.Exists);\r}","hasResult":false,"scriptName":"WebUtilsEndPoints"},{"name":"getHttpResponseEndPoint","lineNo":31,"params":[],"scriptName":"WebUtilsEndPoints"}]},{"name":"WebUtilsPrivate","path":"C:\\DocTarget\\Utils\\WebUtilsPrivate.sj","functions":[{"name":"runSeekFunction","lineNo":2,"params":[{"name":"seekFunction","markedOptional":false,"defaultVal":null},{"name":"browserName","markedOptional":true,"defaultVal":null},{"name":"objOrPredicate1","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate2","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate3","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate4","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate5","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate6","markedOptional":false,"defaultVal":null},{"name":"objOrPredicate7","markedOptional":false,"defaultVal":null}],"functionText":"function runSeekFunction(seekFunction, /* optional */ browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7){\r  var hasBrowserParam = _.isString(browserName);\r  var browser = hasBrowserParam ? browserName : '*';\r  var container = singleWebPage(browserName);\r  return (hasBrowserParam \r    ? seekFunction(container, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7)\r    // if does not have browsername then browserName is really objOrPredicate1 \r    : seekFunction(container, browserName, objOrPredicate1, objOrPredicate2, objOrPredicate3, objOrPredicate4, objOrPredicate5, objOrPredicate6, objOrPredicate7));\r}","hasResult":true,"scriptName":"WebUtilsPrivate"},{"name":"browserFromName","lineNo":12,"params":[{"name":"browserName","markedOptional":false,"defaultVal":"\"*\""}],"functionText":"function browserFromName(browserName){\r  browserName = def(browserName, \"*\");\r  return Sys.WaitBrowser(browserName); \r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"defaultlinkPreCheckFuncFunction","lineNo":21,"params":[{"name":"linkObj","markedOptional":false,"defaultVal":null},{"name":"error","markedOptional":false,"defaultVal":null}],"functionText":"function defaultlinkPreCheckFuncFunction(linkObj, error) {\r  var result = true;\r  return result;\r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"highLightLinkLogError","lineNo":26,"params":[{"name":"linkObj","markedOptional":false,"defaultVal":null},{"name":"error","markedOptional":false,"defaultVal":null}],"functionText":"function highLightLinkLogError(linkObj, error){\r  var folderID = Log.CreateFolder('One of the following logs should have the broken link highlighted for error: ' + error.message, 'The included logs will be the same but only some will have the link highlighted in the screen shot.');\r  Log.PushLogFolder(folderID);\r  \r  var asyncObj = Runner.CallObjectMethodAsync(Sys, \"HighlightObject\", linkObj, 40);\r  do {\r    logError(error.message, error.description);\r  }\r  while (!asyncObj.Completed);\r  Log.PopLogFolder();\r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"highLightLinkLogErrorEndPoint","lineNo":39,"params":[],"functionText":"function highLightLinkLogErrorEndPoint() \r{\r  var linkObj = Aliases.browser.pageAvalonHowToBook_1.formCountryform.panelPageWrapper.panelMainContainer.panelOuterContainer.panelInnerContainer.panelContent.panelRightCol.linkAvalonWaterwaysGroupEnquiryF;\r  var error = {message: 'It Failed'};\r  highLightLinkLogError(linkObj, error);\r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"browserNameIE","lineNo":46,"params":[],"functionText":"function browserNameIE(){\r  return 'iexplore'; \r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"browserNameFireFox","lineNo":50,"params":[],"functionText":"function browserNameFireFox(){\r  return 'firefox'; \r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"browserNameChrome","lineNo":54,"params":[],"functionText":"function browserNameChrome(){\r  return 'chrome'; \r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"browserNameDefault","lineNo":58,"params":[],"functionText":"function browserNameDefault(){\r  return '*'; \r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"singleWebPage","lineNo":62,"params":[{"name":"waitPage","markedOptional":true,"defaultVal":"false"},{"name":"browserName","markedOptional":true,"defaultVal":"browserNameDefault("}],"functionText":"function singleWebPage( /* optional */ waitPage, /* optional */ browserName)\r{\r  browserName = def(browserName, browserNameDefault());\r  waitPage = def(waitPage, false);\r  \r  var browser = Sys.WaitBrowser(browserName); \r  var pages = findAllChildren(\r    browser,\r    {\r      ObjectType: 'Page'\r    }, /*depth*/ 1 );\r   ensure(pages.length > 0, 'singleWebPage - Cannot find page');\r   var result = pages[0];\r   \r   if (waitPage){\r    result.Wait();\r   }\r   \r   return result;\r}","hasResult":true,"scriptName":"WebUtilsPrivate"},{"name":"singleWebPageEndPoint","lineNo":83,"params":[],"functionText":"function singleWebPageEndPoint() \r{\r  var page = singleWebPage();\r  Sys.HighlightObject(page);\r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"executeFindChildFunc","lineNo":89,"params":[{"name":"findChildFunc","markedOptional":false,"defaultVal":null},{"name":"propValsObj","markedOptional":false,"defaultVal":null},{"name":"depth","markedOptional":true,"defaultVal":"10000"},{"name":"refresh","markedOptional":true,"defaultVal":"true"},{"name":"waitPage","markedOptional":true,"defaultVal":null}],"functionText":"function executeFindChildFunc(findChildFunc, propValsObj, /* optional */ depth,  /* optional */ refresh, /* optional */ waitPage) {\r  depth = def(depth, 10000);\r  refresh = def(refresh, true);\r  var page = singleWebPage(null, waitPage);\r  return findChildFunc(page, propValsObj, depth, refresh);\r}","hasResult":true,"scriptName":"WebUtilsPrivate"},{"name":"verifyStatusCode","lineNo":96,"params":[{"name":"status","markedOptional":false,"defaultVal":null},{"name":"linkInfo","markedOptional":false,"defaultVal":null},{"name":"responseText","markedOptional":false,"defaultVal":null},{"name":"responseTextCheckFunc","markedOptional":false,"defaultVal":null},{"name":"error","markedOptional":false,"defaultVal":null}],"functionText":"function verifyStatusCode(status, linkInfo, responseText, responseTextCheckFunc, error){\r  switch (status)\r  {\r    case 200: // OK \r    case 302: // Found\r    if (!responseTextCheckFunc(responseText))\r    {\r      error.message = linkInfo + 'response text failed check.';\r      error.description = responseText;\r    }\r\r    break;\r  \r    default: {\r      error.message = 'Unexpected status code: ' + status + ': ' + linkInfo;\r      error.description = responseText;\r    }\r  }\r}","hasResult":false,"scriptName":"WebUtilsPrivate"},{"name":"defaultresponseTextCheckFunc","lineNo":116,"params":[{"name":"responseText","markedOptional":false,"defaultVal":null}],"functionText":"function defaultresponseTextCheckFunc(responseText){\r  var result = hasValue(responseText);\r  if (!result) {\r    logError(link + ' failed - no reponse text')\r  }\r  return result;\r}","hasResult":true,"scriptName":"WebUtilsPrivate"},{"name":"verifyStatusCodeEndPoint","lineNo":124,"params":[],"functionText":"function verifyStatusCodeEndPoint(){ \r var error = {};\r verifyStatusCode(0, 'blahh', 'response text', defaultresponseTextCheckFunc, error);\r \r error = {};\r verifyStatusCode(200, 'blahh', 'response text', defaultresponseTextCheckFunc, error);\r Delay(1);\r}","hasResult":false,"scriptName":"WebUtilsPrivate"}]},{"name":"DisabledDummyTest","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\DisabledDummyTest.sj","functions":[{"name":"testCase","lineNo":12,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function testCase(runConfig, testConfig, testCaseID, iteration){\r   Log.Message(\"Dummy Test 4\");\r}","hasResult":false,"scriptName":"DisabledDummyTest"},{"name":"config","lineNo":16,"params":[],"functionText":"function config(){return configuration}","hasResult":true,"scriptName":"DisabledDummyTest"},{"name":"testCaseEndPoint","lineNo":18,"params":[],"functionText":"function testCaseEndPoint(){\r  runTestCaseEndPoint(configuration.testCase);\r}","hasResult":false,"scriptName":"DisabledDummyTest"}]},{"name":"Dummy3Test","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\Dummy3Test.sj","functions":[{"name":"testCase","lineNo":13,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function testCase(runConfig, testConfig, testCaseID, iteration){\r   Log.Message(\"Dummy Test - test case ID: \" + testCaseID);\r   if (testCaseID === 'Dummy-3'){\r       throw(\"I don't want to run dummy 3\");\r   }\r}","hasResult":false,"scriptName":"Dummy3Test"},{"name":"config","lineNo":20,"params":[],"functionText":"function config(){return configuration}","hasResult":true,"scriptName":"Dummy3Test"},{"name":"testCaseEndPoint","lineNo":22,"params":[],"functionText":"function testCaseEndPoint(){\r  runTestCaseEndPoint(configuration.testCase);\r}","hasResult":false,"scriptName":"Dummy3Test"},{"name":"acceptClientMachine","lineNo":26,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptClientMachine(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"Dummy3Test"},{"name":"acceptTest","lineNo":30,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptTest(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"Dummy3Test"},{"name":"acceptIteration","lineNo":34,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function acceptIteration(runConfig, testConfig, testCaseID, iteration){\r  return true;\r}","hasResult":true,"scriptName":"Dummy3Test"}]},{"name":"Dummy4Test","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\Dummy4Test.sj","functions":[{"name":"testCase","lineNo":11,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function testCase(runConfig, testConfig, testCaseID, iteration){\r   Log.Message(\"Dummy Test 4\");\r}","hasResult":false,"scriptName":"Dummy4Test"},{"name":"testCaseEndPoint","lineNo":15,"params":[],"functionText":"function testCaseEndPoint(){\r  runTestCaseEndPoint(configuration.testCase);\r}","hasResult":false,"scriptName":"Dummy4Test"},{"name":"config","lineNo":19,"params":[],"functionText":"function config(){return configuration}","hasResult":true,"scriptName":"Dummy4Test"},{"name":"acceptClientMachine","lineNo":21,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptClientMachine(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"Dummy4Test"},{"name":"acceptTest","lineNo":25,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptTest(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"Dummy4Test"},{"name":"acceptIteration","lineNo":29,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function acceptIteration(runConfig, testConfig, testCaseID, iteration){\r  return true;\r}","hasResult":true,"scriptName":"Dummy4Test"}]},{"name":"DummyDataDrivenTest","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\DummyDataDrivenTest.sj","functions":[{"name":"testCase","lineNo":14,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function testCase(runConfig, testConfig, testCaseID, iteration){\r  var data = ODT.Classes.DataClassGenTest;\r  log('Field text: ' + data.FieldText);\r  log('Field Date: ' + data.FieldDate);\r \r  var childRec = 0; \r  while (data.nextChild()){\r    childRec++;\r    log('------- Child Record: ' + childRec + ' -------')\r    var childData = data.ChildRecs;\r    log('-- child text data: ' + childData.FieldTextChild);\r    log('-- child currency data: ' + childData.FieldCurrencyChild);\r    log('-- child Int data: ' + childData.FieldIntChild);\r  }\r}","hasResult":false,"scriptName":"DummyDataDrivenTest"},{"name":"testCaseEndPoint","lineNo":30,"params":[],"functionText":"function testCaseEndPoint(){\r  runTestCaseEndPoint(configuration.testCase);\r}","hasResult":false,"scriptName":"DummyDataDrivenTest"},{"name":"startIfNotRunning","lineNo":34,"params":[],"functionText":"function startIfNotRunning(){\r  // to be filled in on a project by project bases\r}","hasResult":false,"scriptName":"DummyDataDrivenTest"},{"name":"config","lineNo":39,"params":[],"functionText":"function config(){return configuration}","hasResult":true,"scriptName":"DummyDataDrivenTest"},{"name":"acceptClientMachine","lineNo":41,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptClientMachine(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"DummyDataDrivenTest"},{"name":"acceptIteration","lineNo":49,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function acceptIteration(runConfig, testConfig, testCaseID, iteration){\r  return iteration < 2;\r}","hasResult":true,"scriptName":"DummyDataDrivenTest"}]},{"name":"DummyTest","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\DummyTest.sj","functions":[{"name":"testCase","lineNo":16,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function testCase(runConfig, testConfig, testCaseID, iteration){\r  Log.Message(\"Dummy Test\");\r  expectDefect(123);\r  logError(\"I hate carrots\");\r  endDefect();\r}","hasResult":false,"scriptName":"DummyTest"},{"name":"config","lineNo":23,"params":[],"functionText":"function config(){return configuration}","hasResult":true,"scriptName":"DummyTest"},{"name":"acceptClientMachine","lineNo":25,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptClientMachine(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"DummyTest"},{"name":"acceptTest","lineNo":29,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function acceptTest(runConfig, testConfig){\r  return true;\r}","hasResult":true,"scriptName":"DummyTest"},{"name":"acceptIteration","lineNo":33,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null},{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":false,"defaultVal":null}],"functionText":"function acceptIteration(runConfig, testConfig, testCaseID, iteration){\r  return true;\r}","hasResult":true,"scriptName":"DummyTest"}]},{"name":"Main","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\Main.sj","functions":[{"name":"dummyTests","lineNo":4,"params":[],"functionText":"function dummyTests(){\r  run_THE_COMPANY_NAME_Tests(dummyConfig);\r}","hasResult":false,"scriptName":"Main"},{"name":"run_THE_COMPANY_NAME_Tests","lineNo":13,"params":[{"name":"configFileNoDirOrConfigObj","markedOptional":false,"defaultVal":null}],"functionText":"function run_THE_COMPANY_NAME_Tests(configFileNoDirOrConfigObj){\r  runTests(configFileNoDirOrConfigObj, preAcceptMethod, restartMethod, simpleLogProcessingMethod)\r}","hasResult":false,"scriptName":"Main"},{"name":"preAcceptMethod","lineNo":17,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"testConfig","markedOptional":false,"defaultVal":null}],"functionText":"function preAcceptMethod(runConfig, testConfig){\r  var result = defaultPreAccept(runConfig, testConfig);\r  \r  notImplementedWarning('Only calling default - preAcceptMethod');\r  \r  return result;\r}","hasResult":true,"scriptName":"Main"},{"name":"simpleLogProcessingMethod","lineNo":25,"params":[{"name":"runConfig","markedOptional":false,"defaultVal":null},{"name":"simplifiedLog","markedOptional":false,"defaultVal":null}],"functionText":"function simpleLogProcessingMethod(runConfig, simplifiedLog){\r  notImplementedWarning('simpleLogProcessingMethod');\r}","hasResult":false,"scriptName":"Main"}]},{"name":"TestCaseList","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\TestCaseList.sj","functions":[]},{"name":"TestRunner","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\TestRunner.sj","functions":[{"name":"runTestCaseEndPoint","lineNo":3,"params":[{"name":"testCaseID","markedOptional":false,"defaultVal":null},{"name":"iteration","markedOptional":true,"defaultVal":null},{"name":"runConfig","markedOptional":true,"defaultVal":null}],"functionText":"function runTestCaseEndPoint(testCaseID, /* optional */ iteration, /* optional */ runConfig){\r  TestRunnerUtils.runTestCaseEndPoint(testCaseID, iteration, startIfNotRunning, runConfig) \r}","hasResult":false,"scriptName":"TestRunner","examples":["function runTestCaseEndPointEndPoint(){\r  function startIfNotRunning(){};\r  runTestCaseEndPoint(1, 0, startIfNotRunning);\r}"]},{"name":"startIfNotRunning","lineNo":7,"params":[{"name":"dbName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function startIfNotRunning(dbName, runConfig){\r  if (!isRunning(dbName, runConfig)){\r    restartMethod(dbName, runConfig);\r  }\r}","hasResult":false,"scriptName":"TestRunner","examples":[]},{"name":"restartMethod","lineNo":13,"params":[{"name":"dbName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function restartMethod(dbName, runConfig){\r  notImplementedWarning('restartMethod'); \r}","hasResult":false,"scriptName":"TestRunner","examples":[]}]},{"name":"TestRunnerPrivate","path":"C:\\DocTarget\\Seed\\DemoProject\\Script\\TestRunnerPrivate.sj","functions":[{"name":"isRunning","lineNo":3,"params":[{"name":"dbName","markedOptional":false,"defaultVal":null},{"name":"runConfig","markedOptional":false,"defaultVal":null}],"functionText":"function isRunning(dbName, runConfig){\r  notImplementedWarning('isRunning');\r  return false;\r}","hasResult":true,"scriptName":"TestRunnerPrivate"}]}]