//USEUNIT TestRunnerUtils
//USEUNIT TestRunner
//USEUNIT SysUtils
//USEUNIT SimplifiedLogUtils
//USEUNIT ReflectionUtils
//USEUNIT FileUtils
//USEUNIT _

function run_THE_COMPANY_NAME_Tests(configFileNoDirOrConfigObj, extraFilters){
  var allFilters = testFilters().concat(forceArray(def(extraFilters, [])));
  runTests(
    configFileNoDirOrConfigObj, 
    defaultRunConfigInfo(), 
    defaultTestConfigInfo(), 
    allFilters, 
    simpleLogProcessingMethod
  );
}

function simpleLogProcessingMethod(runConfig, simplifiedLog){
  defaultSimpleLogProcessing(runConfig, simplifiedLog);
  notImplementedWarning('Only calling default - defaultSimpleLogProcessing');
}


// Used in manifest generation

function logRestart(testItem){
  return '===== ' + testItem + ' =====';
}
                      
function logItem(testItem, testConfig){
  return testConfig.id + ':\t' + testItem + ' - When ' + testConfig.when + ' Then ' + testConfig.then; 
}

function replaceBatchFile(testRunName){
  var batchName = 'revert_all_update_run_' + testRunName + '.bat';
  var batchContent = bigString(function(){
                        /*
                      REM this is file is generated by main.deleteRegenerateBatchFiles()
                      REM DO NOT MANUALLY UPDATE THIS FILE
                      REM NEEDS TO BE RUN AS ADMINISTRATOR
                      REM !!!!! THIS SCRIPT WILL REVERT ALL CHANGES IN C:\AUTOMATION !!!!!!!

                      REM Doing the Reversion
                      set "path=%~dp0%"
                      set path=%path:TestComplete\RunTimeFiles\=%
                      "C:\Program Files\TortoiseSVN\bin\svn.exe" revert -R %path%
                      "C:\Program Files\TortoiseSVN\bin\svn.exe" update --force %path%


                      set functionName=#testRun
                      start /min ElavatePrivaledgesLogOffVM.bat

                      REM Calling TestComplete.bat file
                      start /min %~dp0\testRun.bat %functionName%
                        */
                     });
  batchContent = replace(batchContent, '#testRun', testRunName);
  var filePath = runTimeFile(batchName);
  log('Writing file: ' + filePath, batchContent);
  stringToFile(batchContent, filePath);
}

function deleteRegenerateBatchFiles(){
  var scriptInfo = extendedScriptInfo(Project.FileName, 'Main');
  var testRuns = _.chain(scriptInfo.functions)
                  .pluck('name')
                  .filter(function(funcName){return endsWith(funcName, 'TestRun')})
                  .each(replaceBatchFile)
                  .value();

}

//Configs
var demoConfig = {
  name: 'demo Run',
  demo: true
}